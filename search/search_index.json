{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"FlaskData Collect, Detect and Act FlaskData is a cloud API platform to collect and monitor data in clinical trials. The FlaskData platform provides mobile, desktop, and API services to collect clinical data. The Flask API can be integrated into any code that can call a RESTful API. There are 3 main sub-systems in Flask - Collect, Detect, and Act. Collect provides desktop, mobile, and RESTful Flask API services to collect data directly from patients, investigators, and connected medical devices. Collect includes the visual Flask Form designers. Form designers design eCRFs and publish them as eSource and ePRO desktop and native Android mobile apps. Detect provides a capability to automate monitoring of clinical data quality, efficacy, and safety. Protocol deviations and missing patient data is detected uses rules and thresholds. Act provides the capability to automate delivery of alerts to both patients and clinical operations teams. It is triggered when the detect metrics are over or under the set threshold. Read more about the Flaskdata software architecture here: Flaskdata software architecture white paper Introduction Learning objectives What is Flask Data? Understand concepts Use basic functions Basic concepts Study \u2013 a clinical trial or research study Site \u2013 a hospital or clinic Study event \u2013 a visit of a study subject at a site during a study. A study event contains 1 or more eCRFs eCRF \u2013 electronic case report form. Item \u2013 a question on an eCRF EDC - Electronic Data Capture User interface (UI) Web application that runs on your browser All modern browsers, including Chrome and Windows Windows, Linux, and Mac Basic UI after login Top level status info with Change Site / Study Top navigation bar Left side bar Body Plus(+)/minus(-) signs to expand/minimize content Navigation buttons \u2013 Submit, Back, etc\u2026 Roles \u2013 who can do what? Flask Role Customer Admin Role (2) Study Role (3) Site Role (4) Users Subjects Studies Sites Forms design Forms data entry User profile Top line always shows User Name and Role Currently logged-in user and role Click on here at any time to access and change your user profile, including changing your password. Change password Change password allows you to change your password when you want, Just click on Change password option, a reset password email will send to you. Forgot password If you forgot your password, simply select forgot password, and enter your email. You will receive this confirmation message, prompting you to check your email. Using the link provided in the email, enter your new password and login! Customer Profile Customer Profile allows you to edit customer properities (by clicking on the pen in the top right corner of the Customer properties card). You are also able to add comments and entries into Customer MetaData. These entries will allow users to short cut get() commands in Forms, which allows for data extraction while keeping external data secured. Request support If you need support from us, click on this option, and a request support page will be opened. Write your request and you can upload a file. Please detail your request as much as possible. Every effort will be made to get back to you soon. Login Login using your email and password or with your google account Logout Logout \u2013 use the logout button Do not just close the browser, this will leave open sessions on the server and can potentially cause problems. Languages You can change your app language, by press on the language symbol. FlaskData Logo Clicking on FlaskData logo opens the Study Dashboard page.","title":"Home"},{"location":"index.html#flaskdata","text":"Collect, Detect and Act FlaskData is a cloud API platform to collect and monitor data in clinical trials. The FlaskData platform provides mobile, desktop, and API services to collect clinical data. The Flask API can be integrated into any code that can call a RESTful API. There are 3 main sub-systems in Flask - Collect, Detect, and Act. Collect provides desktop, mobile, and RESTful Flask API services to collect data directly from patients, investigators, and connected medical devices. Collect includes the visual Flask Form designers. Form designers design eCRFs and publish them as eSource and ePRO desktop and native Android mobile apps. Detect provides a capability to automate monitoring of clinical data quality, efficacy, and safety. Protocol deviations and missing patient data is detected uses rules and thresholds. Act provides the capability to automate delivery of alerts to both patients and clinical operations teams. It is triggered when the detect metrics are over or under the set threshold. Read more about the Flaskdata software architecture here: Flaskdata software architecture white paper","title":"FlaskData"},{"location":"index.html#introduction","text":"","title":"Introduction"},{"location":"index.html#learning-objectives","text":"What is Flask Data? Understand concepts Use basic functions","title":"Learning objectives"},{"location":"index.html#basic-concepts","text":"Study \u2013 a clinical trial or research study Site \u2013 a hospital or clinic Study event \u2013 a visit of a study subject at a site during a study. A study event contains 1 or more eCRFs eCRF \u2013 electronic case report form. Item \u2013 a question on an eCRF EDC - Electronic Data Capture","title":"Basic concepts"},{"location":"index.html#user-interface-ui","text":"Web application that runs on your browser All modern browsers, including Chrome and Windows Windows, Linux, and Mac Basic UI after login Top level status info with Change Site / Study Top navigation bar Left side bar Body Plus(+)/minus(-) signs to expand/minimize content Navigation buttons \u2013 Submit, Back, etc\u2026","title":"User interface (UI)"},{"location":"index.html#roles-who-can-do-what","text":"Flask Role Customer Admin Role (2) Study Role (3) Site Role (4) Users Subjects Studies Sites Forms design Forms data entry","title":"Roles \u2013 who can do what?"},{"location":"index.html#user-profile","text":"Top line always shows User Name and Role Currently logged-in user and role Click on here at any time to access and change your user profile, including changing your password.","title":"User profile"},{"location":"index.html#change-password","text":"Change password allows you to change your password when you want, Just click on Change password option, a reset password email will send to you.","title":"Change password"},{"location":"index.html#forgot-password","text":"If you forgot your password, simply select forgot password, and enter your email. You will receive this confirmation message, prompting you to check your email. Using the link provided in the email, enter your new password and login!","title":"Forgot password"},{"location":"index.html#customer-profile","text":"Customer Profile allows you to edit customer properities (by clicking on the pen in the top right corner of the Customer properties card). You are also able to add comments and entries into Customer MetaData. These entries will allow users to short cut get() commands in Forms, which allows for data extraction while keeping external data secured.","title":"Customer Profile"},{"location":"index.html#request-support","text":"If you need support from us, click on this option, and a request support page will be opened. Write your request and you can upload a file. Please detail your request as much as possible. Every effort will be made to get back to you soon.","title":"Request support"},{"location":"index.html#login","text":"Login using your email and password or with your google account","title":"Login"},{"location":"index.html#logout","text":"Logout \u2013 use the logout button Do not just close the browser, this will leave open sessions on the server and can potentially cause problems.","title":"Logout"},{"location":"index.html#languages","text":"You can change your app language, by press on the language symbol.","title":"Languages"},{"location":"index.html#flaskdata-logo","text":"Clicking on FlaskData logo opens the Study Dashboard page.","title":"FlaskData Logo"},{"location":"api_introduction.html","text":"API Introduction Audience Developers who want to use the Flask API. Concepts and terms A developer will need credentials for a User account with an API role. This User can be created by the customer admin role. The API User has access to data of the customer account and EDC databases that defined in the study EDC dbname. There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io Each API environments has its own swagger UI (i.e. https://api.flaskdata.io/swagger/ ) There are a few specs, select the relevant spec for the API you are using. Options for specs include: General APIs (i.e. study logs, user ID, etc.) Features (i.e. exporting CRFs to excel) Forms Data (i.e. create event with CRF, update existing event, etc.) Alerts (i.e. alert definition, notification list, metic values, etc.) IDP (i.e. create new mobile user token, logout) For using the FlaskData API with swagger, you need to click on \"Try it out\" for the relevant API. Config/change header and body request as needed and click on the \"Execute\" button. EDC ClinCapture EDC is a 21 CFR Part 11 compliant EDC system that is integrated into Flask Collect. The ClinCapture database uses a standard clinical trial data model (Events or visits, CRFs, Items, Sites, Subjects, Queries, SDV, Audit logs, and data extracts) Users and sites management is performed using the FlaskData UX; the FlaskData API updates/inserts entities into the ClinCapture PostgreSQL database. There are 3 paths for data capture: Direct data capture to EDC, direct data capture in ClinCapture, or data entry from paper source (the traditional way of doing things). eSource with Flask Forms expand online update to EDC You can design CRFs using Forms - site coordinators (and patients using the Flask ePRO app). Forms will update the EDC online, synchronize CRF fields/metadata, and item values. Direct data capture with Flask Forms Automated ETL processes extract data to Flask Detect and Act for analytics and alerts, or you can use FlaskData APIs to extract / insert data in JSON format on demand, for your own analytics processing. Flask Forms eSource Flask Forms is an eSource platform that includes a visual Forms designer. A CRF you design in Forms is designed once and can be rendered on a Desktop or Mobile device for a native Android app. You can use the FlaskData API to extract and insert Forms data. Getting started API Authorization In order to use the FlaskData APIs you need to first get a JWT token with the auth/authorize API. Example On the development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON), you need to set your API User's email and password, like: { \"email\" : \"xxx@gmail.com\" , \"password\" : \"12345678\" } In the response body you will receive an access token, similar to: { \"token\" : \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\" , \"expired\" : \"2019-10-28T15:23:10.407Z\" } Info The expired time is UTC time. Additional Urls There are additional swaggers for additional functionality. Date Server With Data server APIs, you can get Forms data in csv/json format with include/exclude criteria. api.flaskdata.io/data-server FlaskData Features Using features APIs, you can process a few additional FlaskData features, such as, create subject, etc. api.flaskdata.io/features","title":"Introduction"},{"location":"api_introduction.html#api-introduction","text":"","title":"API Introduction"},{"location":"api_introduction.html#audience","text":"Developers who want to use the Flask API.","title":"Audience"},{"location":"api_introduction.html#concepts-and-terms","text":"A developer will need credentials for a User account with an API role. This User can be created by the customer admin role. The API User has access to data of the customer account and EDC databases that defined in the study EDC dbname. There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io Each API environments has its own swagger UI (i.e. https://api.flaskdata.io/swagger/ ) There are a few specs, select the relevant spec for the API you are using. Options for specs include: General APIs (i.e. study logs, user ID, etc.) Features (i.e. exporting CRFs to excel) Forms Data (i.e. create event with CRF, update existing event, etc.) Alerts (i.e. alert definition, notification list, metic values, etc.) IDP (i.e. create new mobile user token, logout) For using the FlaskData API with swagger, you need to click on \"Try it out\" for the relevant API. Config/change header and body request as needed and click on the \"Execute\" button.","title":"Concepts and terms"},{"location":"api_introduction.html#edc","text":"ClinCapture EDC is a 21 CFR Part 11 compliant EDC system that is integrated into Flask Collect. The ClinCapture database uses a standard clinical trial data model (Events or visits, CRFs, Items, Sites, Subjects, Queries, SDV, Audit logs, and data extracts) Users and sites management is performed using the FlaskData UX; the FlaskData API updates/inserts entities into the ClinCapture PostgreSQL database. There are 3 paths for data capture: Direct data capture to EDC, direct data capture in ClinCapture, or data entry from paper source (the traditional way of doing things). eSource with Flask Forms expand online update to EDC You can design CRFs using Forms - site coordinators (and patients using the Flask ePRO app). Forms will update the EDC online, synchronize CRF fields/metadata, and item values. Direct data capture with Flask Forms Automated ETL processes extract data to Flask Detect and Act for analytics and alerts, or you can use FlaskData APIs to extract / insert data in JSON format on demand, for your own analytics processing.","title":"EDC"},{"location":"api_introduction.html#flask-forms-esource","text":"Flask Forms is an eSource platform that includes a visual Forms designer. A CRF you design in Forms is designed once and can be rendered on a Desktop or Mobile device for a native Android app. You can use the FlaskData API to extract and insert Forms data.","title":"Flask Forms eSource"},{"location":"api_introduction.html#getting-started-api","text":"","title":"Getting started API"},{"location":"api_introduction.html#authorization","text":"In order to use the FlaskData APIs you need to first get a JWT token with the auth/authorize API. Example On the development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON), you need to set your API User's email and password, like: { \"email\" : \"xxx@gmail.com\" , \"password\" : \"12345678\" } In the response body you will receive an access token, similar to: { \"token\" : \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\" , \"expired\" : \"2019-10-28T15:23:10.407Z\" } Info The expired time is UTC time.","title":"Authorization"},{"location":"api_introduction.html#additional-urls","text":"There are additional swaggers for additional functionality.","title":"Additional Urls"},{"location":"api_introduction.html#date-server","text":"With Data server APIs, you can get Forms data in csv/json format with include/exclude criteria. api.flaskdata.io/data-server","title":"Date Server"},{"location":"api_introduction.html#flaskdata-features","text":"Using features APIs, you can process a few additional FlaskData features, such as, create subject, etc. api.flaskdata.io/features","title":"FlaskData Features"},{"location":"apiflows.html","text":"API flows The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to an external EDC instance (extract EDC data, etc.) Flask - APIs are related to the internal Flask data model (extract data, insert data, etc.) Request header Authorization parameter in the header request should be the token you had get before from you authorization request EDC parameter in the header request should be the EDC DB name . In this document there are a few examples of FlaskData APIs - There are more APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com . EDC Extract EDC Data There are a few APIs you can use to extract EDC data. For example: /edc/study/extract-data This API extracts EDC data of each table/view/function (i.e. functionName()) and returns a json structure. fromDate, toDate, sort, filters and inputVariables are optional values if tableName is a function. Filters and inputVariable json objects: The key is the column name/input variable name in the EDC PostgreSQL database, the json value is the corresponding value (like where site = XXX)/ input value in function (i.e. schema.function(XXX)). Example { \"tableName\" : \"cc_event_data\" , \"fromDate\" : \"2017-01-01T00:00:00.000Z\" , \"toDate\" : \"2019-02-01T00:00:00.000Z\" , \"sort\" : \"subject\" } Another example: { \"tableName\" : \"cross_event_crf_data\" } /edc/study/download-csvs-data This API downloads a zip folder of CSV files with EDC study data. Each CSV file contains EDC Event-CRF data (Event is often called a Visit in an EDC) /edc/study/extract-study-data-at-crf-level This API extracts EDC data at the CRF level and returns the data as a json object. This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/study/extract-study-data-at-crf-level-to-csvs This API extracts EDC data at CRF level and returns a zip folder includes CSV files (each CRF as CSV file). This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/subjects/create-subject This API creates a subject in the EDC DB and returns the study_subject_id value. Flask /flask/customer/extract-data-to-json This API extracts data from flask tables and views for your customer. The table/ view should have a customer_id column for this process. Examples studies table, audit_user_login, billing_reports_customer, etc. studyIds and filters are optional. /flask/customer/download-billing-reports This API downloads a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. Note This process will download files only if the billing reports features turn on in your customer account. /flask/device/get-logs This API returns device logs of a study. /flask/device/insert-log This API inserts device log into flaskData with the correct study_id according to EDC. The payload parameter is optional and can include each key value pair. /flask/study/create-update-flask-study This API creates/updates study in FlaskData. /flask/site/create-update-flask-site This API creates/updates site in FlaskData. /flask/study/create-update-flask-study-users This API creates Users (if they do not exists) and assigned Users to the study. Note This API deletes the Users that were assigned to this study and assigned the new Users. /data-server/data/extract/extract-study-event-data-to-CSV This API extracts all study data (from FlaskForms) based on study id and download CSV files. /data-server/data/extract/partial-extract-study-event-data-to-json This API extracts all study events and CRF data to JSON using a number of optional filters. You can extract all the data from a study with a simple request body like this: { \"study_id\": 7253541 } . This is like SQL SELECT * FROM clinicalData; Now let's look at our options: Choose what columns you want to select You can control the shape of the result object by using the columns field in your request body. This is like an SQL SELECT col1, col2, col3 FROM statement For example: if you need only crf , event and value fields use: \"columns\" : { \"_id\" : 0 , \"crf\" : 1 , \"event\" : 1 , \"value\" : 1 } Set the _id column to 0 (like in the above example). The API will selectively return the fields you set in the request body when you set them to 1. To get all the fields, don't set fields or specify the entire list of fields. This is like a SELECT * FROM statement. Filter records by date and/or column value You can refine record selection from the API with the date_from, date_to filters and setting values for fields. This is like the SQL WHERE clause - WHERE crf='Demographics' and eventDate between date_from AND date_to. Example \"filters\" : { \"date_from\" : \"2020-12-01T16:26:54.461Z\" , \"date_to\" : \"2020-12-31T16:26:54.461Z\" , \"crf\" : \"Demographics\" , \"item_type\" : \u201cINPUT\u201d } Note Reminder: if you don\u2019t set any filters field you will get all records. /flask/crf/create-CRF-and-insert-data This API creates a CRF in an existing event and inserts data into the CRF. Creates a new AE (adverse event) CRF in existing event. /flask/crf/create-event-CRF-and-insert-data This API creates event and CRF and inserts data. Example - Create a new Medication event with CRF and inserts data. /flask/crf/get-CRF-data-ids This API returns subject's CRF data ID (unique for each CRF) for specific CRF name. /flask/crf/update-CRF-data This API updates CRF data by CRF data ID. Example of how to extract data using client-side JS code: Note The following code example should use the latest version of jQuery var xhrcall = $ . ajax ({ url : 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json' , type : 'POST' , headers : { 'Authorization' : jwt }, data : '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }' , contentType : 'application/json' }); //promise syntax to render after xhr completes xhrcall . done ( function ( data ){ // Enter your code here }) . fail ( function ( error ) { if ( error ) { // Enter your code here } }); Save data to the Flask data model Use cases: You have a mobile app that collects data from a device or person, and you want to save the data to the Flask data model. You have a connected wearable device that connects to your phone app with BLE and you want to save some data to Flask. Pre-requisites: In order to insert data, you will have already created the Study, Site, Event, and Form (CRF) entities in the Flask data model: When you have ePRO (electronic patient reported outcomes), then the user credentials you pass to the API will be for the patient. When a site coordinator screens a patient, the Add Subject page automatically sends a Welcome email to the patient. The patient then clicks and sets a password. (Alternatively you can enable the patient to authenticate with their Google account) When you design a Form (CRF), the items in the Form map 1:1 to the data items that you want to save from your app. Application flow Let's say you have a daily Quality of life Form with a field for hours of sleep that you want to collect on your mobile app. You implement the form on your app with the input field and when the user saves the form on the app, you then save the data in Flask. Alternatively, if your mobile app does sleep tracking, you can take hours of sleep you tracked and save it to Flask every day at 10:00. Your app then sends the data to the Flask API as key-value pairs. See below. TIPS Flask Forms automatically names the item variables; you will probably want to reset variable names to something friendly like PATIENT_AGE or PATIENT_GENDER_CODE. If you are using radio buttons, check, or select boxes in your mobile app - make sure that the values you pass are not offset by 1 by mistake. For example: if PATIENT_GENDER_CODE is (1 - female, 2 - male) then make sure you pass 1 or 2 (and not 0 or 1). When you pass a numeric field - pass it like: \"AGE\": 25 not \"AGE\": \"25\". In JSON, strings are not integers. Radio buttons receive True or False values - pass it like: \"SUBJECT_IS_A_REDHEAD\": true. Dates have the usual timestamp format - pass it like: \"DATE_OF_ADMISSION\": \"2020-12-21 10:10:00.000Z\" Create an Event, CRF and insert data items You can save data to 1 or more CRFS in a single API call Create Event, CRF and insert data /data/create/create-event-crf-and-insert-data creates a new event with CRFs and insert CRFs data for one subject Important: If subject role token is used to call the APIs, then the request body doesn't need to include the subjectLabel or subjectId parameters. If the CRC role token is used, then the request body must include subjectLabel or subjectId. In the below example, the API sends values of selected checkbox/select box items in the CRF. For example: Outcome: 1: 'Ongoing' { \"study_id\" : 6670398 , \"eventName\" : \"Common\" , \"CRFs\" : { \"Adverse Events\" : { \"Description\" : \"Patient developed a temperature\" , \"Anticipated\" : \"0\" , \"Serious\" : \"0\" , \"StartDate\" : \"01-Mar-2021\" , \"StopDate\" : \"03-Mar-2021\" , \"Outcome\" : \"1\" , \"Severity\" : \"1\" , \"RelatedTo\" : \"3\" , \"ActionTaken\" : \"1\" }, \"ConMeds\" : { \"GenericName\" : \"Aspirin\" , \"Dose\" : \"500\" , \"Units\" : \"mg\" , \"Route\" : \"1\" , \"RelatedToAE\" : \"1\" } } } Under the hood - Code generator - ePRO (Electronic patient reported outcomes) All of this probably seems a little abstract, so lets see some working code. Surf over to the Flask API Example code generator The Code generator page is a React application that generates working NodeJS code; showing you the API call with proper arguments. You can copy and past the code and run it on the command line with nodejs. When you hit the green Run Function button - you will see the results from the API call on the page. As we mentioned before, the patient (AKA Subject) will have already been screened to the study and have credentials; we'll be using the Subject credentials in this API flow. The following sequence will show how to authorize the subject, get his user id an study subject label, and insert some data. Authorization - pass in the credentials of the subject (email and password). You'll authorize the Subject after they logs in to your app with the credentials they set on their Welcome to Flask email. Get User profile - pass the JWT token and get the Subject ID and Subject label (along with a number of other fields) Get studies of subject - pass the JWT token with the Subject ID and get the Study ID of the study where the Subject is enrolled Create CRF and insert data - pass the JWT token with Study ID, Subject ID, and the CRF payload and voila - you've inserted data! ```","title":"Flows"},{"location":"apiflows.html#api-flows","text":"The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to an external EDC instance (extract EDC data, etc.) Flask - APIs are related to the internal Flask data model (extract data, insert data, etc.) Request header Authorization parameter in the header request should be the token you had get before from you authorization request EDC parameter in the header request should be the EDC DB name . In this document there are a few examples of FlaskData APIs - There are more APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com .","title":"API flows"},{"location":"apiflows.html#edc","text":"","title":"EDC"},{"location":"apiflows.html#extract-edc-data","text":"There are a few APIs you can use to extract EDC data. For example:","title":"Extract EDC Data"},{"location":"apiflows.html#edcstudyextract-data","text":"This API extracts EDC data of each table/view/function (i.e. functionName()) and returns a json structure. fromDate, toDate, sort, filters and inputVariables are optional values if tableName is a function. Filters and inputVariable json objects: The key is the column name/input variable name in the EDC PostgreSQL database, the json value is the corresponding value (like where site = XXX)/ input value in function (i.e. schema.function(XXX)). Example { \"tableName\" : \"cc_event_data\" , \"fromDate\" : \"2017-01-01T00:00:00.000Z\" , \"toDate\" : \"2019-02-01T00:00:00.000Z\" , \"sort\" : \"subject\" } Another example: { \"tableName\" : \"cross_event_crf_data\" }","title":"/edc/study/extract-data"},{"location":"apiflows.html#edcstudydownload-csvs-data","text":"This API downloads a zip folder of CSV files with EDC study data. Each CSV file contains EDC Event-CRF data (Event is often called a Visit in an EDC)","title":"/edc/study/download-csvs-data"},{"location":"apiflows.html#edcstudyextract-study-data-at-crf-level","text":"This API extracts EDC data at the CRF level and returns the data as a json object. This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level"},{"location":"apiflows.html#edcstudyextract-study-data-at-crf-level-to-csvs","text":"This API extracts EDC data at CRF level and returns a zip folder includes CSV files (each CRF as CSV file). This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level-to-csvs"},{"location":"apiflows.html#edcsubjectscreate-subject","text":"This API creates a subject in the EDC DB and returns the study_subject_id value.","title":"/edc/subjects/create-subject"},{"location":"apiflows.html#flask","text":"","title":"Flask"},{"location":"apiflows.html#flaskcustomerextract-data-to-json","text":"This API extracts data from flask tables and views for your customer. The table/ view should have a customer_id column for this process. Examples studies table, audit_user_login, billing_reports_customer, etc. studyIds and filters are optional.","title":"/flask/customer/extract-data-to-json"},{"location":"apiflows.html#flaskcustomerdownload-billing-reports","text":"This API downloads a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. Note This process will download files only if the billing reports features turn on in your customer account.","title":"/flask/customer/download-billing-reports"},{"location":"apiflows.html#flaskdeviceget-logs","text":"This API returns device logs of a study.","title":"/flask/device/get-logs"},{"location":"apiflows.html#flaskdeviceinsert-log","text":"This API inserts device log into flaskData with the correct study_id according to EDC. The payload parameter is optional and can include each key value pair.","title":"/flask/device/insert-log"},{"location":"apiflows.html#flaskstudycreate-update-flask-study","text":"This API creates/updates study in FlaskData.","title":"/flask/study/create-update-flask-study"},{"location":"apiflows.html#flasksitecreate-update-flask-site","text":"This API creates/updates site in FlaskData.","title":"/flask/site/create-update-flask-site"},{"location":"apiflows.html#flaskstudycreate-update-flask-study-users","text":"This API creates Users (if they do not exists) and assigned Users to the study. Note This API deletes the Users that were assigned to this study and assigned the new Users.","title":"/flask/study/create-update-flask-study-users"},{"location":"apiflows.html#data-serverdataextractextract-study-event-data-to-csv","text":"This API extracts all study data (from FlaskForms) based on study id and download CSV files.","title":"/data-server/data/extract/extract-study-event-data-to-CSV"},{"location":"apiflows.html#data-serverdataextractpartial-extract-study-event-data-to-json","text":"This API extracts all study events and CRF data to JSON using a number of optional filters. You can extract all the data from a study with a simple request body like this: { \"study_id\": 7253541 } . This is like SQL SELECT * FROM clinicalData; Now let's look at our options:","title":"/data-server/data/extract/partial-extract-study-event-data-to-json"},{"location":"apiflows.html#choose-what-columns-you-want-to-select","text":"You can control the shape of the result object by using the columns field in your request body. This is like an SQL SELECT col1, col2, col3 FROM statement For example: if you need only crf , event and value fields use: \"columns\" : { \"_id\" : 0 , \"crf\" : 1 , \"event\" : 1 , \"value\" : 1 } Set the _id column to 0 (like in the above example). The API will selectively return the fields you set in the request body when you set them to 1. To get all the fields, don't set fields or specify the entire list of fields. This is like a SELECT * FROM statement.","title":"Choose what columns you want to select"},{"location":"apiflows.html#filter-records-by-date-andor-column-value","text":"You can refine record selection from the API with the date_from, date_to filters and setting values for fields. This is like the SQL WHERE clause - WHERE crf='Demographics' and eventDate between date_from AND date_to. Example \"filters\" : { \"date_from\" : \"2020-12-01T16:26:54.461Z\" , \"date_to\" : \"2020-12-31T16:26:54.461Z\" , \"crf\" : \"Demographics\" , \"item_type\" : \u201cINPUT\u201d } Note Reminder: if you don\u2019t set any filters field you will get all records.","title":"Filter records by date and/or column value"},{"location":"apiflows.html#flaskcrfcreate-crf-and-insert-data","text":"This API creates a CRF in an existing event and inserts data into the CRF. Creates a new AE (adverse event) CRF in existing event.","title":"/flask/crf/create-CRF-and-insert-data"},{"location":"apiflows.html#flaskcrfcreate-event-crf-and-insert-data","text":"This API creates event and CRF and inserts data. Example - Create a new Medication event with CRF and inserts data.","title":"/flask/crf/create-event-CRF-and-insert-data"},{"location":"apiflows.html#flaskcrfget-crf-data-ids","text":"This API returns subject's CRF data ID (unique for each CRF) for specific CRF name.","title":"/flask/crf/get-CRF-data-ids"},{"location":"apiflows.html#flaskcrfupdate-crf-data","text":"This API updates CRF data by CRF data ID.","title":"/flask/crf/update-CRF-data"},{"location":"apiflows.html#example-of-how-to-extract-data-using-client-side-js-code","text":"Note The following code example should use the latest version of jQuery var xhrcall = $ . ajax ({ url : 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json' , type : 'POST' , headers : { 'Authorization' : jwt }, data : '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }' , contentType : 'application/json' }); //promise syntax to render after xhr completes xhrcall . done ( function ( data ){ // Enter your code here }) . fail ( function ( error ) { if ( error ) { // Enter your code here } });","title":"Example of how to extract data using client-side JS code:"},{"location":"apiflows.html#save-data-to-the-flask-data-model","text":"","title":"Save data to the Flask data model"},{"location":"apiflows.html#use-cases","text":"You have a mobile app that collects data from a device or person, and you want to save the data to the Flask data model. You have a connected wearable device that connects to your phone app with BLE and you want to save some data to Flask. Pre-requisites: In order to insert data, you will have already created the Study, Site, Event, and Form (CRF) entities in the Flask data model: When you have ePRO (electronic patient reported outcomes), then the user credentials you pass to the API will be for the patient. When a site coordinator screens a patient, the Add Subject page automatically sends a Welcome email to the patient. The patient then clicks and sets a password. (Alternatively you can enable the patient to authenticate with their Google account) When you design a Form (CRF), the items in the Form map 1:1 to the data items that you want to save from your app. Application flow Let's say you have a daily Quality of life Form with a field for hours of sleep that you want to collect on your mobile app. You implement the form on your app with the input field and when the user saves the form on the app, you then save the data in Flask. Alternatively, if your mobile app does sleep tracking, you can take hours of sleep you tracked and save it to Flask every day at 10:00. Your app then sends the data to the Flask API as key-value pairs. See below. TIPS Flask Forms automatically names the item variables; you will probably want to reset variable names to something friendly like PATIENT_AGE or PATIENT_GENDER_CODE. If you are using radio buttons, check, or select boxes in your mobile app - make sure that the values you pass are not offset by 1 by mistake. For example: if PATIENT_GENDER_CODE is (1 - female, 2 - male) then make sure you pass 1 or 2 (and not 0 or 1). When you pass a numeric field - pass it like: \"AGE\": 25 not \"AGE\": \"25\". In JSON, strings are not integers. Radio buttons receive True or False values - pass it like: \"SUBJECT_IS_A_REDHEAD\": true. Dates have the usual timestamp format - pass it like: \"DATE_OF_ADMISSION\": \"2020-12-21 10:10:00.000Z\"","title":"Use cases:"},{"location":"apiflows.html#create-an-event-crf-and-insert-data-items","text":"You can save data to 1 or more CRFS in a single API call Create Event, CRF and insert data /data/create/create-event-crf-and-insert-data creates a new event with CRFs and insert CRFs data for one subject Important: If subject role token is used to call the APIs, then the request body doesn't need to include the subjectLabel or subjectId parameters. If the CRC role token is used, then the request body must include subjectLabel or subjectId. In the below example, the API sends values of selected checkbox/select box items in the CRF. For example: Outcome: 1: 'Ongoing' { \"study_id\" : 6670398 , \"eventName\" : \"Common\" , \"CRFs\" : { \"Adverse Events\" : { \"Description\" : \"Patient developed a temperature\" , \"Anticipated\" : \"0\" , \"Serious\" : \"0\" , \"StartDate\" : \"01-Mar-2021\" , \"StopDate\" : \"03-Mar-2021\" , \"Outcome\" : \"1\" , \"Severity\" : \"1\" , \"RelatedTo\" : \"3\" , \"ActionTaken\" : \"1\" }, \"ConMeds\" : { \"GenericName\" : \"Aspirin\" , \"Dose\" : \"500\" , \"Units\" : \"mg\" , \"Route\" : \"1\" , \"RelatedToAE\" : \"1\" } } }","title":"Create an Event, CRF and insert data items"},{"location":"apiflows.html#under-the-hood-code-generator-epro-electronic-patient-reported-outcomes","text":"All of this probably seems a little abstract, so lets see some working code. Surf over to the Flask API Example code generator The Code generator page is a React application that generates working NodeJS code; showing you the API call with proper arguments. You can copy and past the code and run it on the command line with nodejs. When you hit the green Run Function button - you will see the results from the API call on the page. As we mentioned before, the patient (AKA Subject) will have already been screened to the study and have credentials; we'll be using the Subject credentials in this API flow. The following sequence will show how to authorize the subject, get his user id an study subject label, and insert some data. Authorization - pass in the credentials of the subject (email and password). You'll authorize the Subject after they logs in to your app with the credentials they set on their Welcome to Flask email. Get User profile - pass the JWT token and get the Subject ID and Subject label (along with a number of other fields) Get studies of subject - pass the JWT token with the Subject ID and get the Study ID of the study where the Subject is enrolled Create CRF and insert data - pass the JWT token with Study ID, Subject ID, and the CRF payload and voila - you've inserted data! ```","title":"Under the hood - Code generator - ePRO (Electronic patient reported outcomes)"},{"location":"edc.html","text":"EDC FlaskData team support ClinCapture system. You can use ClinCapture for your study. You can use just EDC, OR use EDC with Flask (see the relationship between FlaskData and EDC ) EDC is a data collection system for clinical trials. For more information see the user guide doc. ClinCapture User Guide","title":"EDC"},{"location":"edc.html#edc","text":"FlaskData team support ClinCapture system. You can use ClinCapture for your study. You can use just EDC, OR use EDC with Flask (see the relationship between FlaskData and EDC ) EDC is a data collection system for clinical trials. For more information see the user guide doc. ClinCapture User Guide","title":"EDC"},{"location":"epro.html","text":"ePRO Desktop and native Android mobile app to collect patient reported outcomes. What is Flask PRO? Flask ePRO provides a desktop and native Android mobile app to collect patient reported outcomes. Use the visual Forms designer and deploy to desktop and mobile. Prerequisites Study definition To define study with ePRO, the study should be defined as the following: 1. Enable patient reported outcome module? 3. PRO URL : should be https://epro.flaskdata.io , (If the study has another PRO, then fill the PRO URL field with your study's PRO URL). Forms definitions To define ePRO questionnaire, you need to create CRF/s and Event that includes your diary CRF(s) first. Second you need to create a Study Schedule with your period diary. Welcome Email and SMS When a subject has been created, the patient receives a welcome email and SMS with the PRO link. The patient is invited to enter their diary. If the patient forgets their password, site role user (CRC or PI) can go to the subject's profile page and send them a Welcome Back- Reset password email. The patient will receive another welcome email. Subject invited When the patient gets a welcome email/SMS, they should click on the link. The patient is invited to login with their Google account, OR to choose a password. Note To create a password or reset password - the CRC user should reset the subject's password by clicking on the Reset password option. The patient will receive a reset password email. After the subject sets their password, they can login to ePRO with their Google account or with their FlaskData password. Android application Installation If the patient has an Android phone, they can install the Flask ePRO application from the Google play store. Search \"flask epro\" and install. After the patient installs the Flask ePRO application, they will see the Flask ePRO icon Just click on the application and login to ePRO, Enjoy Login to Flask ePRO Open Flask ePRO application and login to your diary. (To login by email and password you should create the password first using the reset password option) Enter diary When the patient logins to ePRO, they see their diary for the current date. They should complete the diary and save. If there are a few Forms in the diary, the next form will be opened when the SAVE AND NEXT button is clicked. Important If the patient completed a part of their diary, they can continue later. If patient forgot to complete in their diary, they can still complete it within the next 2 days (By logs option) Required fields are marked with a red asterisk. If patient try to save the diary with missing information, an error flag appears. Clicking on the error flag will open the error message. Input Data The patient can click the Input Data option and complete their diary for the current date. If they saved their data before, they can only view the data and cannot change it. Logs Patients can view and continue adding to diaries with the Logs option My Account Patients can change their account definition by clicking on the My Account option They can change their default language. Support languages For ePRO language support, the customer admin user should define it in the CRFs definition Patients can change ePRO display mode by clicking on theme option. If they sets the mode as Dark they will see something like this: Study information The patient can see details of the study they are participating in by clicking on the exclamation mark. FlaskData application If the subject cannot use Flask ePRO android application, they can use FlaskData application to enter their diary. It's less beautiful but works great. In the case that the patients phone does not support Android it is better for the patient to use their desktop. Login The patient should login to FlaskData ePRO URL (https://epro.flaskdata.io) Input Data When the patient logs into their diary, a diary for the current date opens. They can start to fill the diary. If there is another Form in the diary they should click the SAVE AND NEXT button. If they completed the last form, they should click the FINISH button. When the patient completes the diary, a success message appears. To go back to Input Data , click on the icon. Logs The patient can see their diaries using the Logs option. Using the logs option, the patient cannot change their diaries, only view them. Forget Option If the patient filled their diary but didn't finish, they can continue using Logs option They can continue filling in data from yesterday's diary, as well as, from the diaries of two days ago. If the patient forgots to fill their diary, they can enter data for yesterday's diary and for the diary of two days ago. My Account To see the account definition, click on the My Account icon. Note Patients can change the language by click on the languages icon - this option change the language for this login but it doesn't change patient account definitions. In the next login the language will be set to the default language again. Be sure to save the patient's account information after changing. Study information The patient can see details of the study they are participating in by clicking on the exclamation mark. Logout After the patient finish completing their diary, they can logout from the system by clicking the Logout icon.","title":"Flask ePRO"},{"location":"epro.html#epro","text":"Desktop and native Android mobile app to collect patient reported outcomes.","title":"ePRO"},{"location":"epro.html#what-is-flask-pro","text":"Flask ePRO provides a desktop and native Android mobile app to collect patient reported outcomes. Use the visual Forms designer and deploy to desktop and mobile.","title":"What is Flask PRO?"},{"location":"epro.html#prerequisites","text":"","title":"Prerequisites"},{"location":"epro.html#study-definition","text":"To define study with ePRO, the study should be defined as the following: 1. Enable patient reported outcome module? 3. PRO URL : should be https://epro.flaskdata.io , (If the study has another PRO, then fill the PRO URL field with your study's PRO URL).","title":"Study definition"},{"location":"epro.html#forms-definitions","text":"To define ePRO questionnaire, you need to create CRF/s and Event that includes your diary CRF(s) first. Second you need to create a Study Schedule with your period diary.","title":"Forms definitions"},{"location":"epro.html#welcome-email-and-sms","text":"When a subject has been created, the patient receives a welcome email and SMS with the PRO link. The patient is invited to enter their diary. If the patient forgets their password, site role user (CRC or PI) can go to the subject's profile page and send them a Welcome Back- Reset password email. The patient will receive another welcome email.","title":"Welcome Email and SMS"},{"location":"epro.html#subject-invited","text":"When the patient gets a welcome email/SMS, they should click on the link. The patient is invited to login with their Google account, OR to choose a password. Note To create a password or reset password - the CRC user should reset the subject's password by clicking on the Reset password option. The patient will receive a reset password email. After the subject sets their password, they can login to ePRO with their Google account or with their FlaskData password.","title":"Subject invited"},{"location":"epro.html#android-application","text":"","title":"Android application"},{"location":"epro.html#installation","text":"If the patient has an Android phone, they can install the Flask ePRO application from the Google play store. Search \"flask epro\" and install. After the patient installs the Flask ePRO application, they will see the Flask ePRO icon Just click on the application and login to ePRO, Enjoy","title":"Installation"},{"location":"epro.html#login-to-flask-epro","text":"Open Flask ePRO application and login to your diary. (To login by email and password you should create the password first using the reset password option)","title":"Login to Flask ePRO"},{"location":"epro.html#enter-diary","text":"When the patient logins to ePRO, they see their diary for the current date. They should complete the diary and save. If there are a few Forms in the diary, the next form will be opened when the SAVE AND NEXT button is clicked. Important If the patient completed a part of their diary, they can continue later. If patient forgot to complete in their diary, they can still complete it within the next 2 days (By logs option) Required fields are marked with a red asterisk. If patient try to save the diary with missing information, an error flag appears. Clicking on the error flag will open the error message.","title":"Enter diary"},{"location":"epro.html#input-data","text":"The patient can click the Input Data option and complete their diary for the current date. If they saved their data before, they can only view the data and cannot change it.","title":"Input Data"},{"location":"epro.html#logs","text":"Patients can view and continue adding to diaries with the Logs option","title":"Logs"},{"location":"epro.html#my-account","text":"Patients can change their account definition by clicking on the My Account option They can change their default language. Support languages For ePRO language support, the customer admin user should define it in the CRFs definition Patients can change ePRO display mode by clicking on theme option. If they sets the mode as Dark they will see something like this:","title":"My Account"},{"location":"epro.html#study-information","text":"The patient can see details of the study they are participating in by clicking on the exclamation mark.","title":"Study information"},{"location":"epro.html#flaskdata-application","text":"If the subject cannot use Flask ePRO android application, they can use FlaskData application to enter their diary. It's less beautiful but works great. In the case that the patients phone does not support Android it is better for the patient to use their desktop.","title":"FlaskData application"},{"location":"epro.html#login","text":"The patient should login to FlaskData ePRO URL (https://epro.flaskdata.io)","title":"Login"},{"location":"epro.html#input-data_1","text":"When the patient logs into their diary, a diary for the current date opens. They can start to fill the diary. If there is another Form in the diary they should click the SAVE AND NEXT button. If they completed the last form, they should click the FINISH button. When the patient completes the diary, a success message appears. To go back to Input Data , click on the icon.","title":"Input Data"},{"location":"epro.html#logs_1","text":"The patient can see their diaries using the Logs option. Using the logs option, the patient cannot change their diaries, only view them. Forget Option If the patient filled their diary but didn't finish, they can continue using Logs option They can continue filling in data from yesterday's diary, as well as, from the diaries of two days ago. If the patient forgots to fill their diary, they can enter data for yesterday's diary and for the diary of two days ago.","title":"Logs"},{"location":"epro.html#my-account_1","text":"To see the account definition, click on the My Account icon. Note Patients can change the language by click on the languages icon - this option change the language for this login but it doesn't change patient account definitions. In the next login the language will be set to the default language again. Be sure to save the patient's account information after changing.","title":"My Account"},{"location":"epro.html#study-information_1","text":"The patient can see details of the study they are participating in by clicking on the exclamation mark.","title":"Study information"},{"location":"epro.html#logout","text":"After the patient finish completing their diary, they can logout from the system by clicking the Logout icon.","title":"Logout"},{"location":"epro_desktop.html","text":"ePRO Desktop Attached are a few short videos with example of ePRO desktop . Login to ePRO desktop This is a short video with examples of patient's diary using a desktop. ePRO desktop Options This is a short video with examples of patient's diary options.","title":"ePRO Desktop"},{"location":"epro_desktop.html#epro-desktop","text":"Attached are a few short videos with example of ePRO desktop .","title":"ePRO Desktop"},{"location":"epro_desktop.html#login-to-epro-desktop","text":"This is a short video with examples of patient's diary using a desktop.","title":"Login to ePRO desktop"},{"location":"epro_desktop.html#epro-desktop-options","text":"This is a short video with examples of patient's diary options.","title":"ePRO desktop Options"},{"location":"epro_mobile.html","text":"ePRO Mobile Attached a few short videos with example of ePRO Mobile . First login with email and password After the CRC adds a subject, the patient will receive a welcome email. The patient should click on the email link and create a new password. Login to ePRO mobile and fill your diary This is a short video with an example of a patient's diary using a mobile device. ePRO mobile Options This is a short video with an example of patient's diary options. See their diary data Note Diary Data cannot be changed after saving. See their diary logs Change languages Change display mode See study details.","title":"ePRO Mobile"},{"location":"epro_mobile.html#epro-mobile","text":"Attached a few short videos with example of ePRO Mobile .","title":"ePRO Mobile"},{"location":"epro_mobile.html#first-login-with-email-and-password","text":"After the CRC adds a subject, the patient will receive a welcome email. The patient should click on the email link and create a new password.","title":"First login with email and password"},{"location":"epro_mobile.html#login-to-epro-mobile-and-fill-your-diary","text":"This is a short video with an example of a patient's diary using a mobile device.","title":"Login to ePRO mobile and fill your diary"},{"location":"epro_mobile.html#epro-mobile-options","text":"This is a short video with an example of patient's diary options. See their diary data Note Diary Data cannot be changed after saving. See their diary logs Change languages Change display mode See study details.","title":"ePRO mobile Options"},{"location":"epro_patient_instructions.html","text":"Research diaries - completion instructions This document specifies instructions for filling a patient diary. Upon joining the study, you will have access to the electronic diary system designed for participants in the trial and designed for daily filling of tracking diary pages via mobile phone or computer. First login for using desktop Before the first entry, you will receive a welcome email from Flask Data. Upon receiving the email, you can enter and set a personal password for the system using the create password email. Note The link to the system is available from any mobile or stationary device https://epro.flaskdata.io/welcome First login for using Android mobile This is a short video of diary using mobile. Diary Options This is a short video with example of patient's diary options. See their diary data Note Diary Data cannot be changed after saving. See their diary logs Change languages Change display mode See study details. Important Upon completion of all the required details, make sure you click on the Save and Next or Finish control (this is so that all the information will be saved). By clicking on the text Data log you can find the logs that are waiting to be filled in by you. In the relevant box for the day of filling in, click on Add Event Enter the diary you need to fill out. Be sure to fill in the daily diary and all the details in order every day. When the filling is complete, click on Finish Please note that the daily log of yesterday and the day before can be completed - the details of the log cannot be completed backwards of 3 days or more. Thank you for joining the study","title":"Instructions for patient diary"},{"location":"epro_patient_instructions.html#research-diaries-completion-instructions","text":"This document specifies instructions for filling a patient diary. Upon joining the study, you will have access to the electronic diary system designed for participants in the trial and designed for daily filling of tracking diary pages via mobile phone or computer.","title":"Research diaries - completion instructions"},{"location":"epro_patient_instructions.html#first-login-for-using-desktop","text":"Before the first entry, you will receive a welcome email from Flask Data. Upon receiving the email, you can enter and set a personal password for the system using the create password email. Note The link to the system is available from any mobile or stationary device https://epro.flaskdata.io/welcome","title":"First login for using desktop"},{"location":"epro_patient_instructions.html#first-login-for-using-android-mobile","text":"This is a short video of diary using mobile.","title":"First login for using Android mobile"},{"location":"epro_patient_instructions.html#diary-options","text":"This is a short video with example of patient's diary options. See their diary data Note Diary Data cannot be changed after saving. See their diary logs Change languages Change display mode See study details. Important Upon completion of all the required details, make sure you click on the Save and Next or Finish control (this is so that all the information will be saved). By clicking on the text Data log you can find the logs that are waiting to be filled in by you. In the relevant box for the day of filling in, click on Add Event Enter the diary you need to fill out. Be sure to fill in the daily diary and all the details in order every day. When the filling is complete, click on Finish Please note that the daily log of yesterday and the day before can be completed - the details of the log cannot be completed backwards of 3 days or more. Thank you for joining the study","title":"Diary Options"},{"location":"first_study.html","text":"Define your study After signing up, the system will create your first study called default-XXX . Study Edit To edit the study- check it and in ACTIONS click on the Edit option. In the edit study window you can define your study profile, definitions, etc. Study definition values Fill out the Database and the EDC URL fields if you are using an external EDC like ClinCapture. Enable patient reported outcome module? Click this checkbox if your study uses Flask ePRO desktop / Mobile edition. PRO URL : Enter the PRO URL field with the Website address of your ePRO system - if your'e using Flask ePRO, then the default will be Flask ePRO . Package : There are 3 available packages, Start, Submit and Validate. Start - The study uses Flask Subject management and Flask Forms for data Collect. Validate - Start + ClinCapture EDC on the Flaskdata cloud platform. Submit - Start + external EDC Alert data source : Data for alert definitions (If study uses ClinCapture you should choose PostgreSQL otherwise choose MongoDB). Study subject prefix : Prefix for automatically creating a Subject label like - NCT123456-001 Subject\u2019s IDPs settings : Enable Subjects to login with their Google Account or enable Subjects to login with multiple identity providers. When you click SAVE , the profile study will be opened. Study Profile The Study Profile page shows your study's attributes; Alert rules, Analytic rules, Users, Sites and comments. Comments In the Comments card you can record free text annotations about your study. In the Study Profile page you have a green ACTIONS button with Manage users and Manage sites options. Study -> Manage Users In the Manage Users page you can add/remove users from this study. To add a new user to the study - click create the User . Type any part of the user's name in the Select Users box, and click the user you want to add to the study. Click NEXT STEP , and welcome emails will be sent to the users. Study -> Manage sites In the Manage sites page you can add/remove site from this study. To add a new site to study - click create the site first. Type any part of the site's name in the select sites box and click the site you want to add to the study. Click NEXT STEP","title":"First Study"},{"location":"first_study.html#define-your-study","text":"After signing up, the system will create your first study called default-XXX .","title":"Define your study"},{"location":"first_study.html#study-edit","text":"To edit the study- check it and in ACTIONS click on the Edit option. In the edit study window you can define your study profile, definitions, etc. Study definition values Fill out the Database and the EDC URL fields if you are using an external EDC like ClinCapture. Enable patient reported outcome module? Click this checkbox if your study uses Flask ePRO desktop / Mobile edition. PRO URL : Enter the PRO URL field with the Website address of your ePRO system - if your'e using Flask ePRO, then the default will be Flask ePRO . Package : There are 3 available packages, Start, Submit and Validate. Start - The study uses Flask Subject management and Flask Forms for data Collect. Validate - Start + ClinCapture EDC on the Flaskdata cloud platform. Submit - Start + external EDC Alert data source : Data for alert definitions (If study uses ClinCapture you should choose PostgreSQL otherwise choose MongoDB). Study subject prefix : Prefix for automatically creating a Subject label like - NCT123456-001 Subject\u2019s IDPs settings : Enable Subjects to login with their Google Account or enable Subjects to login with multiple identity providers. When you click SAVE , the profile study will be opened.","title":"Study Edit"},{"location":"first_study.html#study-profile","text":"The Study Profile page shows your study's attributes; Alert rules, Analytic rules, Users, Sites and comments. Comments In the Comments card you can record free text annotations about your study. In the Study Profile page you have a green ACTIONS button with Manage users and Manage sites options.","title":"Study Profile"},{"location":"first_study.html#study-manage-users","text":"In the Manage Users page you can add/remove users from this study. To add a new user to the study - click create the User . Type any part of the user's name in the Select Users box, and click the user you want to add to the study. Click NEXT STEP , and welcome emails will be sent to the users.","title":"Study -&gt; Manage Users"},{"location":"first_study.html#study-manage-sites","text":"In the Manage sites page you can add/remove site from this study. To add a new site to study - click create the site first. Type any part of the site's name in the select sites box and click the site you want to add to the study. Click NEXT STEP","title":"Study -&gt; Manage sites"},{"location":"flask_and_edc.html","text":"Flask and EDC You can use FlaskData and ClinCapture Database in parallel for your study. There are a few functions to connect them: Create user in EDC feature - Create a user in flask and they will be created in EDC. Create site in Flask - The site will be created in EDC. Add subject in Flask - The subject will be added in EDC. EDC button - Opens the clincapture in a new window. See EDC Queries in tools . Download EDC data (CSV files) Connect Forms data and EDC data. Create site EDC has a lot of connectivity, After you add a site in Flask you must go to EDC and \"edit\" the site. Just click edit and save without editing anything. Relationship between Forms and EDC If your study uses ClinCapture Database , you can connect the two. Import CRF from EDC You can import CRF from EDC to Forms by click on the blue IMPORT CRF FROM EDC button. The CRF list opens and you can import each CRF needed. After imported, you can edit the CRF . Now - You have CRF in Forms related to EDC CRF. Each CRF data you enter or edit for specific subject in forms will update the EDC CRF data. To detach the CRF from EDC CRF, go to the CRF list ACTIONS -> DETACH CRF Export CRF to EDC You can export CRF to EDC by clicking on the ACTIONS -> EXPORT option Example If the study uses Flask PRO and EDC DB, you can export the study PRO CRFs to EDC. When the subject inserts data in ePRO, the data is inserted into EDC as well. Import Event from EDC You can import event from EDC, including all it's CRFs. In the Event Definition tab, click on the blue IMPORT EVENT DEFITION FROM EDC button. Event lists appear and you can import each event from there, edit the imported event, and it's CRFs. Export Event to EDC You can export Event to EDC by click on the ACTIONS -> EXPORT option The export window Difference between Flask Event Definition and EDC Event Definition preview shows the event's different definitions between Forms and EDC. You can export or cancel the export process. Export study By click on the Export study Hamburger option, you can export all the Events and CRFs of the study to EDC DB.","title":"EDC integration"},{"location":"flask_and_edc.html#flask-and-edc","text":"You can use FlaskData and ClinCapture Database in parallel for your study. There are a few functions to connect them: Create user in EDC feature - Create a user in flask and they will be created in EDC. Create site in Flask - The site will be created in EDC. Add subject in Flask - The subject will be added in EDC. EDC button - Opens the clincapture in a new window. See EDC Queries in tools . Download EDC data (CSV files) Connect Forms data and EDC data. Create site EDC has a lot of connectivity, After you add a site in Flask you must go to EDC and \"edit\" the site. Just click edit and save without editing anything.","title":"Flask and EDC"},{"location":"flask_and_edc.html#relationship-between-forms-and-edc","text":"If your study uses ClinCapture Database , you can connect the two.","title":"Relationship between Forms and EDC"},{"location":"flask_and_edc.html#import-crf-from-edc","text":"You can import CRF from EDC to Forms by click on the blue IMPORT CRF FROM EDC button. The CRF list opens and you can import each CRF needed. After imported, you can edit the CRF . Now - You have CRF in Forms related to EDC CRF. Each CRF data you enter or edit for specific subject in forms will update the EDC CRF data. To detach the CRF from EDC CRF, go to the CRF list ACTIONS -> DETACH CRF","title":"Import CRF from EDC"},{"location":"flask_and_edc.html#export-crf-to-edc","text":"You can export CRF to EDC by clicking on the ACTIONS -> EXPORT option Example If the study uses Flask PRO and EDC DB, you can export the study PRO CRFs to EDC. When the subject inserts data in ePRO, the data is inserted into EDC as well.","title":"Export CRF to EDC"},{"location":"flask_and_edc.html#import-event-from-edc","text":"You can import event from EDC, including all it's CRFs. In the Event Definition tab, click on the blue IMPORT EVENT DEFITION FROM EDC button. Event lists appear and you can import each event from there, edit the imported event, and it's CRFs.","title":"Import Event from EDC"},{"location":"flask_and_edc.html#export-event-to-edc","text":"You can export Event to EDC by click on the ACTIONS -> EXPORT option The export window Difference between Flask Event Definition and EDC Event Definition preview shows the event's different definitions between Forms and EDC. You can export or cancel the export process.","title":"Export Event to EDC"},{"location":"flask_and_edc.html#export-study","text":"By click on the Export study Hamburger option, you can export all the Events and CRFs of the study to EDC DB.","title":"Export study"},{"location":"manage_data.html","text":"Manage Data Learning Objectives Understand the data entry controls Enter, save, edit data Mark CRF complete View Audit history Add subject Site CRC and PI roles can add subjects. Study role- Administrator cannot add new subjects For additional information how to add subject . Scheduling events Events can be scheduled before a data entry. Scheduling an event simply means entering the (planned) start date of that event for that subject. You can schedule a number of events at once, or just schedule them when you wish to start data entry for the eCRFs. Create event by CRF In the subject page, after selecting a subject, there is a green CREATE EVENT button This button open the Create event group card with event lists. Check the relevant event. The event will be added to the subject's events list. Enter Data Site role user can enter data in each CRF in the event. With the CRF opened, the user can enter the data. At the end of the CRF, there are the following options: Mark as close - If you mark CRF as 'Closed', you will be not able to change the data next time (unless the customer admin user reopen the CRF). Save and back - Saves this CRF and goes back to the previous CRF in this event. Save and next - Saves this CRF and goes to the next CRF in this event. After site role users (i.e. CRC) enters data, the last edited and status values are updated. Edit Data After user entered data he/she can edit data, as long as the CRF is not closed. The Enter data button shifts to Edit Data button. Add CRF/ Delete Event In the end on the event's CRFs list there are 2 buttons: ADD CRF to add CRF in this event. DELETE EVENT to delete this event. Info If subject has PRO all first period PRO events are generated when the subject created. Short video example of adding subject and inserting data","title":"Manage Data"},{"location":"manage_data.html#manage-data","text":"","title":"Manage Data"},{"location":"manage_data.html#learning-objectives","text":"Understand the data entry controls Enter, save, edit data Mark CRF complete View Audit history","title":"Learning Objectives"},{"location":"manage_data.html#add-subject","text":"Site CRC and PI roles can add subjects. Study role- Administrator cannot add new subjects For additional information how to add subject .","title":"Add subject"},{"location":"manage_data.html#scheduling-events","text":"Events can be scheduled before a data entry. Scheduling an event simply means entering the (planned) start date of that event for that subject. You can schedule a number of events at once, or just schedule them when you wish to start data entry for the eCRFs.","title":"Scheduling events"},{"location":"manage_data.html#create-event-by-crf","text":"In the subject page, after selecting a subject, there is a green CREATE EVENT button This button open the Create event group card with event lists. Check the relevant event. The event will be added to the subject's events list.","title":"Create event by CRF"},{"location":"manage_data.html#enter-data","text":"Site role user can enter data in each CRF in the event. With the CRF opened, the user can enter the data. At the end of the CRF, there are the following options: Mark as close - If you mark CRF as 'Closed', you will be not able to change the data next time (unless the customer admin user reopen the CRF). Save and back - Saves this CRF and goes back to the previous CRF in this event. Save and next - Saves this CRF and goes to the next CRF in this event. After site role users (i.e. CRC) enters data, the last edited and status values are updated.","title":"Enter Data"},{"location":"manage_data.html#edit-data","text":"After user entered data he/she can edit data, as long as the CRF is not closed. The Enter data button shifts to Edit Data button.","title":"Edit Data"},{"location":"manage_data.html#add-crf-delete-event","text":"In the end on the event's CRFs list there are 2 buttons: ADD CRF to add CRF in this event. DELETE EVENT to delete this event. Info If subject has PRO all first period PRO events are generated when the subject created.","title":"Add CRF/ Delete Event"},{"location":"manage_data.html#short-video-example-of-adding-subject-and-inserting-data","text":"","title":"Short video example of adding subject and inserting data"},{"location":"manage_features.html","text":"Features In order to manage customer features, click on Features in the left bar. There are a few available features. Forms To add/remove Forms from the left bar - add/delete it from your customer features. If this feature is turned on, the Form designer field will be added to user edit If you mark the Form designer option, this user can enter to Flask Forms and modify CRFs, Events, etc. By default only Customer admin users can enter to Flask Forms. Create user in EDC This feature related to study with EDC DB. It creates user in EDC when you create user in Flask. Enrollment target popup notification Each study has an Enrollment Target value. The popup feature displays a warning message when user add subject that exceeds the enrollment target number. Monthly billing report for Customer Administrator This feature sends billing report each month (at the end of the month) to customer admin user via their email. Monthly billing report for PI This feature sends billing report in each month (at the end of the month) to the PI user via their email. One click add subject Add subject with one click on the ADD SUBJECT button This feature creates a subject without a real email or phone number. If study has PRO then this feature is not supported. If CRC user is assigned to 2 sites or more, then this feature is not supported (the user should check the relevant site). This feature relates to the Subject Label Calculation feature. Subject Label Calculation This feature adds subjects with an automatic label number. Subject Prefix * Prefix Subject label can be defined to start with study unique protocol id or site unique identifier * Prefix mask is the number of numbers after the Prefix Example Prefix = Site unique identifier, Prefix mask = NNN, subjects label seems like site01-001, site1-002 etc. Important If you have an existing study, go to study edit to define the subject prefix calculation node. Info You can change the subject numerator to specific site / study . If you define your study subject prefix to \"site unique identifier\", You can go to site edit or site add and change the Starting subject ID to the desired number. The next patient label will be with this number (SHEBA-024). Subject Personal Information This feature adds more fields to the add subject function. First name Last name ID Number/Passport Subject signed the ICF IDP configuration This feature allows you to add a GOOGLE Account to user, for customers that do not have their own IDPs like SAML or OpenId. In add user and edit user you can define additional GOOGLE accounts to the user. This feature allows the user to login to Flask with multiple GOOGLE accounts. If you want to enable this feature to subjects too then you should define it in your study","title":"Features"},{"location":"manage_features.html#features","text":"In order to manage customer features, click on Features in the left bar. There are a few available features.","title":"Features"},{"location":"manage_features.html#forms","text":"To add/remove Forms from the left bar - add/delete it from your customer features. If this feature is turned on, the Form designer field will be added to user edit If you mark the Form designer option, this user can enter to Flask Forms and modify CRFs, Events, etc. By default only Customer admin users can enter to Flask Forms.","title":"Forms"},{"location":"manage_features.html#create-user-in-edc","text":"This feature related to study with EDC DB. It creates user in EDC when you create user in Flask.","title":"Create user in EDC"},{"location":"manage_features.html#enrollment-target-popup-notification","text":"Each study has an Enrollment Target value. The popup feature displays a warning message when user add subject that exceeds the enrollment target number.","title":"Enrollment target popup notification"},{"location":"manage_features.html#monthly-billing-report-for-customer-administrator","text":"This feature sends billing report each month (at the end of the month) to customer admin user via their email.","title":"Monthly billing report for Customer Administrator"},{"location":"manage_features.html#monthly-billing-report-for-pi","text":"This feature sends billing report in each month (at the end of the month) to the PI user via their email.","title":"Monthly billing report for PI"},{"location":"manage_features.html#one-click-add-subject","text":"Add subject with one click on the ADD SUBJECT button This feature creates a subject without a real email or phone number. If study has PRO then this feature is not supported. If CRC user is assigned to 2 sites or more, then this feature is not supported (the user should check the relevant site). This feature relates to the Subject Label Calculation feature.","title":"One click add subject"},{"location":"manage_features.html#subject-label-calculation","text":"This feature adds subjects with an automatic label number. Subject Prefix * Prefix Subject label can be defined to start with study unique protocol id or site unique identifier * Prefix mask is the number of numbers after the Prefix Example Prefix = Site unique identifier, Prefix mask = NNN, subjects label seems like site01-001, site1-002 etc. Important If you have an existing study, go to study edit to define the subject prefix calculation node. Info You can change the subject numerator to specific site / study . If you define your study subject prefix to \"site unique identifier\", You can go to site edit or site add and change the Starting subject ID to the desired number. The next patient label will be with this number (SHEBA-024).","title":"Subject Label Calculation"},{"location":"manage_features.html#subject-personal-information","text":"This feature adds more fields to the add subject function. First name Last name ID Number/Passport Subject signed the ICF","title":"Subject Personal Information"},{"location":"manage_features.html#idp-configuration","text":"This feature allows you to add a GOOGLE Account to user, for customers that do not have their own IDPs like SAML or OpenId. In add user and edit user you can define additional GOOGLE accounts to the user. This feature allows the user to login to Flask with multiple GOOGLE accounts. If you want to enable this feature to subjects too then you should define it in your study","title":"IDP configuration"},{"location":"manage_forms.html","text":"Manage Forms In the left menu bar, click on FORMS . What is Flask Forms? Flask Forms is an online eSource app. Forms features unlimited subjects, forms, and data. You can create the eCRFs yourself using a super friendly interface. Includes a library of ready-to-go eCRF templates. Runs on desktops, notebooks, tablets, and phones. Build your eSource app On the Forms page, you can define the study's CRFs, Events, Pro, and Alert rules. CRFS In order to create a new CRF click on the ADD CRF green button CRF Properties In CRF card you need to define the CRF properties (You can also edit it after saving). * Queries status - Turn on/off CRF queries option (See manage queries ). When CRF queries are turned on - each item in the CRF has query dialog - add queries by click on the question mark. Layout - There are several layouts of CRFs: Default (question after question vertically) Grid Cards on grid Columns - If the layout is grid or Cards, on grid choose the number of fields in each row. Name - CRF name Description - CRF Description Click YES to create this CRF Layout examples: Default layout Grid layout Cards on grid layout CRF Sections In Section card define CRF's section, you can also edit it after saving. Note One CRF can include more than one section Name Description You can add sections to CRF by click on the ADD SECTION button CRF Items You can define items in each CRF. By click on component, the component is added to the CRF (at the end of the list) After adding an item, you should define the new item properties by click on the EDIT option. Edit CRF Item By click on the EDIT button of item, an Edit card is opened. Labels In the first tab LABELS , you should define the item's name, description, etc. Value The second tab is VALUE , you can set a default value to this item. Variable Assignment The third tab VARIABLE ASSIGNMENT , is used to place data in an item. The data source can be another item in the CRF or from an external API. To extract data from an external API, use the get() function. The Key entry functions as a data source configuration key to an external API, allowing secured access to certain data. The customer can define a default external API in Customer Metadata , allowing the user to write get() without specifying a URL. To select specific data field, use commands similar to 'get()[rates]'. For input values, the data type should be a single value. For get() the data type should be be a JSON object. For example: {\"aaa\":1; \"bbb\":2} will output a list of aaa, bbb(values:1,2) To use the autocomplete feature, type '$' and select the variable of interest. Use variables to create expressions for calculating the value of an item based on other existing values. Use the get() function to extract the value of the item from an external source. Note The terminal supports any JavaScript expressions for the value of the available form variables. Validations The fourth tab is Validation , each component has another validation options. For example - number component has the following validation tab: Required, Disabled, and Confirm parameters exist in each component. Required - Check it if this item is a mandatory. Disabled - Check it if this item is disabled - the user cannot change/edit it Confirm - This item popup a confirm dialog card. Branching Logic The fifth tab is the Branching Logic . In this tab you can write simple logic for the item. Quote Branching logic expression for this item: To use the autocomplete service, type \"$\" and select the variable of interest for you. Use variables to make expression for hide current form control. The terminal supports any JavaScript expressions for the value of the available form variables. For example: $ITEM_IMPORTANT_VAR == 'string_var_value' For example - Show/Hide method Item that depends on another item. A radio button item has 2 options - Male or Female (required question) If user check female -> Another item 'Number of children' is opened. To do this, you need to create the basic item (male/female) first, Then save it by click on the SAVE button at the top of the page. Using the save option, the system generates variables to the CRF items, which you can use for branching logic. After you saved items in the CRF, you can add branching logic to the 'Number of children' item, Go to Hide/Show item branching logic and write your logic. Note In branching logic that related to checkbox item, the branching logic should be like $CHECKBOX_ITEM_NAME == true CRF Actions There are a few available actions for each CRF. In CRFS tab there is a blue ACTIONS button with the following options: PREVIEW - By a click on the PREVIEW option, a new window is opened with this CRF layout Edit CRF - Edit CRF Properties Edit ITEMS - Edit CRF Items DUPLICATE CRF - By click on this option a new duplicate CRF is created (with the same properties, sections, and items) Notice: The CRF OID and items' variable are different. DELETE - Deletes this CRF Export CSV There is a green EXPORT CSV button. By click on this button, you download a zip folder with all of the CRF data. There is one CSV file created for each CRF. Event Definitions In order to manage study events, click on the EVENT DEFINITIONS tab. Create an event by clicking on the green ADD EVENT DEFINITION button. There are a few properties of event: Name - the display name of this event Attached CRF list - CRFs in this event. Click the green ADD CRF button to add a CRF in this event Click on the one more time option in this event's CRF to add additional this CRF in this event The Render 'Finish' on last form only button will appear on the last CRF of this event (instead of appear in each CRF - by default) Attached Rules list, you can create rules and add them to this event. Event rules generate an error when the CRC saves the event with an error. When users try to save the last CRF inside of the event, this rule will be checked, and user will get an error if this expression returns false. Click on the blue SAVE button to save your changes, OR the BACK TO LIST / CLEAR CHANGES buttons to undo your changes. Event Definition Actions There are a few available actions for each Event. Edit event definition - to edit this event (add CRF, delete CRF, etc.) Delete - Delete this event. Study Schedules This tab is related to study PRO. If your study has PRO for patients To define PRO(s) for a study, you need to create a study schedule. There are a few definitions of a study schedule: Name - Name of this Study Schedule Periods - Study periods, Add periods by click on the blue ADD PERIOD button Period Length - Period length (in days) Name - the name of this period Description - description of this period Allow expanding this period - continue this period until another period begin to the subject, OR until study has been completed (study completion date value). For randomized subjects - Begin this period for randomized subject (CRC should define it to each subject) Event Definitions - Define the event to this period PRO Click on Event Definitions, the Event Definitions list will be opened, and choose one event. Click on the green ADD EVENT DEFINITIONS button !!! note You are able add multiple events. The selected event will be added to the list with scheduled times and scheduled days. Scheduled time You can choose the available time of this event to PRO of subject. Scheduled days You can choose the days of this PRO event. By default, scheduled time is 10:00 and scheduled days are all the days of week. Save your study schedule by click on the SAVE button. Metrics Definitions See Metrics Definitions Languages You can switch between languages by click on the languages tab and selecting the desired language. Studies Using the last option in the top bar, you can switch between your studies and manage forms to each one of them (in the case that you have several studies). Hamburger The last item in the top bar is the \"Hamburger\" By hovering with the mouse on the hamburger a list of options opens. Signed in as - The login user (It's you ) Database Audit Log - Open the data audit log (create/update/delete CRF/Events/Data etc.) Restore Study CRFs - Put backup of study CRFs and restore it here, in the current study. Restore study CRFs restores json file. Create a dump of study CRFs Create a backup of this study's CRFs. NOTE - You can create a dump includes/excludes events definitions, and you can dump a few CRFs you choose. This option downloads CRFsDump.zip folder includes json file. Extract the file to restore it. Logout - Logout from FlaskData Return to FlaskData App To return to flask application click on FlaskData logo","title":"Manage Forms"},{"location":"manage_forms.html#manage-forms","text":"In the left menu bar, click on FORMS .","title":"Manage Forms"},{"location":"manage_forms.html#what-is-flask-forms","text":"Flask Forms is an online eSource app. Forms features unlimited subjects, forms, and data. You can create the eCRFs yourself using a super friendly interface. Includes a library of ready-to-go eCRF templates. Runs on desktops, notebooks, tablets, and phones.","title":"What is Flask Forms?"},{"location":"manage_forms.html#build-your-esource-app","text":"On the Forms page, you can define the study's CRFs, Events, Pro, and Alert rules.","title":"Build your eSource app"},{"location":"manage_forms.html#crfs","text":"In order to create a new CRF click on the ADD CRF green button","title":"CRFS"},{"location":"manage_forms.html#crf-properties","text":"In CRF card you need to define the CRF properties (You can also edit it after saving). * Queries status - Turn on/off CRF queries option (See manage queries ). When CRF queries are turned on - each item in the CRF has query dialog - add queries by click on the question mark. Layout - There are several layouts of CRFs: Default (question after question vertically) Grid Cards on grid Columns - If the layout is grid or Cards, on grid choose the number of fields in each row. Name - CRF name Description - CRF Description Click YES to create this CRF","title":"CRF Properties"},{"location":"manage_forms.html#layout-examples","text":"Default layout Grid layout Cards on grid layout","title":"Layout examples:"},{"location":"manage_forms.html#crf-sections","text":"In Section card define CRF's section, you can also edit it after saving. Note One CRF can include more than one section Name Description You can add sections to CRF by click on the ADD SECTION button","title":"CRF Sections"},{"location":"manage_forms.html#crf-items","text":"You can define items in each CRF. By click on component, the component is added to the CRF (at the end of the list) After adding an item, you should define the new item properties by click on the EDIT option.","title":"CRF Items"},{"location":"manage_forms.html#edit-crf-item","text":"By click on the EDIT button of item, an Edit card is opened.","title":"Edit CRF Item"},{"location":"manage_forms.html#labels","text":"In the first tab LABELS , you should define the item's name, description, etc.","title":"Labels"},{"location":"manage_forms.html#value","text":"The second tab is VALUE , you can set a default value to this item.","title":"Value"},{"location":"manage_forms.html#variable-assignment","text":"The third tab VARIABLE ASSIGNMENT , is used to place data in an item. The data source can be another item in the CRF or from an external API. To extract data from an external API, use the get() function. The Key entry functions as a data source configuration key to an external API, allowing secured access to certain data. The customer can define a default external API in Customer Metadata , allowing the user to write get() without specifying a URL. To select specific data field, use commands similar to 'get()[rates]'. For input values, the data type should be a single value. For get() the data type should be be a JSON object. For example: {\"aaa\":1; \"bbb\":2} will output a list of aaa, bbb(values:1,2) To use the autocomplete feature, type '$' and select the variable of interest. Use variables to create expressions for calculating the value of an item based on other existing values. Use the get() function to extract the value of the item from an external source. Note The terminal supports any JavaScript expressions for the value of the available form variables.","title":"Variable Assignment"},{"location":"manage_forms.html#validations","text":"The fourth tab is Validation , each component has another validation options. For example - number component has the following validation tab: Required, Disabled, and Confirm parameters exist in each component. Required - Check it if this item is a mandatory. Disabled - Check it if this item is disabled - the user cannot change/edit it Confirm - This item popup a confirm dialog card.","title":"Validations"},{"location":"manage_forms.html#branching-logic","text":"The fifth tab is the Branching Logic . In this tab you can write simple logic for the item. Quote Branching logic expression for this item: To use the autocomplete service, type \"$\" and select the variable of interest for you. Use variables to make expression for hide current form control. The terminal supports any JavaScript expressions for the value of the available form variables. For example: $ITEM_IMPORTANT_VAR == 'string_var_value' For example - Show/Hide method Item that depends on another item. A radio button item has 2 options - Male or Female (required question) If user check female -> Another item 'Number of children' is opened. To do this, you need to create the basic item (male/female) first, Then save it by click on the SAVE button at the top of the page. Using the save option, the system generates variables to the CRF items, which you can use for branching logic. After you saved items in the CRF, you can add branching logic to the 'Number of children' item, Go to Hide/Show item branching logic and write your logic. Note In branching logic that related to checkbox item, the branching logic should be like $CHECKBOX_ITEM_NAME == true","title":"Branching Logic"},{"location":"manage_forms.html#crf-actions","text":"There are a few available actions for each CRF. In CRFS tab there is a blue ACTIONS button with the following options: PREVIEW - By a click on the PREVIEW option, a new window is opened with this CRF layout Edit CRF - Edit CRF Properties Edit ITEMS - Edit CRF Items DUPLICATE CRF - By click on this option a new duplicate CRF is created (with the same properties, sections, and items) Notice: The CRF OID and items' variable are different. DELETE - Deletes this CRF","title":"CRF Actions"},{"location":"manage_forms.html#export-csv","text":"There is a green EXPORT CSV button. By click on this button, you download a zip folder with all of the CRF data. There is one CSV file created for each CRF.","title":"Export CSV"},{"location":"manage_forms.html#event-definitions","text":"In order to manage study events, click on the EVENT DEFINITIONS tab. Create an event by clicking on the green ADD EVENT DEFINITION button. There are a few properties of event: Name - the display name of this event Attached CRF list - CRFs in this event. Click the green ADD CRF button to add a CRF in this event Click on the one more time option in this event's CRF to add additional this CRF in this event The Render 'Finish' on last form only button will appear on the last CRF of this event (instead of appear in each CRF - by default) Attached Rules list, you can create rules and add them to this event. Event rules generate an error when the CRC saves the event with an error. When users try to save the last CRF inside of the event, this rule will be checked, and user will get an error if this expression returns false. Click on the blue SAVE button to save your changes, OR the BACK TO LIST / CLEAR CHANGES buttons to undo your changes.","title":"Event Definitions"},{"location":"manage_forms.html#event-definition-actions","text":"There are a few available actions for each Event. Edit event definition - to edit this event (add CRF, delete CRF, etc.) Delete - Delete this event.","title":"Event Definition Actions"},{"location":"manage_forms.html#study-schedules","text":"This tab is related to study PRO. If your study has PRO for patients To define PRO(s) for a study, you need to create a study schedule. There are a few definitions of a study schedule: Name - Name of this Study Schedule Periods - Study periods, Add periods by click on the blue ADD PERIOD button Period Length - Period length (in days) Name - the name of this period Description - description of this period Allow expanding this period - continue this period until another period begin to the subject, OR until study has been completed (study completion date value). For randomized subjects - Begin this period for randomized subject (CRC should define it to each subject) Event Definitions - Define the event to this period PRO Click on Event Definitions, the Event Definitions list will be opened, and choose one event. Click on the green ADD EVENT DEFINITIONS button !!! note You are able add multiple events. The selected event will be added to the list with scheduled times and scheduled days. Scheduled time You can choose the available time of this event to PRO of subject. Scheduled days You can choose the days of this PRO event. By default, scheduled time is 10:00 and scheduled days are all the days of week. Save your study schedule by click on the SAVE button.","title":"Study Schedules"},{"location":"manage_forms.html#metrics-definitions","text":"See Metrics Definitions","title":"Metrics Definitions"},{"location":"manage_forms.html#languages","text":"You can switch between languages by click on the languages tab and selecting the desired language.","title":"Languages"},{"location":"manage_forms.html#studies","text":"Using the last option in the top bar, you can switch between your studies and manage forms to each one of them (in the case that you have several studies).","title":"Studies"},{"location":"manage_forms.html#hamburger","text":"The last item in the top bar is the \"Hamburger\" By hovering with the mouse on the hamburger a list of options opens. Signed in as - The login user (It's you ) Database Audit Log - Open the data audit log (create/update/delete CRF/Events/Data etc.) Restore Study CRFs - Put backup of study CRFs and restore it here, in the current study. Restore study CRFs restores json file. Create a dump of study CRFs Create a backup of this study's CRFs. NOTE - You can create a dump includes/excludes events definitions, and you can dump a few CRFs you choose. This option downloads CRFsDump.zip folder includes json file. Extract the file to restore it. Logout - Logout from FlaskData Return to FlaskData App To return to flask application click on FlaskData logo","title":"Hamburger"},{"location":"manage_metrics.html","text":"Metrics Definitions Flask enables you to create patient-level metrics to measure study performance and progress. Metrics can be computed using a pattern language referencing data variables in your study. The Metrics pattern language The pattern language was designed to enable you to create metrics of performance, exceptions, missing data, or critical values on the patient timeline. The language uses item variable names, i.e. $CHANGE_IN_SEVERITY. Simple single variable expressions You can use a simple expressions like $CHANGE_IN_SEVERITY == '0' , Count things You can count things using COUNT and FILTER count($CHANGE_IN_SEVERITY ) == '0' or filter($PATIENT_REPORTED_RESTLESSNESS) == '0' . Compound expressions You can combine expressions using logical operators like && (AND) or || (OR). Examples $ELIGIBILITY == '1' && count($TREATMENT_SESSIONS) > '0' $CHANGE_IN_SEVERITY > 2 || $PATIENT_REPORTED_RESTLESSNESS == '0' count($CONMED) <= '5' Functions Counting things count(variable, period) - the count function counts a variable entered in a time period. The count function will return the number of records in the dataset where the variable has any value. If the count is 0 then the data is missing. The count function takes 2 arguments: variable - the unique variable name of the CRF item. period - an optional time period counting data for each patient. Period is a time interval like 24 hours Info You can use the following time units: milliseconds seconds minutes hours days weeks months years Usage examples: count($ADVERSE_EVENTS) - Count adverse events for each patients. count($ADVERSE_EVENTS, '24 hours') - Count adverse events for patients in the last 24 hours. count($ADVERSE_EVENTS, '7 days') - Count for the last 7 days Say you want to find patients missing blood test data in the last 24 hours - you'd do this: count ( $BLOOD_TEST , '24 hours' ) == '0' ; The metric will have the value of 1 for all patients missing blood tests in the last 24 hours. Filter - more complex counting filter(variable, period, value, take) - the filter function enables you to filter on values looking forwards and backwards on the patient journey. Like count, filter returns the number of records entered into the database for the variable. Arguments: variable - the unique variable of the CRF item period - an optional time period for filtering patient data according to CRF create date. value - an optional filter using a comparison operator like >2 , yes , ==5 take - an optional argument to take the first N records or last N records in the dataset for each patient. Info You can use the following operators: * `==` * `!=` * `>=` * `<=` * `>` * `<` Example ==2 some string value >=5 the expression ==2 and 2 or ==yes and yes are equivalent! The value of the take parameter will be a string like '-1' , '1' , '5' The take parameter enables you to take events from the beginning or end of the patient timeline: Examples '1' - The first event '2' - The first 2 events '-1' - The last event '-4' - The last 4 events the records returned from the database are ordered by date created. Filter arguments are evaluated in this order: filtering by variable filtering by period filtering by 'take' filtering by 'value' If you don't need to use some parameter, you can set it to null instead. Usage examples filter($SCREENED) - count the $SCREENED variable for each patient. filter($EPRO_DIARY, '24 hours') - count 1 if any diaries were entered by each patient in the last 24 hours filter($TOOK_ANALGESICS, '24 hours', '>2') - count 1 for each patient who took pain analgesics more than twice in the past 24 hours filter($TOOK_ANALGESICS, null, '>2') - count 1 for each patient who took pain analgesics more than twice in the study filter($TOOK_ANALGESICS, null, '>2', '-2') - count 1 for each patient who took pain analgesics more than twice in the last 2 study events You can do a comparison operation on the filter count and return a 0/false or 1/true for the metric: filter ( $TOOK_ANALGESICS , '24 hours' , '>2' ) > '0' ; Or just do the filter count and return a number for the metric like this: filter ( $ELSE_ONE_VARIABLE , '24 hours' , '>2' ) Under the hood of the pattern language for the curious You can use a simple expressions like $AGE == '77' . In this case this expression will be replaced to filter($AGE, null, '== 77') != 0 Example Input Output $SOME_VARIABLE == '0' filter($SOME_VARIABLE, null, '== 0') != 0 $SOME_VARIABLE filter($SOME_VARIABLE, null, null) != 0 $SOME_VARIABLE == '3'&& $ELSE_ONE_VARIABLE > '2' filter($SOME_VARIABLE, null, '== 3') != 0 && filter($ELSE_ONE_VARIABLE, null, '>2') != 0 Examples of expression to the various components Component Expression INPUT $ITEM_AT2_COMPONENT_INPUT == 'test' NUMBER $ITEM_AT2_COMPONENT_NUMBER == '5' BIPOLAR NUMBER $ITEM_AT2_COMPONENT_BIPOLAR_NUMBER['0'] == '3' TEXTAREA $ITEM_AT2_COMPONENT_TEXTAREA == 'test' CHECKBOX $ITEM_AT2_COMPONENT_CHECKBOX == 'true' RADIO $ITEM_AT2_COMPONENT_RADIO == '0' BIPOLAR RADIO $ITEM_AT2_COMPONENT_RADIO == '0' MULTIPLE SELECT $ITEM_AT2_COMPONENT_MULTIPLE_SELECT == '0' SINGLE SELECT $ITEM_AT2_COMPONENT_SINGLE_SELECT == '1' PASSWORD $ITEM_AT2_COMPONENT_PASSWORD == '12345678' CHECKBO GROUP $ITEM_AT2_COMPONENT_CHECKBOX_GROUP['0'] == 'true' EMAIL $ITEM_AT2_COMPONENT_EMAIL == 'some.mail@gmail.com' PHONE NUMBER $ITEM_AT2_COMPONENT_PHONE_NUMBER == '380973768485' DATE $ITEM_AT2_COMPONENT_DATE == '2021-03-19T00:00:00.000Z' DATE TIME $ITEM_AT2_COMPONENT_DATE_TIME == '2021-03-19T13:15:00.000Z' BIPOLAR DATE $ITEM_AT2_COMPONENT_BIPOLAR_DATE['0'] == '2021-03-19T00:00:00.000Z' TIME $ITEM_AT2_COMPONENT_TIME =='2021-03-19T22:00:02.882Z' FILE $ITEM_AT2_COMPONENT_FILE == '1617024475170_rr.jpg' Add Metric In order to add a metric click on the green ADD METRIC button. There are few properties of metric: Name - The name of the new metric. Trigger time - This is an optional field, representing time of metric values generation. If this field is empty, the metric values will generate in real time. Expression - see Expression Run the study metrics In the RUN option you can run your study metrics. Click on the green RUN button to run your study metrics. A success/error message will appear. To view the result click on the blue VIEW METRICS VALUE button. Study Metric Values On the VIEW METRICS VALUE option you can view your study metric values. Tip You can filter the metric values table by any string, ordering by each column and export the table to COPY/CSV/PDF/PRINT/EXCEL.","title":"Metrics"},{"location":"manage_metrics.html#metrics-definitions","text":"Flask enables you to create patient-level metrics to measure study performance and progress. Metrics can be computed using a pattern language referencing data variables in your study.","title":"Metrics Definitions"},{"location":"manage_metrics.html#the-metrics-pattern-language","text":"The pattern language was designed to enable you to create metrics of performance, exceptions, missing data, or critical values on the patient timeline. The language uses item variable names, i.e. $CHANGE_IN_SEVERITY.","title":"The Metrics pattern language"},{"location":"manage_metrics.html#simple-single-variable-expressions","text":"You can use a simple expressions like $CHANGE_IN_SEVERITY == '0' ,","title":"Simple single variable expressions"},{"location":"manage_metrics.html#count-things","text":"You can count things using COUNT and FILTER count($CHANGE_IN_SEVERITY ) == '0' or filter($PATIENT_REPORTED_RESTLESSNESS) == '0' .","title":"Count things"},{"location":"manage_metrics.html#compound-expressions","text":"You can combine expressions using logical operators like && (AND) or || (OR). Examples $ELIGIBILITY == '1' && count($TREATMENT_SESSIONS) > '0' $CHANGE_IN_SEVERITY > 2 || $PATIENT_REPORTED_RESTLESSNESS == '0' count($CONMED) <= '5'","title":"Compound expressions"},{"location":"manage_metrics.html#functions","text":"","title":"Functions"},{"location":"manage_metrics.html#counting-things","text":"count(variable, period) - the count function counts a variable entered in a time period. The count function will return the number of records in the dataset where the variable has any value. If the count is 0 then the data is missing. The count function takes 2 arguments: variable - the unique variable name of the CRF item. period - an optional time period counting data for each patient. Period is a time interval like 24 hours Info You can use the following time units: milliseconds seconds minutes hours days weeks months years Usage examples: count($ADVERSE_EVENTS) - Count adverse events for each patients. count($ADVERSE_EVENTS, '24 hours') - Count adverse events for patients in the last 24 hours. count($ADVERSE_EVENTS, '7 days') - Count for the last 7 days Say you want to find patients missing blood test data in the last 24 hours - you'd do this: count ( $BLOOD_TEST , '24 hours' ) == '0' ; The metric will have the value of 1 for all patients missing blood tests in the last 24 hours.","title":"Counting things"},{"location":"manage_metrics.html#filter-more-complex-counting","text":"filter(variable, period, value, take) - the filter function enables you to filter on values looking forwards and backwards on the patient journey. Like count, filter returns the number of records entered into the database for the variable. Arguments: variable - the unique variable of the CRF item period - an optional time period for filtering patient data according to CRF create date. value - an optional filter using a comparison operator like >2 , yes , ==5 take - an optional argument to take the first N records or last N records in the dataset for each patient. Info You can use the following operators: * `==` * `!=` * `>=` * `<=` * `>` * `<` Example ==2 some string value >=5 the expression ==2 and 2 or ==yes and yes are equivalent! The value of the take parameter will be a string like '-1' , '1' , '5' The take parameter enables you to take events from the beginning or end of the patient timeline: Examples '1' - The first event '2' - The first 2 events '-1' - The last event '-4' - The last 4 events the records returned from the database are ordered by date created. Filter arguments are evaluated in this order: filtering by variable filtering by period filtering by 'take' filtering by 'value' If you don't need to use some parameter, you can set it to null instead. Usage examples filter($SCREENED) - count the $SCREENED variable for each patient. filter($EPRO_DIARY, '24 hours') - count 1 if any diaries were entered by each patient in the last 24 hours filter($TOOK_ANALGESICS, '24 hours', '>2') - count 1 for each patient who took pain analgesics more than twice in the past 24 hours filter($TOOK_ANALGESICS, null, '>2') - count 1 for each patient who took pain analgesics more than twice in the study filter($TOOK_ANALGESICS, null, '>2', '-2') - count 1 for each patient who took pain analgesics more than twice in the last 2 study events You can do a comparison operation on the filter count and return a 0/false or 1/true for the metric: filter ( $TOOK_ANALGESICS , '24 hours' , '>2' ) > '0' ; Or just do the filter count and return a number for the metric like this: filter ( $ELSE_ONE_VARIABLE , '24 hours' , '>2' )","title":"Filter - more complex counting"},{"location":"manage_metrics.html#under-the-hood-of-the-pattern-language-for-the-curious","text":"You can use a simple expressions like $AGE == '77' . In this case this expression will be replaced to filter($AGE, null, '== 77') != 0 Example Input Output $SOME_VARIABLE == '0' filter($SOME_VARIABLE, null, '== 0') != 0 $SOME_VARIABLE filter($SOME_VARIABLE, null, null) != 0 $SOME_VARIABLE == '3'&& $ELSE_ONE_VARIABLE > '2' filter($SOME_VARIABLE, null, '== 3') != 0 && filter($ELSE_ONE_VARIABLE, null, '>2') != 0","title":"Under the hood of the pattern language for the curious"},{"location":"manage_metrics.html#examples-of-expression-to-the-various-components","text":"Component Expression INPUT $ITEM_AT2_COMPONENT_INPUT == 'test' NUMBER $ITEM_AT2_COMPONENT_NUMBER == '5' BIPOLAR NUMBER $ITEM_AT2_COMPONENT_BIPOLAR_NUMBER['0'] == '3' TEXTAREA $ITEM_AT2_COMPONENT_TEXTAREA == 'test' CHECKBOX $ITEM_AT2_COMPONENT_CHECKBOX == 'true' RADIO $ITEM_AT2_COMPONENT_RADIO == '0' BIPOLAR RADIO $ITEM_AT2_COMPONENT_RADIO == '0' MULTIPLE SELECT $ITEM_AT2_COMPONENT_MULTIPLE_SELECT == '0' SINGLE SELECT $ITEM_AT2_COMPONENT_SINGLE_SELECT == '1' PASSWORD $ITEM_AT2_COMPONENT_PASSWORD == '12345678' CHECKBO GROUP $ITEM_AT2_COMPONENT_CHECKBOX_GROUP['0'] == 'true' EMAIL $ITEM_AT2_COMPONENT_EMAIL == 'some.mail@gmail.com' PHONE NUMBER $ITEM_AT2_COMPONENT_PHONE_NUMBER == '380973768485' DATE $ITEM_AT2_COMPONENT_DATE == '2021-03-19T00:00:00.000Z' DATE TIME $ITEM_AT2_COMPONENT_DATE_TIME == '2021-03-19T13:15:00.000Z' BIPOLAR DATE $ITEM_AT2_COMPONENT_BIPOLAR_DATE['0'] == '2021-03-19T00:00:00.000Z' TIME $ITEM_AT2_COMPONENT_TIME =='2021-03-19T22:00:02.882Z' FILE $ITEM_AT2_COMPONENT_FILE == '1617024475170_rr.jpg'","title":"Examples of expression to the various components"},{"location":"manage_metrics.html#add-metric","text":"In order to add a metric click on the green ADD METRIC button. There are few properties of metric: Name - The name of the new metric. Trigger time - This is an optional field, representing time of metric values generation. If this field is empty, the metric values will generate in real time. Expression - see Expression","title":"Add Metric"},{"location":"manage_metrics.html#run-the-study-metrics","text":"In the RUN option you can run your study metrics. Click on the green RUN button to run your study metrics. A success/error message will appear. To view the result click on the blue VIEW METRICS VALUE button.","title":"Run the study metrics"},{"location":"manage_metrics.html#study-metric-values","text":"On the VIEW METRICS VALUE option you can view your study metric values. Tip You can filter the metric values table by any string, ordering by each column and export the table to COPY/CSV/PDF/PRINT/EXCEL.","title":"Study Metric Values"},{"location":"manage_queries.html","text":"Manage Queries On the left menu bar, click on Queries. On this page - Queries index, you can see all queries data of this study. You can filter Queries by sites, subject, or status then click APPLY You can click on each query row to see query properties, add your comment, close the query, or delete it. Query Details Query Details page includes Summary/Messages cards and Edit/Delete buttons. Query Edit By click on the blue EDIT button a discussion card opens. You can close the query or add your message. You can click on each query row to see query properties, add your comment, close the query, or delete it.","title":"Queries"},{"location":"manage_queries.html#manage-queries","text":"On the left menu bar, click on Queries. On this page - Queries index, you can see all queries data of this study. You can filter Queries by sites, subject, or status then click APPLY You can click on each query row to see query properties, add your comment, close the query, or delete it.","title":"Manage Queries"},{"location":"manage_queries.html#query-details","text":"Query Details page includes Summary/Messages cards and Edit/Delete buttons.","title":"Query Details"},{"location":"manage_queries.html#query-edit","text":"By click on the blue EDIT button a discussion card opens. You can close the query or add your message. You can click on each query row to see query properties, add your comment, close the query, or delete it.","title":"Query Edit"},{"location":"manage_sites.html","text":"Manage Sites In order to manage research sites, click on Sites in the left bar. Default site By default, you have one site assigned to your study, called Default-Site-XXX Edit the default site by ACTIONS -> EDIT Edit Site In the Edit option you can edit your site properties. Click the SAVE green button to save your site properties. Site Profile In Site Profile you can see your site's definition, add comments, and manage this site's Users by click ACTIONS -> Manage Users Mange Users In Site Manage Users you can remove/add existing User to this site (if you don't have the User, go to create it ) You can add a User by typing any part of his name - the application will show you a list of matching User names. Click on the green invite button Now you have a site with Users (i.e. CRC, PI) in your study. Add a new site In the Sites index page you can add new sites to your study. To add a site click on the ADD SITE button Enter the site properties and save it by click on SAVE green button.","title":"Manage Sites"},{"location":"manage_sites.html#manage-sites","text":"In order to manage research sites, click on Sites in the left bar.","title":"Manage Sites"},{"location":"manage_sites.html#default-site","text":"By default, you have one site assigned to your study, called Default-Site-XXX Edit the default site by ACTIONS -> EDIT","title":"Default site"},{"location":"manage_sites.html#edit-site","text":"In the Edit option you can edit your site properties. Click the SAVE green button to save your site properties.","title":"Edit Site"},{"location":"manage_sites.html#site-profile","text":"In Site Profile you can see your site's definition, add comments, and manage this site's Users by click ACTIONS -> Manage Users","title":"Site Profile"},{"location":"manage_sites.html#mange-users","text":"In Site Manage Users you can remove/add existing User to this site (if you don't have the User, go to create it ) You can add a User by typing any part of his name - the application will show you a list of matching User names. Click on the green invite button Now you have a site with Users (i.e. CRC, PI) in your study.","title":"Mange Users"},{"location":"manage_sites.html#add-a-new-site","text":"In the Sites index page you can add new sites to your study. To add a site click on the ADD SITE button Enter the site properties and save it by click on SAVE green button.","title":"Add a new site"},{"location":"manage_studies.html","text":"Studies You can manage all of your studies on Flask. You can add and edit your Study properties, assign Users, assign Sites, and more. Add study To add a new Study, go to the studies index page by clicking on Studies in the left side-bar. Click on the green ADD STUDY button. Fill in your study properties and click SAVE . The Manage Users page will open. Study values Database and EDC URL fields are related to EDC db, if you have EDC (clinCapture) db you should fill them in. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages; Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL, otherwise choose MongoDB). Study manage Users Study Role users get assignmed studies from the customer admin and can only access studies, queries, and subjects. Study Role users can add comments and subscribe to alerts. If given permission, they can also be form designers. In the manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , and welcome emails will be sent to Users' emails. The Manage Sites page will be opened. Study manage sites In manage sites page you can add/remove site from this study. To add a new site to your study, click on Create Site first. Type any part of the site name in the Select sites box and pick the site you want to add to your study. Click NEXT STEP Study Edit In the Studies index page you can edit your study. To edit your study - check it, click on the green ACTIONS button, and choose the Edit option. In the Edit Study page you can define your study profile, definitions, etc. Note Study subject prefix : Prefix for automatically creating a subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the Study Profile will be opened. Archived studies To mark study as Archived you need to change its status to Close . Danger Archived studies cannot be modified!! Studies with a Closed status, you have the ability to view their data, but cannot change data, add subject, etc. They are inactive studies. If you mark study status as closed, the study will be marked as Archived , and you cannot see it in the studies list. But don't worry, go to the studies index page and filter studies with Archived only . Now you can view the study, but cannot change it. Study Profile In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, Sites and comments. There is a Comments card that you can write all free text comments about your study. There is an ACTIONS green button with Manage Users, Manage Sites options and Manage research roles. Access Control Lists ACL utilities: Users can create study roles Users can assign each event definitions to a study role Users can assign each user to a study role Manage research roles are available to customer admin and form designer users Study Metadata In study profile there is a Study Metadata card. In this table customer admin user can add/edit/delete free text meta-data strings describing your study. For example, you can use Study MetaData to store the URL of a mobile app. Extract study_metadata by API You can get this table data from the generic API . Body request should be something like: { \"tableName\" : \"study_metadata\" , \"fromDate\" : \"2018-03-29T11:44:12.511Z\" , \"toDate\" : \"2020-12-29T11:44:12.511Z\" }","title":"Manage Studies"},{"location":"manage_studies.html#studies","text":"You can manage all of your studies on Flask. You can add and edit your Study properties, assign Users, assign Sites, and more.","title":"Studies"},{"location":"manage_studies.html#add-study","text":"To add a new Study, go to the studies index page by clicking on Studies in the left side-bar. Click on the green ADD STUDY button. Fill in your study properties and click SAVE . The Manage Users page will open. Study values Database and EDC URL fields are related to EDC db, if you have EDC (clinCapture) db you should fill them in. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages; Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL, otherwise choose MongoDB).","title":"Add study"},{"location":"manage_studies.html#study-manage-users","text":"Study Role users get assignmed studies from the customer admin and can only access studies, queries, and subjects. Study Role users can add comments and subscribe to alerts. If given permission, they can also be form designers. In the manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , and welcome emails will be sent to Users' emails. The Manage Sites page will be opened.","title":"Study manage Users"},{"location":"manage_studies.html#study-manage-sites","text":"In manage sites page you can add/remove site from this study. To add a new site to your study, click on Create Site first. Type any part of the site name in the Select sites box and pick the site you want to add to your study. Click NEXT STEP","title":"Study manage sites"},{"location":"manage_studies.html#study-edit","text":"In the Studies index page you can edit your study. To edit your study - check it, click on the green ACTIONS button, and choose the Edit option. In the Edit Study page you can define your study profile, definitions, etc. Note Study subject prefix : Prefix for automatically creating a subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the Study Profile will be opened.","title":"Study Edit"},{"location":"manage_studies.html#archived-studies","text":"To mark study as Archived you need to change its status to Close . Danger Archived studies cannot be modified!! Studies with a Closed status, you have the ability to view their data, but cannot change data, add subject, etc. They are inactive studies. If you mark study status as closed, the study will be marked as Archived , and you cannot see it in the studies list. But don't worry, go to the studies index page and filter studies with Archived only . Now you can view the study, but cannot change it.","title":"Archived studies"},{"location":"manage_studies.html#study-profile","text":"In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, Sites and comments. There is a Comments card that you can write all free text comments about your study. There is an ACTIONS green button with Manage Users, Manage Sites options and Manage research roles.","title":"Study Profile"},{"location":"manage_studies.html#access-control-lists","text":"ACL utilities: Users can create study roles Users can assign each event definitions to a study role Users can assign each user to a study role Manage research roles are available to customer admin and form designer users","title":"Access Control Lists"},{"location":"manage_studies.html#study-metadata","text":"In study profile there is a Study Metadata card. In this table customer admin user can add/edit/delete free text meta-data strings describing your study. For example, you can use Study MetaData to store the URL of a mobile app. Extract study_metadata by API You can get this table data from the generic API . Body request should be something like: { \"tableName\" : \"study_metadata\" , \"fromDate\" : \"2018-03-29T11:44:12.511Z\" , \"toDate\" : \"2020-12-29T11:44:12.511Z\" }","title":"Study Metadata"},{"location":"manage_subjects.html","text":"Manage Subjects In the left menu bar click on Subjects. On this page - Subjects index you can see study subjects and their CRFs data. You can filter Subjects by site, or other specifications using Search filter and clicking APPLY . You can click on each subject and go to Flask Events. Flask Events On the flask events page you see all of the subject's events, CRFs and data. Note You can only view the data (cannot edit or add CRFs). Only site role users can edit Subject's data. You can see all subject's events list. By clicking on an event, a list of this event's CRFs opens. You can view the data by click on the subject. You can now input into the CRF. This data is displayed, however entered data is not saved. The customer admin user has permissions to re-open the closed CRFs. Add Subject Site role user can add subject on their site. Click on the green ADD SUBJECT button to add a new subject If the study has ePRO, CRC should define the subject's email and phone number. On the subjects index page there is a blue Actions button with Edit and Profile options. By check a subject and Edit/Profile you open the Profile page. Subject Profile In Subject Profile page, site role user can edit subject's data by clicking on the pen. Email - The email of this subject Mobile phone - The phone number of this subject Status - The status of this subject There are Studies, Sites and comments cards of this subject. Actions On the subject profile page, there is a green ACTIONS button with the following options: Welcome back - This option appears if study has PRO. Reset password - This option sends an email with a reset password required link. Subject Events By clicking on subject on the Subjects Index page, the Flask Events page opens. In this page site role user can create events, add CRFs, enter data, deactivate CRF, etc. Send Message To navigate to the send message feature, the site role user should locate the Subject Flask-Events page. After selecting a subject, there is a blue SEND MESSAGE button. Clicking on this button open a page with option to send Email/SMS to the subject. Randomize If a study has PRO with Randomized option An additional check box will appear - RANDOMIZED In Study Schedule by period you should define the start period and choose the period for this subject. If this is used for randomized subjects, check the box. Forget Subject Super Admin can define a Customer Admin user as a \"DPO user\". This will generate a PIN that the DPO users can use to delete a subject using the forget option. To forget a subject, navigate to your study subjects using the left bar. Next check the subject you want to forget and click on the blue pull down Action button and select forget. A verification message will pop up. After you select yes, you will be prompted to enter the PIN. Lastly, you will see the success message.","title":"Manage Subjects"},{"location":"manage_subjects.html#manage-subjects","text":"In the left menu bar click on Subjects. On this page - Subjects index you can see study subjects and their CRFs data. You can filter Subjects by site, or other specifications using Search filter and clicking APPLY . You can click on each subject and go to Flask Events.","title":"Manage Subjects"},{"location":"manage_subjects.html#flask-events","text":"On the flask events page you see all of the subject's events, CRFs and data. Note You can only view the data (cannot edit or add CRFs). Only site role users can edit Subject's data. You can see all subject's events list. By clicking on an event, a list of this event's CRFs opens. You can view the data by click on the subject. You can now input into the CRF. This data is displayed, however entered data is not saved. The customer admin user has permissions to re-open the closed CRFs.","title":"Flask Events"},{"location":"manage_subjects.html#add-subject","text":"Site role user can add subject on their site. Click on the green ADD SUBJECT button to add a new subject If the study has ePRO, CRC should define the subject's email and phone number. On the subjects index page there is a blue Actions button with Edit and Profile options. By check a subject and Edit/Profile you open the Profile page.","title":"Add Subject"},{"location":"manage_subjects.html#subject-profile","text":"In Subject Profile page, site role user can edit subject's data by clicking on the pen. Email - The email of this subject Mobile phone - The phone number of this subject Status - The status of this subject There are Studies, Sites and comments cards of this subject.","title":"Subject Profile"},{"location":"manage_subjects.html#actions","text":"On the subject profile page, there is a green ACTIONS button with the following options: Welcome back - This option appears if study has PRO. Reset password - This option sends an email with a reset password required link.","title":"Actions"},{"location":"manage_subjects.html#subject-events","text":"By clicking on subject on the Subjects Index page, the Flask Events page opens. In this page site role user can create events, add CRFs, enter data, deactivate CRF, etc.","title":"Subject Events"},{"location":"manage_subjects.html#send-message","text":"To navigate to the send message feature, the site role user should locate the Subject Flask-Events page. After selecting a subject, there is a blue SEND MESSAGE button. Clicking on this button open a page with option to send Email/SMS to the subject.","title":"Send Message"},{"location":"manage_subjects.html#randomize","text":"If a study has PRO with Randomized option An additional check box will appear - RANDOMIZED In Study Schedule by period you should define the start period and choose the period for this subject. If this is used for randomized subjects, check the box.","title":"Randomize"},{"location":"manage_subjects.html#forget-subject","text":"Super Admin can define a Customer Admin user as a \"DPO user\". This will generate a PIN that the DPO users can use to delete a subject using the forget option. To forget a subject, navigate to your study subjects using the left bar. Next check the subject you want to forget and click on the blue pull down Action button and select forget. A verification message will pop up. After you select yes, you will be prompted to enter the PIN. Lastly, you will see the success message.","title":"Forget Subject"},{"location":"manage_users.html","text":"Manage Users In the left menu bar click on Users. On this page, you can add Users to your study, edit Users, assign Users to Sites, etc. You can filter Users by study, site, or by using the Search filter and clicking APPLY Default Users By default, you have 4 Users assigned to your study: 1.Customer admin User - This is your User! 2.CRC Default - CRC User 3.PI Default - PI User 4.CRA Default - CRA User Each default User has another permissions. Edit User Edit the default Users to your specific Users one by one, by clicking the ACTIONS -> EDIT option. Profile In the User profile page there is a pencil icon in the right corner of Profile card , click on it in order to edit the User properties. After you create a new User or modify their email, you can send them an email to create a password by clicking on Send create password . This step does not need to be taken - your Users can log in with their Google account. User properties In edit the User Profile action, you can change a some User parameters Role : there are 3 roles Customer Admin - User has all customer permissions - add/edit studies, users, sites, alerts, etc. Study Role - User has study permissions - to see all study data (from all of the sites) Site Role - User has site level permissions - to see his site data, add subject to his site, create events and CRFs for the subject. Form designer : define if the User has Forms permissions - add/edit/delete Events and CRFs from the system (by default only customer admin Users can do it). Subscribe to Alerts : defines if the User will get alerts from this study (according to the alert rules). Studies In the Studies card you can see the User's studies Sites In the Sites card you can see the User's sites (if the User is study role or customer admin he can see all study sites) Comments In the Comments card you can add comments about this User. Write your comments and click on the ADD COMMENT button Mange User sites In User profile page you have an option to manage User sites. Note You only have this option if the User is a Site Role User, otherwise the User has permissions to all study's sites. In manage User sites page you can add/remove sites from User privileges. User actions In User profile page you have ACTIONS green button. In these actions button you have a few actions options: Send create password - By clicking on this option you email the User with create a new password request. Login as this User - By clicking on this option you login to the system like you are this User. Modify password - By clicking on this option you can modify the User password. Add User To add a User click on the ADD USER green button in Users index page. The User will be added to the selected study that appears in the title. User properties Email should be unique for each User. Role There are 3 optional roles: 2.1. Customer Admin (2): Administrator of the customer - has all permissions of this account, create User, create site, build CRFs, etc. 2.2. Study role (3): Has all study permissions - view, extract, etc. to all study data 2.3. Site role (4): Has specific site/s permissions - add subject to his site, fill CRFs, see site's data, etc. EDC Role : more specific role from Role (number 2), it's more relevant for customers that have EDC db. EDC Role ID Flask Role ID EDC Role Name 1 2 System Administrator 2 3 Study Administrator 3 3 Study Director 6 3 Study Monitor 7 3 Study Coder 5 4 Site coordinator 4 4 Principal investigator 8 5 Subject 9 2 API role 77 2 RiskGraph role Click on the SAVE green button. The User will get a Welcome message in their email.","title":"Manage Users"},{"location":"manage_users.html#manage-users","text":"In the left menu bar click on Users. On this page, you can add Users to your study, edit Users, assign Users to Sites, etc. You can filter Users by study, site, or by using the Search filter and clicking APPLY","title":"Manage Users"},{"location":"manage_users.html#default-users","text":"By default, you have 4 Users assigned to your study: 1.Customer admin User - This is your User! 2.CRC Default - CRC User 3.PI Default - PI User 4.CRA Default - CRA User Each default User has another permissions.","title":"Default Users"},{"location":"manage_users.html#edit-user","text":"Edit the default Users to your specific Users one by one, by clicking the ACTIONS -> EDIT option.","title":"Edit User"},{"location":"manage_users.html#profile","text":"In the User profile page there is a pencil icon in the right corner of Profile card , click on it in order to edit the User properties. After you create a new User or modify their email, you can send them an email to create a password by clicking on Send create password . This step does not need to be taken - your Users can log in with their Google account. User properties In edit the User Profile action, you can change a some User parameters Role : there are 3 roles Customer Admin - User has all customer permissions - add/edit studies, users, sites, alerts, etc. Study Role - User has study permissions - to see all study data (from all of the sites) Site Role - User has site level permissions - to see his site data, add subject to his site, create events and CRFs for the subject. Form designer : define if the User has Forms permissions - add/edit/delete Events and CRFs from the system (by default only customer admin Users can do it). Subscribe to Alerts : defines if the User will get alerts from this study (according to the alert rules).","title":"Profile"},{"location":"manage_users.html#studies","text":"In the Studies card you can see the User's studies","title":"Studies"},{"location":"manage_users.html#sites","text":"In the Sites card you can see the User's sites (if the User is study role or customer admin he can see all study sites)","title":"Sites"},{"location":"manage_users.html#comments","text":"In the Comments card you can add comments about this User. Write your comments and click on the ADD COMMENT button","title":"Comments"},{"location":"manage_users.html#mange-user-sites","text":"In User profile page you have an option to manage User sites. Note You only have this option if the User is a Site Role User, otherwise the User has permissions to all study's sites. In manage User sites page you can add/remove sites from User privileges.","title":"Mange User sites"},{"location":"manage_users.html#user-actions","text":"In User profile page you have ACTIONS green button. In these actions button you have a few actions options: Send create password - By clicking on this option you email the User with create a new password request. Login as this User - By clicking on this option you login to the system like you are this User. Modify password - By clicking on this option you can modify the User password.","title":"User actions"},{"location":"manage_users.html#add-user","text":"To add a User click on the ADD USER green button in Users index page. The User will be added to the selected study that appears in the title. User properties Email should be unique for each User. Role There are 3 optional roles: 2.1. Customer Admin (2): Administrator of the customer - has all permissions of this account, create User, create site, build CRFs, etc. 2.2. Study role (3): Has all study permissions - view, extract, etc. to all study data 2.3. Site role (4): Has specific site/s permissions - add subject to his site, fill CRFs, see site's data, etc. EDC Role : more specific role from Role (number 2), it's more relevant for customers that have EDC db. EDC Role ID Flask Role ID EDC Role Name 1 2 System Administrator 2 3 Study Administrator 3 3 Study Director 6 3 Study Monitor 7 3 Study Coder 5 4 Site coordinator 4 4 Principal investigator 8 5 Subject 9 2 API role 77 2 RiskGraph role Click on the SAVE green button. The User will get a Welcome message in their email.","title":"Add User"},{"location":"metrics.html","text":"Metrics Definitions Flask enables you to create patient-level metrics to measure study performance and progress. Metrics can be computed using a pattern language referencing data variables in your study. The Metrics pattern language The pattern language was designed to enable you to create metrics of performance, exceptions, missing data, or critical values on the patient timeline. The language uses item variable names - like $CHANGE_IN_SEVERITY. Simple single variable expressions You can use a simple expressions like $CHANGE_IN_SEVERITY == '0' , Count things You can count things using COUNT and FILTER count($CHANGE_IN_SEVERITY ) == '0' or filter($PATIENT_REPORTED_RESTLESSNESS) == '0' . Compound expressions You can combine expressions using logical operators like && (AND) or || (OR). The logical operator !(NOT) can also be used. Examples $ELIGIBILITY == '1' && count($TREATMENT_SESSIONS) > '0' $CHANGE_IN_SEVERITY > 2 || $PATIENT_REPORTED_RESTLESSNESS == '0' count($CONMED) <= '5' Functions Counting things count(variable, period) - the count function counts a variable entered in a time period. The count function will return the number of records in the dataset where the variable has any value. If the count is 0 then the data is missing. The count function takes 2 arguments: variable - the unique variable name of the CRF item. period - an optional time period counting data for each patient. Period is a time interval like 24 hours !!info You can use the following time units: * milliseconds * seconds * minutes * hours * days * weeks * months * years Usage examples: count($ADVERSE_EVENTS) - Count adverse events for each patients. count($ADVERSE_EVENTS, '24 hours') - Count adverse events for patients in the last 24 hours. count($ADVERSE_EVENTS, '7 days') - Count for the last 7 days Say you want to find patients missing blood test data in the last 24 hours - you'd do this: count ( $BLOOD_TEST , '24 hours' ) == '0' ; The metric will have the value of 1 for all patients missing blood tests in the last 24 hours. Filter - more complex counting filter(variable, period, value, take) - the filter function enables you to filter on values looking forwards and backwards on the patient journey. Like count, filter returns the number of records entered into the database for the variable. Arguments: variable - the unique variable of the CRF item period - an optional time period for filtering patient data according to CRF create date. value - an optional filter using a comparison operator like >2 , yes , ==5 take - an optional argument to take the first N records or last N records in the dataset for each patient. Info You can use the following operators: == != >= <= > < Example ==2 some string value >=5 the expression ==2 and 2 or ==yes and yes are equivalent! The value of the take parameter will be a string like '-1' , '1' , '5' The take parameter enables you to take events from the beginning or end of the patient timeline: Examples '1' - The first event '2' - The first 2 events '-1' - The last event '-4' - The last 4 events the records returned from the database are ordered by date created. Filter arguments are evaluated in this order: filtering by variable filtering by period filtering by 'take' filtering by 'value' if you don't need to use some parameter you can set null instead. Usage examples filter($SCREENED) - count the $SCREENED variable for each patient. filter($EPRO_DIARY, '24 hours') - count 1 if any diaries were entered by each patient in the last 24 hours filter($TOOK_ANALGESICS, '24 hours', '>2') - count 1 for each patient who took pain analgesics more than twice in the past 24 hours filter($TOOK_ANALGESICS, null, '>2') - count 1 for each patient who took pain analgesics more than twice in the study filter($TOOK_ANALGESICS, null, '>2', '-2') - count 1 for each patient who took pain analgesics more than twice in the last 2 study events You can do a comparison operation on the filter count and return a 0/false or 1/true for the metric: filter ( $TOOK_ANALGESICS , '24 hours' , '>2' ) > '0' ; Or just do the filter count and return a number for the metric like this: filter ( $ELSE_ONE_VARIABLE , '24 hours' , '>2' ) Under the hood of the pattern language for the curious You can use a simple expressions like $AGE == '77' . In this case this expression will be replaced to filter($AGE, null, '== 77') != 0 Example Input Output $SOME_VARIABLE == '0' filter($SOME_VARIABLE, null, '== 0') != 0 $SOME_VARIABLE filter($SOME_VARIABLE, null, null) != 0 $SOME_VARIABLE == '3'&& $ELSE_ONE_VARIABLE > '2' filter($SOME_VARIABLE, null, '== 3') != 0 && filter($ELSE_ONE_VARIABLE, null, '>2') != 0","title":"Metrics"},{"location":"metrics.html#metrics-definitions","text":"Flask enables you to create patient-level metrics to measure study performance and progress. Metrics can be computed using a pattern language referencing data variables in your study.","title":"Metrics Definitions"},{"location":"metrics.html#the-metrics-pattern-language","text":"The pattern language was designed to enable you to create metrics of performance, exceptions, missing data, or critical values on the patient timeline. The language uses item variable names - like $CHANGE_IN_SEVERITY.","title":"The Metrics pattern language"},{"location":"metrics.html#simple-single-variable-expressions","text":"You can use a simple expressions like $CHANGE_IN_SEVERITY == '0' ,","title":"Simple single variable expressions"},{"location":"metrics.html#count-things","text":"You can count things using COUNT and FILTER count($CHANGE_IN_SEVERITY ) == '0' or filter($PATIENT_REPORTED_RESTLESSNESS) == '0' .","title":"Count things"},{"location":"metrics.html#compound-expressions","text":"You can combine expressions using logical operators like && (AND) or || (OR). The logical operator !(NOT) can also be used. Examples $ELIGIBILITY == '1' && count($TREATMENT_SESSIONS) > '0' $CHANGE_IN_SEVERITY > 2 || $PATIENT_REPORTED_RESTLESSNESS == '0' count($CONMED) <= '5'","title":"Compound expressions"},{"location":"metrics.html#functions","text":"","title":"Functions"},{"location":"metrics.html#counting-things","text":"count(variable, period) - the count function counts a variable entered in a time period. The count function will return the number of records in the dataset where the variable has any value. If the count is 0 then the data is missing. The count function takes 2 arguments: variable - the unique variable name of the CRF item. period - an optional time period counting data for each patient. Period is a time interval like 24 hours !!info You can use the following time units: * milliseconds * seconds * minutes * hours * days * weeks * months * years Usage examples: count($ADVERSE_EVENTS) - Count adverse events for each patients. count($ADVERSE_EVENTS, '24 hours') - Count adverse events for patients in the last 24 hours. count($ADVERSE_EVENTS, '7 days') - Count for the last 7 days Say you want to find patients missing blood test data in the last 24 hours - you'd do this: count ( $BLOOD_TEST , '24 hours' ) == '0' ; The metric will have the value of 1 for all patients missing blood tests in the last 24 hours.","title":"Counting things"},{"location":"metrics.html#filter-more-complex-counting","text":"filter(variable, period, value, take) - the filter function enables you to filter on values looking forwards and backwards on the patient journey. Like count, filter returns the number of records entered into the database for the variable. Arguments: variable - the unique variable of the CRF item period - an optional time period for filtering patient data according to CRF create date. value - an optional filter using a comparison operator like >2 , yes , ==5 take - an optional argument to take the first N records or last N records in the dataset for each patient. Info You can use the following operators: == != >= <= > < Example ==2 some string value >=5 the expression ==2 and 2 or ==yes and yes are equivalent! The value of the take parameter will be a string like '-1' , '1' , '5' The take parameter enables you to take events from the beginning or end of the patient timeline: Examples '1' - The first event '2' - The first 2 events '-1' - The last event '-4' - The last 4 events the records returned from the database are ordered by date created. Filter arguments are evaluated in this order: filtering by variable filtering by period filtering by 'take' filtering by 'value' if you don't need to use some parameter you can set null instead. Usage examples filter($SCREENED) - count the $SCREENED variable for each patient. filter($EPRO_DIARY, '24 hours') - count 1 if any diaries were entered by each patient in the last 24 hours filter($TOOK_ANALGESICS, '24 hours', '>2') - count 1 for each patient who took pain analgesics more than twice in the past 24 hours filter($TOOK_ANALGESICS, null, '>2') - count 1 for each patient who took pain analgesics more than twice in the study filter($TOOK_ANALGESICS, null, '>2', '-2') - count 1 for each patient who took pain analgesics more than twice in the last 2 study events You can do a comparison operation on the filter count and return a 0/false or 1/true for the metric: filter ( $TOOK_ANALGESICS , '24 hours' , '>2' ) > '0' ; Or just do the filter count and return a number for the metric like this: filter ( $ELSE_ONE_VARIABLE , '24 hours' , '>2' )","title":"Filter - more complex counting"},{"location":"metrics.html#under-the-hood-of-the-pattern-language-for-the-curious","text":"You can use a simple expressions like $AGE == '77' . In this case this expression will be replaced to filter($AGE, null, '== 77') != 0 Example Input Output $SOME_VARIABLE == '0' filter($SOME_VARIABLE, null, '== 0') != 0 $SOME_VARIABLE filter($SOME_VARIABLE, null, null) != 0 $SOME_VARIABLE == '3'&& $ELSE_ONE_VARIABLE > '2' filter($SOME_VARIABLE, null, '== 3') != 0 && filter($ELSE_ONE_VARIABLE, null, '>2') != 0","title":"Under the hood of the pattern language for the curious"},{"location":"registration.html","text":"Registration Welcome to FlaskData FlaskData is a cloud API platform for clinical data collection and automated monitoring. Flaskdata is used in clinical trials to shorten R&D timelines, and in patient care to acquire real-world evidence for safety and efficacy of therapeutics. FlaskData is exposed as an open cloud API and is based on a foundation of IAM (identity access management) with strong security & privacy to protect clinical data assets. FlaskData complies with regulatory requirements for 21 CFR Part 11, GDPR, HIPAA and Israeli Privacy Rule. Flaskdata provides 3 kinds of application services: Collect, Detect and Act. FlaskData Collect provides a RESTful API, desktop and mobile apps to manage research studies, and to interact with patients, investigators and devices in clinical trials. FlaskData Detect enables you to define patterns of protocol deviations. FlaskData Act automates alert notifications to patients and clinical teams on exceptions and missing data. Audience Clinical trial management and operations teams - anyone who is involved with creating and running pre and post-market clinical R&D. Create a new account How to create a new account? It's so simple... Go to Registration Fill in your information and click CREATE AN ACCOUNT A welcome email will be sent to you. You're welcome to define your first study Short video example of registration","title":"Registration"},{"location":"registration.html#registration","text":"Welcome to FlaskData FlaskData is a cloud API platform for clinical data collection and automated monitoring. Flaskdata is used in clinical trials to shorten R&D timelines, and in patient care to acquire real-world evidence for safety and efficacy of therapeutics. FlaskData is exposed as an open cloud API and is based on a foundation of IAM (identity access management) with strong security & privacy to protect clinical data assets. FlaskData complies with regulatory requirements for 21 CFR Part 11, GDPR, HIPAA and Israeli Privacy Rule. Flaskdata provides 3 kinds of application services: Collect, Detect and Act. FlaskData Collect provides a RESTful API, desktop and mobile apps to manage research studies, and to interact with patients, investigators and devices in clinical trials. FlaskData Detect enables you to define patterns of protocol deviations. FlaskData Act automates alert notifications to patients and clinical teams on exceptions and missing data.","title":"Registration"},{"location":"registration.html#audience","text":"Clinical trial management and operations teams - anyone who is involved with creating and running pre and post-market clinical R&D.","title":"Audience"},{"location":"registration.html#create-a-new-account","text":"How to create a new account? It's so simple... Go to Registration Fill in your information and click CREATE AN ACCOUNT A welcome email will be sent to you. You're welcome to define your first study","title":"Create a new account"},{"location":"registration.html#short-video-example-of-registration","text":"","title":"Short video example of registration"},{"location":"riskgraph_api.html","text":"RiskGraph API Introduction Risk Graph is an API service that takes clinical data and evaluates if the data is anomalous. Audience Developers who want to use the RiskGraph API. Concepts and terms A developer will need credentials to a User account with a RiskGraph role. This User can be created by the customer admin role. The RiskGraph User has access to call RiskGraph APIs. RiskGraph environment: riskgraph-api.flaskdata.io Select HTTPS in the Swagger Schemes dropdown before trying it out. For more information about Swagger and Authorization go to API Introduction . V0.1 Single dimensional case. Algorithm for anomaly detection: Distance based, Single variable Description Client calls API function with an array of {ts: Timestamp, key:value} where value is a positive integer { \u201cdevice\u201d : t ype , \u201c t olera n ce\u201d : t , \u201clowerBou n d\u201d : lower , \u201cupperBou n d\u201d : upper da ta : { ts : Times ta mp , key : value }, { ts : Times ta mp , key : value }, { ts : Times ta mp , key : value }, { ts : Times ta mp , key : value }, { ts : Times ta mp , key : value }, . . . } } Function Loop on array where k is element k in the data array. Call Detectors; return levelOneAnomalyDetector() when: value is null return isAnomaly: \u2018t\u2019, reason: \u2018Missing value\u2019 when: Timestamp (k) < Timestamp (k-1) return isAnomaly: \u2018t\u2019, reason: \u2018Out of sequence\u2019 when: Timestamp (k) invalid timestamp return isAnomaly: \u2018t\u2019, reason: \u2018Invalid timestamp\u2019 when: value > upper || value < lower return isAnomaly: \u2018t\u2019, reason: \u2018Out of range\u2019 levelTwoAnomalyDetector() Element #1 is the baseline value. Compute maxDistance where Distance (k) = abs (value(k) - value(1) Compute cutoff = maxDistance/t when: Distance(k) > cutoff return isAnomaly: \u2018t\u2019, reason: \u2018Way out man\u2019 Return Da ta :{ { key : value , isA n omaly : t | f , reaso n : te x t }, { key : value , isA n omaly : t | f , reaso n : te x t }, . . . } Comments Can we reverse-engineer a model for EDC queries? Who is the subject? Example Look Riskgraph MVP - simulations Google sheet doc. UI RiskGraph UI is available to RiskGraph user. Login to FlaskData Click on the RiskGraph option in the left bar.","title":"Riskgraph api"},{"location":"riskgraph_api.html#riskgraph-api","text":"","title":"RiskGraph API"},{"location":"riskgraph_api.html#introduction","text":"Risk Graph is an API service that takes clinical data and evaluates if the data is anomalous.","title":"Introduction"},{"location":"riskgraph_api.html#audience","text":"Developers who want to use the RiskGraph API.","title":"Audience"},{"location":"riskgraph_api.html#concepts-and-terms","text":"A developer will need credentials to a User account with a RiskGraph role. This User can be created by the customer admin role. The RiskGraph User has access to call RiskGraph APIs. RiskGraph environment: riskgraph-api.flaskdata.io Select HTTPS in the Swagger Schemes dropdown before trying it out. For more information about Swagger and Authorization go to API Introduction .","title":"Concepts and terms"},{"location":"riskgraph_api.html#v01","text":"Single dimensional case. Algorithm for anomaly detection: Distance based, Single variable","title":"V0.1"},{"location":"riskgraph_api.html#description","text":"Client calls API function with an array of {ts: Timestamp, key:value} where value is a positive integer { \u201cdevice\u201d : t ype , \u201c t olera n ce\u201d : t , \u201clowerBou n d\u201d : lower , \u201cupperBou n d\u201d : upper da ta : { ts : Times ta mp , key : value }, { ts : Times ta mp , key : value }, { ts : Times ta mp , key : value }, { ts : Times ta mp , key : value }, { ts : Times ta mp , key : value }, . . . } }","title":"Description"},{"location":"riskgraph_api.html#function","text":"Loop on array where k is element k in the data array. Call Detectors; return","title":"Function"},{"location":"riskgraph_api.html#leveloneanomalydetector","text":"when: value is null return isAnomaly: \u2018t\u2019, reason: \u2018Missing value\u2019 when: Timestamp (k) < Timestamp (k-1) return isAnomaly: \u2018t\u2019, reason: \u2018Out of sequence\u2019 when: Timestamp (k) invalid timestamp return isAnomaly: \u2018t\u2019, reason: \u2018Invalid timestamp\u2019 when: value > upper || value < lower return isAnomaly: \u2018t\u2019, reason: \u2018Out of range\u2019","title":"levelOneAnomalyDetector()"},{"location":"riskgraph_api.html#leveltwoanomalydetector","text":"Element #1 is the baseline value. Compute maxDistance where Distance (k) = abs (value(k) - value(1) Compute cutoff = maxDistance/t when: Distance(k) > cutoff return isAnomaly: \u2018t\u2019, reason: \u2018Way out man\u2019 Return Da ta :{ { key : value , isA n omaly : t | f , reaso n : te x t }, { key : value , isA n omaly : t | f , reaso n : te x t }, . . . }","title":"levelTwoAnomalyDetector()"},{"location":"riskgraph_api.html#comments","text":"Can we reverse-engineer a model for EDC queries? Who is the subject?","title":"Comments"},{"location":"riskgraph_api.html#example","text":"Look Riskgraph MVP - simulations Google sheet doc.","title":"Example"},{"location":"riskgraph_api.html#ui","text":"RiskGraph UI is available to RiskGraph user. Login to FlaskData Click on the RiskGraph option in the left bar.","title":"UI"},{"location":"study_dashboard.html","text":"Study Dashboard Study Dashboard shows your study monitoring. On the studies index page, click on your study to view your study dashboard. Important By pressing on study, the study name appear in the title bar and all of the actions will be related to this study (i.e. add user, add site, etc.) To see your data monitoring in the dashboard, you should define it first with the monitoring option. Monitoring In the monitoring section there is a slick analytics of your study data. The graphs can be viewed as a bar graph, pie graph, table, etc. Graphs can be customized to have different colors (red, green or blue) Alerts In the alerts card, there is a table with the last 10 active alerts. If there are active alerts for this study, a bell appears in title bar with the number of alerts. You can click on each alert to see more properties, add comments, or change its status. To see all alerts from this study click on the blue All alerts link. All Alerts On the Study->All Alerts page, you can see all alerts from this study. You can filter the alerts, export them to CSV file, and update the alert status by pressing on alert. Filters On the study dashboard page there is a filter option. Period - alert date <= this select date Sites Subjects This filter filters graphs and alerts accordingly. EDC If this study has EDC DB , the blue EDC button appears. Clicking it opens a new window with the study ClinCapture app. Additional Tools There is option to add tools to your study. The optional tools exist in Tools . If you want other users (study role and site role users) to see tools, you need to add them to the specific study. Click on the blue ADDITIONAL TOOLS button, and the study tools page opens. You can add/remove tool from this study by click on the green ADD A TOOL button. Manage tools page opens: Study tools page available to all research users. By pressing tool, you enter that tool and see the data (Of course site role users can only see their site data).","title":"Study Dashboard"},{"location":"study_dashboard.html#study-dashboard","text":"Study Dashboard shows your study monitoring. On the studies index page, click on your study to view your study dashboard. Important By pressing on study, the study name appear in the title bar and all of the actions will be related to this study (i.e. add user, add site, etc.) To see your data monitoring in the dashboard, you should define it first with the monitoring option.","title":"Study Dashboard"},{"location":"study_dashboard.html#monitoring","text":"In the monitoring section there is a slick analytics of your study data. The graphs can be viewed as a bar graph, pie graph, table, etc. Graphs can be customized to have different colors (red, green or blue)","title":"Monitoring"},{"location":"study_dashboard.html#alerts","text":"In the alerts card, there is a table with the last 10 active alerts. If there are active alerts for this study, a bell appears in title bar with the number of alerts. You can click on each alert to see more properties, add comments, or change its status. To see all alerts from this study click on the blue All alerts link.","title":"Alerts"},{"location":"study_dashboard.html#all-alerts","text":"On the Study->All Alerts page, you can see all alerts from this study. You can filter the alerts, export them to CSV file, and update the alert status by pressing on alert.","title":"All Alerts"},{"location":"study_dashboard.html#filters","text":"On the study dashboard page there is a filter option. Period - alert date <= this select date Sites Subjects This filter filters graphs and alerts accordingly.","title":"Filters"},{"location":"study_dashboard.html#edc","text":"If this study has EDC DB , the blue EDC button appears. Clicking it opens a new window with the study ClinCapture app.","title":"EDC"},{"location":"study_dashboard.html#additional-tools","text":"There is option to add tools to your study. The optional tools exist in Tools . If you want other users (study role and site role users) to see tools, you need to add them to the specific study. Click on the blue ADDITIONAL TOOLS button, and the study tools page opens. You can add/remove tool from this study by click on the green ADD A TOOL button. Manage tools page opens: Study tools page available to all research users. By pressing tool, you enter that tool and see the data (Of course site role users can only see their site data).","title":"Additional Tools"},{"location":"tools.html","text":"Tools In left menu bar there is a Tools option. There is a list of default tools that each customer has. If you need special tool open a support request . Audit Report In the Audit Report tool, there are the following filter options: Audit logs: database_audit_log - Who changed data and when policy_changes_audit_log - Changes to database audit policy, who changed and when login_audit_table - Successful and failed login attempts object_access_audit - Object access operations (select) at level of ObjectController profile views account_management_log - Log of activities by the super admin and customer admin (create user, add study, remove from study, etc.) at level of UserController From date - logs date >= this date To date - logs <= this date You can extract this report (CSV, Excel, PDF) and free search in the logs. Billing Report If your account has billing report feature , you can see all your reports in this table. Download Study Data CSVs This tool downloads FormsStudyData.zip folder with all your study's data. There is a CSV file for each CRF. Studies Report This table includes all your studies and a the following parameters IRB Number - study unique protocol id Protocol Title - study official title PI Name - PI username Auth Name - idp_user_id Enrollment target - study enrollment target Active - Number of active subjects Not-active - Number of closed subjects Start date - study start date End date - study completion date Status - study status","title":"Tools"},{"location":"tools.html#tools","text":"In left menu bar there is a Tools option. There is a list of default tools that each customer has. If you need special tool open a support request .","title":"Tools"},{"location":"tools.html#audit-report","text":"In the Audit Report tool, there are the following filter options: Audit logs: database_audit_log - Who changed data and when policy_changes_audit_log - Changes to database audit policy, who changed and when login_audit_table - Successful and failed login attempts object_access_audit - Object access operations (select) at level of ObjectController profile views account_management_log - Log of activities by the super admin and customer admin (create user, add study, remove from study, etc.) at level of UserController From date - logs date >= this date To date - logs <= this date You can extract this report (CSV, Excel, PDF) and free search in the logs.","title":"Audit Report"},{"location":"tools.html#billing-report","text":"If your account has billing report feature , you can see all your reports in this table.","title":"Billing Report"},{"location":"tools.html#download-study-data-csvs","text":"This tool downloads FormsStudyData.zip folder with all your study's data. There is a CSV file for each CRF.","title":"Download Study Data CSVs"},{"location":"tools.html#studies-report","text":"This table includes all your studies and a the following parameters IRB Number - study unique protocol id Protocol Title - study official title PI Name - PI username Auth Name - idp_user_id Enrollment target - study enrollment target Active - Number of active subjects Not-active - Number of closed subjects Start date - study start date End date - study completion date Status - study status","title":"Studies Report"}]}
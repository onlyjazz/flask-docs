{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FlaskData Collect, Detect and Act FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials. The FlaskData platform provides real-time data collection and automated detection and response. An open API architecture fits easily into any digital health, digital therapeutics or eClinical software. Flask collects data from any combination of sources \u2013 investigators, patients, mobile, wearables, passive monitoring, connected medical devices and code. Collect provides you with desktop, mobile and RESTful Flask Data API services to collect data directly from patients, investigators and connected medical devices. Detect provides you with the capability to automated deviation monitoring of all your clinical data continuously. This is based on techniques used widely in cyber security \u2013 read more here about An attack modeling approach for monitoring clinical data Act provides you with the capability to automate response to patients and clinical operations teams with push notifications triggered by computed protocol compliance metrics over threshold. Read more about the Flaskdata software architecture here: Flaskdata software architecture white paper","title":"Home"},{"location":"#flaskdata","text":"Collect, Detect and Act FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials. The FlaskData platform provides real-time data collection and automated detection and response. An open API architecture fits easily into any digital health, digital therapeutics or eClinical software. Flask collects data from any combination of sources \u2013 investigators, patients, mobile, wearables, passive monitoring, connected medical devices and code. Collect provides you with desktop, mobile and RESTful Flask Data API services to collect data directly from patients, investigators and connected medical devices. Detect provides you with the capability to automated deviation monitoring of all your clinical data continuously. This is based on techniques used widely in cyber security \u2013 read more here about An attack modeling approach for monitoring clinical data Act provides you with the capability to automate response to patients and clinical operations teams with push notifications triggered by computed protocol compliance metrics over threshold. Read more about the Flaskdata software architecture here: Flaskdata software architecture white paper","title":"FlaskData"},{"location":"api_introduction/","text":"API Introduction Audience Developers who want to use the Flask API. Concepts and terms A developer will need credentials to a User account with an API role. This User can be created by customer admin role. The API User has access to data of the customer account and EDC databases that defined in the study EDC dbname. There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io Each API environments has its own swagger UI - like https://api.flaskdata.io/swagger/ Select HTTPS in the Swagger Schemes dropdown before trying it out. For using FlaskData API by swagger you need to click on \"Try it out\" of the relevant API. Config/ change header and body request as needed and click on \"Execute\" button. ClinCapture EDC ClinCapture EDC is a database includes all study data (events, crfs, items, sites, subjects, data and etc.) Some studies use EDC data and UI to insert/update/delete/extract the study data. FlaskData and EDC are related, there are ETLs to load EDC data to FlaskData, FlaskData uses the data for analytics, alerts and etc. FlaskData APIs extract data from EDC. Flask Forms Flask Forms is a platform to save study CRFs data ( events, crfs, items and the data), This is a tool developed by FlaskData team, easy to use! Some studies use FlaskForms, The customer can build/ edit his study or FlaskData can do it for him. FlaskData and FlaskForms are related and there's a perfect User experience. FlaskData API extract data from FlaskForms data. Getting started API Authorization For using FlaskData APIs you need to get token first. For getting FlaskData token use auth/authorize API. For example - in development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON) you need to set your API User's email and password, like: { \"email\": \"xxx@gmail.com\", \"password\": \"12345678\" } In the response body you get an access token, like: { \"token\": \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\", \"expired\": \"2019-10-28T15:23:10.407Z\" } NOTE: The expired time is UTC time.","title":"API Introduction"},{"location":"api_introduction/#api-introduction","text":"","title":"API Introduction"},{"location":"api_introduction/#audience","text":"Developers who want to use the Flask API.","title":"Audience"},{"location":"api_introduction/#concepts-and-terms","text":"A developer will need credentials to a User account with an API role. This User can be created by customer admin role. The API User has access to data of the customer account and EDC databases that defined in the study EDC dbname. There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io Each API environments has its own swagger UI - like https://api.flaskdata.io/swagger/ Select HTTPS in the Swagger Schemes dropdown before trying it out. For using FlaskData API by swagger you need to click on \"Try it out\" of the relevant API. Config/ change header and body request as needed and click on \"Execute\" button.","title":"Concepts and terms"},{"location":"api_introduction/#clincapture-edc","text":"ClinCapture EDC is a database includes all study data (events, crfs, items, sites, subjects, data and etc.) Some studies use EDC data and UI to insert/update/delete/extract the study data. FlaskData and EDC are related, there are ETLs to load EDC data to FlaskData, FlaskData uses the data for analytics, alerts and etc. FlaskData APIs extract data from EDC.","title":"ClinCapture EDC"},{"location":"api_introduction/#flask-forms","text":"Flask Forms is a platform to save study CRFs data ( events, crfs, items and the data), This is a tool developed by FlaskData team, easy to use! Some studies use FlaskForms, The customer can build/ edit his study or FlaskData can do it for him. FlaskData and FlaskForms are related and there's a perfect User experience. FlaskData API extract data from FlaskForms data.","title":"Flask Forms"},{"location":"api_introduction/#getting-started-api","text":"","title":"Getting started API"},{"location":"api_introduction/#authorization","text":"For using FlaskData APIs you need to get token first. For getting FlaskData token use auth/authorize API. For example - in development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON) you need to set your API User's email and password, like: { \"email\": \"xxx@gmail.com\", \"password\": \"12345678\" } In the response body you get an access token, like: { \"token\": \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\", \"expired\": \"2019-10-28T15:23:10.407Z\" } NOTE: The expired time is UTC time.","title":"Authorization"},{"location":"apiflows/","text":"API flows The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to a ClinCapture EDC instance (extract EDC data etc.) Flask - APIs are related to Flas data (extract data, insert data etc.) NOTES: Authorization parameter in the header request should be the token you had get before from you authorization request . EDC parameter in the header request should be the EDC DB name. In this document there are a few examples of FlaskData APIs - There are more EDC APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com . EDC Extract EDC Data There are a few APIs you can use to extract your ClinCapture EDC data. For example: /edc/study/extract-data This API extract EDC data of each table/view/function (like functionName()) and return json. fromDate, toDate, sort, filters and inputVariables(if tableName is a function) are optional values. Filters and inputVariable json objects - the key is the column name/ input variable name in postgres, the json value is the compare value (like where site = XXX)/ input value in function (like schema.function(XXX)). For example: { \"tableName\": \"cc_event_data\", \"fromDate\": \"2017-01-01T00:00:00.000Z\", \"toDate\": \"2019-02-01T00:00:00.000Z\", \"sort\": \"subject\" } Another example: { \"tableName\": \"cross_event_crf_data\" } /edc/study/download-csvs-data This API downloads a zip folder includes EDC study data. Each csv is an event CRF data. /edc/study/extract-study-data-at-crf-level This API extracts EDC data at CRF level and returns the data as a json object. This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/study/extract-study-data-at-crf-level-to-csvs This API extracts EDC data at CRF level and returns a zip folder includes CSV files (each CRF as CSV file). This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/subjects/create-subject This API creates a subject in EDC DB and returns the study_subject_id value. Flask /flask/customer/extract-data-to-json This API extracts data from flask tables and views for your customer. The table/ view should have customer_id column for this process. For example: studies table, audit_user_login, billing_reports_customer and etc. studyIds and filters are optional. /flask/customer/download-billing-reports This API downloads a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. NOTE - This process will download files only if the billing reports features turn on in your customer account. /flask/device/get-logs This API returns device logs of a study. /flask/device/insert-log This API inserts device log into flaskData with correct study_id according to EDC. payload parameter is optional and can include each key value pairs. /flask/study/create-update-flask-study This API creates/updates study in FlaskData. /flask/site/create-update-flask-site This API creates/updates site in FlaskData. /flask/study/create-update-flask-study-users This API creates User if not exists and assigned Users to study. NOTE - This API deletes the Users that were assigned to this study and assigned the new Users. /flask/subject/extract-study-event-data-to-CSV This API extracts all study data (from FlaskForms) based on study id and download CSV files. /flask/crf/create-CRF-and-insert-data This API creates CRF in existing event and insert data Example - Creates a new AE (adverse event) CRF in existing event. /flask/crf/create-event-CRF-and-insert-data This API creates event and CRF and inserts data. Example - Creates a new Medication event with CRF and inserts data. /flask/crf/get-CRF-data-ids This API returns subject's crf data Id (unique for each CRF) for specific crf name. /flask/crf/update-CRF-data This API updates CRF data by crf data id. Use Cases NOTE: The following examples require jQuery later version General example of extract data using JS: var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json', type: 'POST', headers: { 'Authorization': jwt}, data: '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here }) .fail(function(error) { if(error) { // Enter your code here } }); Save data in CRF JS Example. Your study uses FlaskForms application. You have a mobile app and you want to collect data and save it to a Flask Forms Event/CRF This JS code is an example to create CRF and save its data into existing event. $(document).ready(function() { // Call insertDataIntoFlaskFormsCRF function to assign new CRF and save data. // Input values : User email, User password, study id, subject label, event name, CRF name, CRF data. insertDataIntoFlaskFormsCRF(\"mongositerole@clearclinica.com\", \"123456\", 145858, 'mongo_test_site_1-03', 'Screening', 'Subject properties', {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2}); }); var insertDataIntoFlaskFormsCRF = function(uEmail, uPass, studyId, subjectLabel, eventName, crfName, crfData){ // Get token getFlaskDataToken(uEmail, uPass, function(userToken){ var token = UserToken; // Create new CRF in existin event and insert data createCRFandInsertData(token, studyId, subjectLabel, eventName, crfName, crfData, function(crfDataId){ console.log(crfDataId); // Save this crfDataId if you will need to update this CRF data }); }); } var getFlaskDataToken = function(email, password, cb) { // Get JWT token var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/auth/authorize', type: 'POST', data: '{\"email\":\"' + email + '\",\"password\":\"' + password +'\"}', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.token); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to get token ' + error); } }); } // Create new CRF and insert data // /flask/crf/create-CRF-and-insert-data var createCRFandInsertData = function(token, study_id, subject_label, event_name, crf_name, crf_data, cb) { var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/crf/create-CRF-and-insert-data', type: 'POST', headers: { 'Authorization': token}, data: '{\"study_id\": '+study_id+',\"subject_label\": \"'+subject_label+'\",\"event_name\": \"'+event_name+'\",\"crf_name\": \"'+crf_name+'\",\"crf_data\": '+ JSON.stringify(crf_data) +' }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.crfDataId); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to create CRF and insert data :' + JSON.stringify(error)); } }); } Your application should call insertDataIntoFlaskFormsCRF function with the following input parameters: User email - Your customer API User email address for authorization. User password - Your customer API User password for authorization. studyId - Your study Id parameter, You can take it from study dashboard URL. Subject label - Subject label from flaskdata, for example: Event name for creating CRF, for example: CRF name for creating CRF, for example (in flask forms): CRF data - for saving CRF data, Json structure, key value pair, The key is the item's variable (as it's defined in flask forms) and the value is the data for this variable. for example: {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2} The output should be new CRF for the subject with the correct data, for example: Example of calling FlaskData API using jQuery older version var http = new XMLHttpRequest(); var url = 'https://dev-api.flaskdata.io/auth/authorize'; var params = '{\"email\":\"xxx@gmail.com\",\"password\":\"123456\"}'; http.open('POST', url, true); //Send the proper header information along with the request http.setRequestHeader('Content-type', 'application/json'); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 && http.status == 200) { alert(http.responseText); } } http.send(params);","title":"API Flows"},{"location":"apiflows/#api-flows","text":"The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to a ClinCapture EDC instance (extract EDC data etc.) Flask - APIs are related to Flas data (extract data, insert data etc.) NOTES: Authorization parameter in the header request should be the token you had get before from you authorization request . EDC parameter in the header request should be the EDC DB name. In this document there are a few examples of FlaskData APIs - There are more EDC APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com .","title":"API flows"},{"location":"apiflows/#edc","text":"","title":"EDC"},{"location":"apiflows/#extract-edc-data","text":"There are a few APIs you can use to extract your ClinCapture EDC data. For example:","title":"Extract EDC Data"},{"location":"apiflows/#edcstudyextract-data","text":"This API extract EDC data of each table/view/function (like functionName()) and return json. fromDate, toDate, sort, filters and inputVariables(if tableName is a function) are optional values. Filters and inputVariable json objects - the key is the column name/ input variable name in postgres, the json value is the compare value (like where site = XXX)/ input value in function (like schema.function(XXX)). For example: { \"tableName\": \"cc_event_data\", \"fromDate\": \"2017-01-01T00:00:00.000Z\", \"toDate\": \"2019-02-01T00:00:00.000Z\", \"sort\": \"subject\" } Another example: { \"tableName\": \"cross_event_crf_data\" }","title":"/edc/study/extract-data"},{"location":"apiflows/#edcstudydownload-csvs-data","text":"This API downloads a zip folder includes EDC study data. Each csv is an event CRF data.","title":"/edc/study/download-csvs-data"},{"location":"apiflows/#edcstudyextract-study-data-at-crf-level","text":"This API extracts EDC data at CRF level and returns the data as a json object. This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level"},{"location":"apiflows/#edcstudyextract-study-data-at-crf-level-to-csvs","text":"This API extracts EDC data at CRF level and returns a zip folder includes CSV files (each CRF as CSV file). This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level-to-csvs"},{"location":"apiflows/#edcsubjectscreate-subject","text":"This API creates a subject in EDC DB and returns the study_subject_id value.","title":"/edc/subjects/create-subject"},{"location":"apiflows/#flask","text":"","title":"Flask"},{"location":"apiflows/#flaskcustomerextract-data-to-json","text":"This API extracts data from flask tables and views for your customer. The table/ view should have customer_id column for this process. For example: studies table, audit_user_login, billing_reports_customer and etc. studyIds and filters are optional.","title":"/flask/customer/extract-data-to-json"},{"location":"apiflows/#flaskcustomerdownload-billing-reports","text":"This API downloads a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. NOTE - This process will download files only if the billing reports features turn on in your customer account.","title":"/flask/customer/download-billing-reports"},{"location":"apiflows/#flaskdeviceget-logs","text":"This API returns device logs of a study.","title":"/flask/device/get-logs"},{"location":"apiflows/#flaskdeviceinsert-log","text":"This API inserts device log into flaskData with correct study_id according to EDC. payload parameter is optional and can include each key value pairs.","title":"/flask/device/insert-log"},{"location":"apiflows/#flaskstudycreate-update-flask-study","text":"This API creates/updates study in FlaskData.","title":"/flask/study/create-update-flask-study"},{"location":"apiflows/#flasksitecreate-update-flask-site","text":"This API creates/updates site in FlaskData.","title":"/flask/site/create-update-flask-site"},{"location":"apiflows/#flaskstudycreate-update-flask-study-users","text":"This API creates User if not exists and assigned Users to study. NOTE - This API deletes the Users that were assigned to this study and assigned the new Users.","title":"/flask/study/create-update-flask-study-users"},{"location":"apiflows/#flasksubjectextract-study-event-data-to-csv","text":"This API extracts all study data (from FlaskForms) based on study id and download CSV files.","title":"/flask/subject/extract-study-event-data-to-CSV"},{"location":"apiflows/#flaskcrfcreate-crf-and-insert-data","text":"This API creates CRF in existing event and insert data Example - Creates a new AE (adverse event) CRF in existing event.","title":"/flask/crf/create-CRF-and-insert-data"},{"location":"apiflows/#flaskcrfcreate-event-crf-and-insert-data","text":"This API creates event and CRF and inserts data. Example - Creates a new Medication event with CRF and inserts data.","title":"/flask/crf/create-event-CRF-and-insert-data"},{"location":"apiflows/#flaskcrfget-crf-data-ids","text":"This API returns subject's crf data Id (unique for each CRF) for specific crf name.","title":"/flask/crf/get-CRF-data-ids"},{"location":"apiflows/#flaskcrfupdate-crf-data","text":"This API updates CRF data by crf data id.","title":"/flask/crf/update-CRF-data"},{"location":"apiflows/#use-cases","text":"NOTE: The following examples require jQuery later version","title":"Use Cases"},{"location":"apiflows/#general-example-of-extract-data-using-js","text":"var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json', type: 'POST', headers: { 'Authorization': jwt}, data: '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here }) .fail(function(error) { if(error) { // Enter your code here } });","title":"General example of extract data using JS:"},{"location":"apiflows/#save-data-in-crf-js-example","text":"Your study uses FlaskForms application. You have a mobile app and you want to collect data and save it to a Flask Forms Event/CRF This JS code is an example to create CRF and save its data into existing event. $(document).ready(function() { // Call insertDataIntoFlaskFormsCRF function to assign new CRF and save data. // Input values : User email, User password, study id, subject label, event name, CRF name, CRF data. insertDataIntoFlaskFormsCRF(\"mongositerole@clearclinica.com\", \"123456\", 145858, 'mongo_test_site_1-03', 'Screening', 'Subject properties', {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2}); }); var insertDataIntoFlaskFormsCRF = function(uEmail, uPass, studyId, subjectLabel, eventName, crfName, crfData){ // Get token getFlaskDataToken(uEmail, uPass, function(userToken){ var token = UserToken; // Create new CRF in existin event and insert data createCRFandInsertData(token, studyId, subjectLabel, eventName, crfName, crfData, function(crfDataId){ console.log(crfDataId); // Save this crfDataId if you will need to update this CRF data }); }); } var getFlaskDataToken = function(email, password, cb) { // Get JWT token var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/auth/authorize', type: 'POST', data: '{\"email\":\"' + email + '\",\"password\":\"' + password +'\"}', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.token); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to get token ' + error); } }); } // Create new CRF and insert data // /flask/crf/create-CRF-and-insert-data var createCRFandInsertData = function(token, study_id, subject_label, event_name, crf_name, crf_data, cb) { var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/crf/create-CRF-and-insert-data', type: 'POST', headers: { 'Authorization': token}, data: '{\"study_id\": '+study_id+',\"subject_label\": \"'+subject_label+'\",\"event_name\": \"'+event_name+'\",\"crf_name\": \"'+crf_name+'\",\"crf_data\": '+ JSON.stringify(crf_data) +' }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.crfDataId); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to create CRF and insert data :' + JSON.stringify(error)); } }); } Your application should call insertDataIntoFlaskFormsCRF function with the following input parameters: User email - Your customer API User email address for authorization. User password - Your customer API User password for authorization. studyId - Your study Id parameter, You can take it from study dashboard URL. Subject label - Subject label from flaskdata, for example: Event name for creating CRF, for example: CRF name for creating CRF, for example (in flask forms): CRF data - for saving CRF data, Json structure, key value pair, The key is the item's variable (as it's defined in flask forms) and the value is the data for this variable. for example: {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2} The output should be new CRF for the subject with the correct data, for example:","title":"Save data in CRF JS Example."},{"location":"apiflows/#example-of-calling-flaskdata-api-using-jquery-older-version","text":"var http = new XMLHttpRequest(); var url = 'https://dev-api.flaskdata.io/auth/authorize'; var params = '{\"email\":\"xxx@gmail.com\",\"password\":\"123456\"}'; http.open('POST', url, true); //Send the proper header information along with the request http.setRequestHeader('Content-type', 'application/json'); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 && http.status == 200) { alert(http.responseText); } } http.send(params);","title":"Example of calling FlaskData API using jQuery older version"},{"location":"first_study/","text":"Define your study After signing up, the system will create your first study called default-XXX . Study Edit To edit the study - check it, in ACTIONS click on Edit option. In edit study window you can define your study profile, definitions and etc. NOTES: Database and EDC URL fields are related to EDC db, if you have EDC (ClinCapture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB). Study subject prefix : Prefix of creation subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the profile study will be opened. Study Profile In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments. NOTE: In comments card you can record free text annotations about your study. In Study Profile page you have ACTIONS green button with manage Users and manage sites options. Study manage Users In Manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcoma emails will be sent to Users' emails. Study manage sites In Manage sites page you can add/remove site from this study. To add a new site to study - you need create the site first. Type any part of the site's name in the Select sites box and choose the relevant site. Click NEXT STEP","title":"First Study"},{"location":"first_study/#define-your-study","text":"After signing up, the system will create your first study called default-XXX .","title":"Define your study"},{"location":"first_study/#study-edit","text":"To edit the study - check it, in ACTIONS click on Edit option. In edit study window you can define your study profile, definitions and etc. NOTES: Database and EDC URL fields are related to EDC db, if you have EDC (ClinCapture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB). Study subject prefix : Prefix of creation subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the profile study will be opened.","title":"Study Edit"},{"location":"first_study/#study-profile","text":"In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments.","title":"Study Profile"},{"location":"first_study/#_1","text":"NOTE: In comments card you can record free text annotations about your study.","title":""},{"location":"first_study/#_2","text":"In Study Profile page you have ACTIONS green button with manage Users and manage sites options.","title":""},{"location":"first_study/#study-manage-users","text":"In Manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcoma emails will be sent to Users' emails.","title":"Study manage Users"},{"location":"first_study/#study-manage-sites","text":"In Manage sites page you can add/remove site from this study. To add a new site to study - you need create the site first. Type any part of the site's name in the Select sites box and choose the relevant site. Click NEXT STEP","title":"Study manage sites"},{"location":"manage_sites/","text":"Manage Sites In order to manage research sites, click on Sites in the left bar. Default site By default, you have one site assigned to your study, called Default-Site-XXX Edit the default site by ACTIONS -> EDIT Edit Site In the Edit option you can edit your site properties. Click SAVE green button to save your site properties. Site Profile In Site Profile you can see your site's definition, add comments, and mange this site's Users by click on ACTIONS -> Manage Users Mange Users In Site Manage Users you can remove/add existing User to this site (if you don't have the User, go to create it ) You can add a User by typing any part of his name - the application will show you a list of matching User names. Click on invite green button Now you have a site with Users (like - CRC, PI) in your study. Add a new site In the Sites index page you can add new sites to your study. To add site click on ADD SITE button Enter the site properties and save it by click on SAVE green button.","title":"Manage Sites"},{"location":"manage_sites/#manage-sites","text":"In order to manage research sites, click on Sites in the left bar.","title":"Manage Sites"},{"location":"manage_sites/#default-site","text":"By default, you have one site assigned to your study, called Default-Site-XXX Edit the default site by ACTIONS -> EDIT","title":"Default site"},{"location":"manage_sites/#edit-site","text":"In the Edit option you can edit your site properties. Click SAVE green button to save your site properties.","title":"Edit Site"},{"location":"manage_sites/#site-profile","text":"In Site Profile you can see your site's definition, add comments, and mange this site's Users by click on ACTIONS -> Manage Users","title":"Site Profile"},{"location":"manage_sites/#mange-users","text":"In Site Manage Users you can remove/add existing User to this site (if you don't have the User, go to create it ) You can add a User by typing any part of his name - the application will show you a list of matching User names. Click on invite green button Now you have a site with Users (like - CRC, PI) in your study.","title":"Mange Users"},{"location":"manage_sites/#add-a-new-site","text":"In the Sites index page you can add new sites to your study. To add site click on ADD SITE button Enter the site properties and save it by click on SAVE green button.","title":"Add a new site"},{"location":"manage_studies/","text":"Studies You can run a few studies in parallel. You can add/edit your studies properties, Users, sites etc. Add study To add studies go to studies index page by clicking on studies in the left bar. Click on ADD STUDY green button. Fill your study properties and click SAVE mange Users page will be opened. NOTES: Database and EDC URL fields are related to EDC db, if you have EDC (clin capture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB). Study manage Users In manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcome emails will be sent to Users' emails. The Manage Sites page will be opened. Study manage sites In manage sites page you can add/remove site from this study. To add a new site to your study - click on Create Site first. Type any part of the site name in the Select sites box and pick the site you want to add to your study. Click NEXT STEP Study Edit In the Studies index page you can edit your study. To edit your study - check it and then click on the green ACTIONS button and choose the Edit option. In the Edit Study page you can define your study profile, definitions etc. NOTES: Study subject prefix : Prefix for automatically creating a subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the Study Profile will be opened. Study Profile In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments. There is a Comments card that you can write all free text comments about your study. There is an ACTIONS green button with Manage Users and Manage Sites options.","title":"Manage Studies"},{"location":"manage_studies/#studies","text":"You can run a few studies in parallel. You can add/edit your studies properties, Users, sites etc.","title":"Studies"},{"location":"manage_studies/#add-study","text":"To add studies go to studies index page by clicking on studies in the left bar. Click on ADD STUDY green button. Fill your study properties and click SAVE mange Users page will be opened. NOTES: Database and EDC URL fields are related to EDC db, if you have EDC (clin capture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB).","title":"Add study"},{"location":"manage_studies/#study-manage-users","text":"In manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcome emails will be sent to Users' emails. The Manage Sites page will be opened.","title":"Study manage Users"},{"location":"manage_studies/#study-manage-sites","text":"In manage sites page you can add/remove site from this study. To add a new site to your study - click on Create Site first. Type any part of the site name in the Select sites box and pick the site you want to add to your study. Click NEXT STEP","title":"Study manage sites"},{"location":"manage_studies/#study-edit","text":"In the Studies index page you can edit your study. To edit your study - check it and then click on the green ACTIONS button and choose the Edit option. In the Edit Study page you can define your study profile, definitions etc. NOTES: Study subject prefix : Prefix for automatically creating a subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the Study Profile will be opened.","title":"Study Edit"},{"location":"manage_studies/#study-profile","text":"In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments. There is a Comments card that you can write all free text comments about your study. There is an ACTIONS green button with Manage Users and Manage Sites options.","title":"Study Profile"},{"location":"manage_users/","text":"Manage Users In the left menu bar click on Users. In this page - Users index you can add Users to your study, edit Users, assign User to site etc. You can filter Users by study, site or what you want by the Search filter and then click APPLY Default Users By default, you have 4 Users assigned to your study: 1.Customer admin User - This is your User! 2.CRC Default - CRF User 3.PI Default - PI User 4.CRA Default - CRA User Each default User has another permissions. Edit User Edit the default Users to your right Users one by one, by ACTIONS -> EDIT option Profile In the User profile page there is a pencil icon in the right corner of Profile card , click on it in order to edit the User properties. After you create a new User or modify their email, you can send them an email to create password by clicking on Send create password You don't have to do it - your Users can log in with their Google account. NOTES: In edit User Profile action you can change a few User's parameters Role There are 3 roles Customer Admin - User has all customer permissions - add/edit studis, Users, sites, alerts and etc. Study Role - User has study permissions - to see all study data (of all the sites) Site Role - User has site level permissions - to see his site data, add subject to his site, create events and crfs to subject. Form designer : define if User has Forms permissions - add/edit/delete Events and CRFs from the system (by default only customer admin Users can do it). Subscribe to Alerts : define if ths User will get alerts from this study (according to alert rules). Studies In Studies card you can see the User's studies Sites In Sites card you can see the User's sites (if the User is study role or customer admin he can see al study's sites) Comments In Comments card you can add comments about this User. Write your comments and click on ADD COMMENT button Mange User sites In User profile page you have an option to manage User sites. NOTE: You have this option just if the User is a site role User, otherwise the User has permissions to all study's sites In manage User sites page you can add/remove sites from User privileges. User actions In User profile page you have ACTIONS green button. In these actions button you have a few actions options: Send create password - By clicking on this option you email the User with create a new password request. Login as this User - By clicking on this option you login to the system like you are this User. Modify password - By clicking on this option you can modify the User password. Add User To add User click on ADD USER green button in Users index page The User will be added to the selected study that appears in the title. NOTES: Email should be unique for each User. Role There are 3 optional roles: 2.1 Customer Admin - Administrator of the customer - who has all permissions of this account, like - create User, create site, build CRFs etc. 2.2 Study role - who has all study permissions - see, extract etc. all study data. 2.3 Site role - who has specific site/s permissions - add subject to his site, fill CRFs, see site's data etc. EDC Role - more specific role from Role (number 2), it's more relevant for customers that have EDC db. Click on SAVE green button. The User will get a Welcome message in their email.","title":"Manage Users"},{"location":"manage_users/#manage-users","text":"In the left menu bar click on Users. In this page - Users index you can add Users to your study, edit Users, assign User to site etc. You can filter Users by study, site or what you want by the Search filter and then click APPLY","title":"Manage Users"},{"location":"manage_users/#default-users","text":"By default, you have 4 Users assigned to your study: 1.Customer admin User - This is your User! 2.CRC Default - CRF User 3.PI Default - PI User 4.CRA Default - CRA User Each default User has another permissions.","title":"Default Users"},{"location":"manage_users/#edit-user","text":"Edit the default Users to your right Users one by one, by ACTIONS -> EDIT option","title":"Edit User"},{"location":"manage_users/#profile","text":"In the User profile page there is a pencil icon in the right corner of Profile card , click on it in order to edit the User properties. After you create a new User or modify their email, you can send them an email to create password by clicking on Send create password You don't have to do it - your Users can log in with their Google account. NOTES: In edit User Profile action you can change a few User's parameters Role There are 3 roles Customer Admin - User has all customer permissions - add/edit studis, Users, sites, alerts and etc. Study Role - User has study permissions - to see all study data (of all the sites) Site Role - User has site level permissions - to see his site data, add subject to his site, create events and crfs to subject. Form designer : define if User has Forms permissions - add/edit/delete Events and CRFs from the system (by default only customer admin Users can do it). Subscribe to Alerts : define if ths User will get alerts from this study (according to alert rules).","title":"Profile"},{"location":"manage_users/#studies","text":"In Studies card you can see the User's studies","title":"Studies"},{"location":"manage_users/#sites","text":"In Sites card you can see the User's sites (if the User is study role or customer admin he can see al study's sites)","title":"Sites"},{"location":"manage_users/#comments","text":"In Comments card you can add comments about this User. Write your comments and click on ADD COMMENT button","title":"Comments"},{"location":"manage_users/#mange-user-sites","text":"In User profile page you have an option to manage User sites. NOTE: You have this option just if the User is a site role User, otherwise the User has permissions to all study's sites In manage User sites page you can add/remove sites from User privileges.","title":"Mange User sites"},{"location":"manage_users/#user-actions","text":"In User profile page you have ACTIONS green button. In these actions button you have a few actions options: Send create password - By clicking on this option you email the User with create a new password request. Login as this User - By clicking on this option you login to the system like you are this User. Modify password - By clicking on this option you can modify the User password.","title":"User actions"},{"location":"manage_users/#add-user","text":"To add User click on ADD USER green button in Users index page The User will be added to the selected study that appears in the title. NOTES: Email should be unique for each User. Role There are 3 optional roles: 2.1 Customer Admin - Administrator of the customer - who has all permissions of this account, like - create User, create site, build CRFs etc. 2.2 Study role - who has all study permissions - see, extract etc. all study data. 2.3 Site role - who has specific site/s permissions - add subject to his site, fill CRFs, see site's data etc. EDC Role - more specific role from Role (number 2), it's more relevant for customers that have EDC db. Click on SAVE green button. The User will get a Welcome message in their email.","title":"Add User"},{"location":"registration/","text":"Registration Welcome to FlaskData FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials. Audience Anyone in charge of running a clinical trial. Create a new account How to create a new account? It's so simple... Go to Registration Fill your properties and click CREATE AN ACCOUNT Welcome email will be sent to you. You're welcome to define your first study","title":"Registration"},{"location":"registration/#registration","text":"Welcome to FlaskData FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials.","title":"Registration"},{"location":"registration/#audience","text":"Anyone in charge of running a clinical trial.","title":"Audience"},{"location":"registration/#create-a-new-account","text":"How to create a new account? It's so simple... Go to Registration Fill your properties and click CREATE AN ACCOUNT Welcome email will be sent to you. You're welcome to define your first study","title":"Create a new account"}]}
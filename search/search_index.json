{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FlaskData Collect, Detect and Act FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials. The FlaskData platform provides real-time data collection and automated detection and response. An open API architecture fits easily into any digital health, digital therapeutics or eClinical software. Flask collects data from any combination of sources \u2013 investigators, patients, mobile, wearables, passive monitoring, connected medical devices and code. Collect provides you with desktop, mobile and RESTful Flask Data API services to collect data directly from patients, investigators and connected medical devices. Detect provides you with the capability to automated deviation monitoring of all your clinical data continuously. This is based on techniques used widely in cyber security \u2013 read more here about An attack modeling approach for monitoring clinical data Act provides you with the capability to automate response to patients and clinical operations teams with push notifications triggered by computed protocol compliance metrics over threshold. Read more about the Flaskdata software architecture here: Flaskdata software architecture white paper Introduction Learning objectives What is Flask Data ? Understand concepts Use basic functions Basic concepts Study \u2013 a clinical trial or research study. Site \u2013 hospital or clinic Study event \u2013 a visit of a study subject at a site during a study. A study event contains 1 or more eCRFs eCRF \u2013 electronic case report form. Item \u2013 a question on an eCRF User interface (UI) Web application that runs in your browser All modern browsers including Chrome and on Windows Windows, Linux and Mac Basic UI after login Top level status info with Change Site / Study To navigation bar Left side bar Body Plus(+)/minus(-) signs to expand/contract content Navigation buttons \u2013 Submit, Back etc\u2026 Roles \u2013 who can do what? Flask Role Customer Admin Role Study Role Site Role Users Subjects Studies Sites Forms design Forms data entry User profile Top line always shows User Name and Role Currently logged-in user and role Click on here at any time to access and change your User Profile \u2013 including changing your password. Logout Logout \u2013 use the logout button Don\u2019t just close the browser This will leave open sessions on the server and potentially cause problems","title":"Home"},{"location":"#flaskdata","text":"Collect, Detect and Act FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials. The FlaskData platform provides real-time data collection and automated detection and response. An open API architecture fits easily into any digital health, digital therapeutics or eClinical software. Flask collects data from any combination of sources \u2013 investigators, patients, mobile, wearables, passive monitoring, connected medical devices and code. Collect provides you with desktop, mobile and RESTful Flask Data API services to collect data directly from patients, investigators and connected medical devices. Detect provides you with the capability to automated deviation monitoring of all your clinical data continuously. This is based on techniques used widely in cyber security \u2013 read more here about An attack modeling approach for monitoring clinical data Act provides you with the capability to automate response to patients and clinical operations teams with push notifications triggered by computed protocol compliance metrics over threshold. Read more about the Flaskdata software architecture here: Flaskdata software architecture white paper","title":"FlaskData"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#learning-objectives","text":"What is Flask Data ? Understand concepts Use basic functions","title":"Learning objectives"},{"location":"#basic-concepts","text":"Study \u2013 a clinical trial or research study. Site \u2013 hospital or clinic Study event \u2013 a visit of a study subject at a site during a study. A study event contains 1 or more eCRFs eCRF \u2013 electronic case report form. Item \u2013 a question on an eCRF","title":"Basic concepts"},{"location":"#user-interface-ui","text":"Web application that runs in your browser All modern browsers including Chrome and on Windows Windows, Linux and Mac Basic UI after login Top level status info with Change Site / Study To navigation bar Left side bar Body Plus(+)/minus(-) signs to expand/contract content Navigation buttons \u2013 Submit, Back etc\u2026","title":"User interface (UI)"},{"location":"#roles-who-can-do-what","text":"Flask Role Customer Admin Role Study Role Site Role Users Subjects Studies Sites Forms design Forms data entry","title":"Roles \u2013 who can do what?"},{"location":"#user-profile","text":"Top line always shows User Name and Role Currently logged-in user and role Click on here at any time to access and change your User Profile \u2013 including changing your password.","title":"User profile"},{"location":"#logout","text":"Logout \u2013 use the logout button Don\u2019t just close the browser This will leave open sessions on the server and potentially cause problems","title":"Logout"},{"location":"api_introduction/","text":"API Introduction Audience Developers who want to use the Flask API. Concepts and terms A developer will need credentials to a User account with an API role. This User can be created by customer admin role. The API User has access to data of the customer account and EDC databases that defined in the study EDC dbname. There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io Each API environments has its own swagger UI - like https://api.flaskdata.io/swagger/ Select HTTPS in the Swagger Schemes dropdown before trying it out. For using FlaskData API by swagger you need to click on \"Try it out\" of the relevant API. Config/ change header and body request as needed and click on \"Execute\" button. ClinCapture EDC ClinCapture EDC is a database includes all study data (events, crfs, items, sites, subjects, data and etc.) Some studies use EDC data and UI to insert/update/delete/extract the study data. FlaskData and EDC are related, there are ETLs to load EDC data to FlaskData, FlaskData uses the data for analytics, alerts and etc. FlaskData APIs extract data from EDC. Flask Forms Flask Forms is a platform to save study CRFs data ( events, crfs, items and the data), This is a tool developed by FlaskData team, easy to use! Some studies use FlaskForms, The customer can build/ edit his study or FlaskData can do it for him. FlaskData and FlaskForms are related and there's a perfect User experience. FlaskData API extract data from FlaskForms data. Getting started API Authorization For using FlaskData APIs you need to get token first. For getting FlaskData token use auth/authorize API. For example - in development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON) you need to set your API User's email and password, like: { \"email\": \"xxx@gmail.com\", \"password\": \"12345678\" } In the response body you get an access token, like: { \"token\": \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\", \"expired\": \"2019-10-28T15:23:10.407Z\" } NOTE: The expired time is UTC time.","title":"API Introduction"},{"location":"api_introduction/#api-introduction","text":"","title":"API Introduction"},{"location":"api_introduction/#audience","text":"Developers who want to use the Flask API.","title":"Audience"},{"location":"api_introduction/#concepts-and-terms","text":"A developer will need credentials to a User account with an API role. This User can be created by customer admin role. The API User has access to data of the customer account and EDC databases that defined in the study EDC dbname. There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io Each API environments has its own swagger UI - like https://api.flaskdata.io/swagger/ Select HTTPS in the Swagger Schemes dropdown before trying it out. For using FlaskData API by swagger you need to click on \"Try it out\" of the relevant API. Config/ change header and body request as needed and click on \"Execute\" button.","title":"Concepts and terms"},{"location":"api_introduction/#clincapture-edc","text":"ClinCapture EDC is a database includes all study data (events, crfs, items, sites, subjects, data and etc.) Some studies use EDC data and UI to insert/update/delete/extract the study data. FlaskData and EDC are related, there are ETLs to load EDC data to FlaskData, FlaskData uses the data for analytics, alerts and etc. FlaskData APIs extract data from EDC.","title":"ClinCapture EDC"},{"location":"api_introduction/#flask-forms","text":"Flask Forms is a platform to save study CRFs data ( events, crfs, items and the data), This is a tool developed by FlaskData team, easy to use! Some studies use FlaskForms, The customer can build/ edit his study or FlaskData can do it for him. FlaskData and FlaskForms are related and there's a perfect User experience. FlaskData API extract data from FlaskForms data.","title":"Flask Forms"},{"location":"api_introduction/#getting-started-api","text":"","title":"Getting started API"},{"location":"api_introduction/#authorization","text":"For using FlaskData APIs you need to get token first. For getting FlaskData token use auth/authorize API. For example - in development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON) you need to set your API User's email and password, like: { \"email\": \"xxx@gmail.com\", \"password\": \"12345678\" } In the response body you get an access token, like: { \"token\": \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\", \"expired\": \"2019-10-28T15:23:10.407Z\" } NOTE: The expired time is UTC time.","title":"Authorization"},{"location":"apiflows/","text":"API flows The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to a ClinCapture EDC instance (extract EDC data etc.) Flask - APIs are related to Flas data (extract data, insert data etc.) NOTES: Authorization parameter in the header request should be the token you had get before from you authorization request . EDC parameter in the header request should be the EDC DB name. In this document there are a few examples of FlaskData APIs - There are more EDC APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com . EDC Extract EDC Data There are a few APIs you can use to extract your ClinCapture EDC data. For example: /edc/study/extract-data This API extract EDC data of each table/view/function (like functionName()) and return json. fromDate, toDate, sort, filters and inputVariables(if tableName is a function) are optional values. Filters and inputVariable json objects - the key is the column name/ input variable name in postgres, the json value is the compare value (like where site = XXX)/ input value in function (like schema.function(XXX)). For example: { \"tableName\": \"cc_event_data\", \"fromDate\": \"2017-01-01T00:00:00.000Z\", \"toDate\": \"2019-02-01T00:00:00.000Z\", \"sort\": \"subject\" } Another example: { \"tableName\": \"cross_event_crf_data\" } /edc/study/download-csvs-data This API downloads a zip folder includes EDC study data. Each csv is an event CRF data. /edc/study/extract-study-data-at-crf-level This API extracts EDC data at CRF level and returns the data as a json object. This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/study/extract-study-data-at-crf-level-to-csvs This API extracts EDC data at CRF level and returns a zip folder includes CSV files (each CRF as CSV file). This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/subjects/create-subject This API creates a subject in EDC DB and returns the study_subject_id value. Flask /flask/customer/extract-data-to-json This API extracts data from flask tables and views for your customer. The table/ view should have customer_id column for this process. For example: studies table, audit_user_login, billing_reports_customer and etc. studyIds and filters are optional. /flask/customer/download-billing-reports This API downloads a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. NOTE - This process will download files only if the billing reports features turn on in your customer account. /flask/device/get-logs This API returns device logs of a study. /flask/device/insert-log This API inserts device log into flaskData with correct study_id according to EDC. payload parameter is optional and can include each key value pairs. /flask/study/create-update-flask-study This API creates/updates study in FlaskData. /flask/site/create-update-flask-site This API creates/updates site in FlaskData. /flask/study/create-update-flask-study-users This API creates User if not exists and assigned Users to study. NOTE - This API deletes the Users that were assigned to this study and assigned the new Users. /flask/subject/extract-study-event-data-to-CSV This API extracts all study data (from FlaskForms) based on study id and download CSV files. /flask/crf/create-CRF-and-insert-data This API creates CRF in existing event and insert data Example - Creates a new AE (adverse event) CRF in existing event. /flask/crf/create-event-CRF-and-insert-data This API creates event and CRF and inserts data. Example - Creates a new Medication event with CRF and inserts data. /flask/crf/get-CRF-data-ids This API returns subject's crf data Id (unique for each CRF) for specific crf name. /flask/crf/update-CRF-data This API updates CRF data by crf data id. Use Cases NOTE: The following examples require jQuery later version General example of extract data using JS: var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json', type: 'POST', headers: { 'Authorization': jwt}, data: '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here }) .fail(function(error) { if(error) { // Enter your code here } }); Save data in CRF JS Example. Your study uses FlaskForms application. You have a mobile app and you want to collect data and save it to a Flask Forms Event/CRF This JS code is an example to create CRF and save its data into existing event. $(document).ready(function() { // Call insertDataIntoFlaskFormsCRF function to assign new CRF and save data. // Input values : User email, User password, study id, subject label, event name, CRF name, CRF data. insertDataIntoFlaskFormsCRF(\"mongositerole@clearclinica.com\", \"123456\", 145858, 'mongo_test_site_1-03', 'Screening', 'Subject properties', {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2}); }); var insertDataIntoFlaskFormsCRF = function(uEmail, uPass, studyId, subjectLabel, eventName, crfName, crfData){ // Get token getFlaskDataToken(uEmail, uPass, function(userToken){ var token = UserToken; // Create new CRF in existin event and insert data createCRFandInsertData(token, studyId, subjectLabel, eventName, crfName, crfData, function(crfDataId){ console.log(crfDataId); // Save this crfDataId if you will need to update this CRF data }); }); } var getFlaskDataToken = function(email, password, cb) { // Get JWT token var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/auth/authorize', type: 'POST', data: '{\"email\":\"' + email + '\",\"password\":\"' + password +'\"}', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.token); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to get token ' + error); } }); } // Create new CRF and insert data // /flask/crf/create-CRF-and-insert-data var createCRFandInsertData = function(token, study_id, subject_label, event_name, crf_name, crf_data, cb) { var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/crf/create-CRF-and-insert-data', type: 'POST', headers: { 'Authorization': token}, data: '{\"study_id\": '+study_id+',\"subject_label\": \"'+subject_label+'\",\"event_name\": \"'+event_name+'\",\"crf_name\": \"'+crf_name+'\",\"crf_data\": '+ JSON.stringify(crf_data) +' }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.crfDataId); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to create CRF and insert data :' + JSON.stringify(error)); } }); } Your application should call insertDataIntoFlaskFormsCRF function with the following input parameters: User email - Your customer API User email address for authorization. User password - Your customer API User password for authorization. studyId - Your study Id parameter, You can take it from study dashboard URL. Subject label - Subject label from flaskdata, for example: Event name for creating CRF, for example: CRF name for creating CRF, for example (in flask forms): CRF data - for saving CRF data, Json structure, key value pair, The key is the item's variable (as it's defined in flask forms) and the value is the data for this variable. for example: {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2} The output should be new CRF for the subject with the correct data, for example: Example of calling FlaskData API using jQuery older version var http = new XMLHttpRequest(); var url = 'https://dev-api.flaskdata.io/auth/authorize'; var params = '{\"email\":\"xxx@gmail.com\",\"password\":\"123456\"}'; http.open('POST', url, true); //Send the proper header information along with the request http.setRequestHeader('Content-type', 'application/json'); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 && http.status == 200) { alert(http.responseText); } } http.send(params);","title":"API Flows"},{"location":"apiflows/#api-flows","text":"The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to a ClinCapture EDC instance (extract EDC data etc.) Flask - APIs are related to Flas data (extract data, insert data etc.) NOTES: Authorization parameter in the header request should be the token you had get before from you authorization request . EDC parameter in the header request should be the EDC DB name. In this document there are a few examples of FlaskData APIs - There are more EDC APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com .","title":"API flows"},{"location":"apiflows/#edc","text":"","title":"EDC"},{"location":"apiflows/#extract-edc-data","text":"There are a few APIs you can use to extract your ClinCapture EDC data. For example:","title":"Extract EDC Data"},{"location":"apiflows/#edcstudyextract-data","text":"This API extract EDC data of each table/view/function (like functionName()) and return json. fromDate, toDate, sort, filters and inputVariables(if tableName is a function) are optional values. Filters and inputVariable json objects - the key is the column name/ input variable name in postgres, the json value is the compare value (like where site = XXX)/ input value in function (like schema.function(XXX)). For example: { \"tableName\": \"cc_event_data\", \"fromDate\": \"2017-01-01T00:00:00.000Z\", \"toDate\": \"2019-02-01T00:00:00.000Z\", \"sort\": \"subject\" } Another example: { \"tableName\": \"cross_event_crf_data\" }","title":"/edc/study/extract-data"},{"location":"apiflows/#edcstudydownload-csvs-data","text":"This API downloads a zip folder includes EDC study data. Each csv is an event CRF data.","title":"/edc/study/download-csvs-data"},{"location":"apiflows/#edcstudyextract-study-data-at-crf-level","text":"This API extracts EDC data at CRF level and returns the data as a json object. This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level"},{"location":"apiflows/#edcstudyextract-study-data-at-crf-level-to-csvs","text":"This API extracts EDC data at CRF level and returns a zip folder includes CSV files (each CRF as CSV file). This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level-to-csvs"},{"location":"apiflows/#edcsubjectscreate-subject","text":"This API creates a subject in EDC DB and returns the study_subject_id value.","title":"/edc/subjects/create-subject"},{"location":"apiflows/#flask","text":"","title":"Flask"},{"location":"apiflows/#flaskcustomerextract-data-to-json","text":"This API extracts data from flask tables and views for your customer. The table/ view should have customer_id column for this process. For example: studies table, audit_user_login, billing_reports_customer and etc. studyIds and filters are optional.","title":"/flask/customer/extract-data-to-json"},{"location":"apiflows/#flaskcustomerdownload-billing-reports","text":"This API downloads a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. NOTE - This process will download files only if the billing reports features turn on in your customer account.","title":"/flask/customer/download-billing-reports"},{"location":"apiflows/#flaskdeviceget-logs","text":"This API returns device logs of a study.","title":"/flask/device/get-logs"},{"location":"apiflows/#flaskdeviceinsert-log","text":"This API inserts device log into flaskData with correct study_id according to EDC. payload parameter is optional and can include each key value pairs.","title":"/flask/device/insert-log"},{"location":"apiflows/#flaskstudycreate-update-flask-study","text":"This API creates/updates study in FlaskData.","title":"/flask/study/create-update-flask-study"},{"location":"apiflows/#flasksitecreate-update-flask-site","text":"This API creates/updates site in FlaskData.","title":"/flask/site/create-update-flask-site"},{"location":"apiflows/#flaskstudycreate-update-flask-study-users","text":"This API creates User if not exists and assigned Users to study. NOTE - This API deletes the Users that were assigned to this study and assigned the new Users.","title":"/flask/study/create-update-flask-study-users"},{"location":"apiflows/#flasksubjectextract-study-event-data-to-csv","text":"This API extracts all study data (from FlaskForms) based on study id and download CSV files.","title":"/flask/subject/extract-study-event-data-to-CSV"},{"location":"apiflows/#flaskcrfcreate-crf-and-insert-data","text":"This API creates CRF in existing event and insert data Example - Creates a new AE (adverse event) CRF in existing event.","title":"/flask/crf/create-CRF-and-insert-data"},{"location":"apiflows/#flaskcrfcreate-event-crf-and-insert-data","text":"This API creates event and CRF and inserts data. Example - Creates a new Medication event with CRF and inserts data.","title":"/flask/crf/create-event-CRF-and-insert-data"},{"location":"apiflows/#flaskcrfget-crf-data-ids","text":"This API returns subject's crf data Id (unique for each CRF) for specific crf name.","title":"/flask/crf/get-CRF-data-ids"},{"location":"apiflows/#flaskcrfupdate-crf-data","text":"This API updates CRF data by crf data id.","title":"/flask/crf/update-CRF-data"},{"location":"apiflows/#use-cases","text":"NOTE: The following examples require jQuery later version","title":"Use Cases"},{"location":"apiflows/#general-example-of-extract-data-using-js","text":"var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json', type: 'POST', headers: { 'Authorization': jwt}, data: '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here }) .fail(function(error) { if(error) { // Enter your code here } });","title":"General example of extract data using JS:"},{"location":"apiflows/#save-data-in-crf-js-example","text":"Your study uses FlaskForms application. You have a mobile app and you want to collect data and save it to a Flask Forms Event/CRF This JS code is an example to create CRF and save its data into existing event. $(document).ready(function() { // Call insertDataIntoFlaskFormsCRF function to assign new CRF and save data. // Input values : User email, User password, study id, subject label, event name, CRF name, CRF data. insertDataIntoFlaskFormsCRF(\"mongositerole@clearclinica.com\", \"123456\", 145858, 'mongo_test_site_1-03', 'Screening', 'Subject properties', {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2}); }); var insertDataIntoFlaskFormsCRF = function(uEmail, uPass, studyId, subjectLabel, eventName, crfName, crfData){ // Get token getFlaskDataToken(uEmail, uPass, function(userToken){ var token = UserToken; // Create new CRF in existin event and insert data createCRFandInsertData(token, studyId, subjectLabel, eventName, crfName, crfData, function(crfDataId){ console.log(crfDataId); // Save this crfDataId if you will need to update this CRF data }); }); } var getFlaskDataToken = function(email, password, cb) { // Get JWT token var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/auth/authorize', type: 'POST', data: '{\"email\":\"' + email + '\",\"password\":\"' + password +'\"}', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.token); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to get token ' + error); } }); } // Create new CRF and insert data // /flask/crf/create-CRF-and-insert-data var createCRFandInsertData = function(token, study_id, subject_label, event_name, crf_name, crf_data, cb) { var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/crf/create-CRF-and-insert-data', type: 'POST', headers: { 'Authorization': token}, data: '{\"study_id\": '+study_id+',\"subject_label\": \"'+subject_label+'\",\"event_name\": \"'+event_name+'\",\"crf_name\": \"'+crf_name+'\",\"crf_data\": '+ JSON.stringify(crf_data) +' }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.crfDataId); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to create CRF and insert data :' + JSON.stringify(error)); } }); } Your application should call insertDataIntoFlaskFormsCRF function with the following input parameters: User email - Your customer API User email address for authorization. User password - Your customer API User password for authorization. studyId - Your study Id parameter, You can take it from study dashboard URL. Subject label - Subject label from flaskdata, for example: Event name for creating CRF, for example: CRF name for creating CRF, for example (in flask forms): CRF data - for saving CRF data, Json structure, key value pair, The key is the item's variable (as it's defined in flask forms) and the value is the data for this variable. for example: {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2} The output should be new CRF for the subject with the correct data, for example:","title":"Save data in CRF JS Example."},{"location":"apiflows/#example-of-calling-flaskdata-api-using-jquery-older-version","text":"var http = new XMLHttpRequest(); var url = 'https://dev-api.flaskdata.io/auth/authorize'; var params = '{\"email\":\"xxx@gmail.com\",\"password\":\"123456\"}'; http.open('POST', url, true); //Send the proper header information along with the request http.setRequestHeader('Content-type', 'application/json'); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 && http.status == 200) { alert(http.responseText); } } http.send(params);","title":"Example of calling FlaskData API using jQuery older version"},{"location":"extras/","text":"Alert Definitions In Flask Forms you can create alert definitions for your study. Add Alerts Definition In order to add alert definition click on ADD ALERT DEFINITION green button. There are few properties of alert definition: Message - the message of the alert, this message will appear in this alert email. Expiration Date - optional field, if this alert definition has end date. Send email to subject - select it If this alert definition requires to send email to subject about this alert. SMS Message - this message will appear in this alert SMS (if Send SMS to subject is marked) Trigger Time - optional field, time of alert generation. If this field is empty - alert will generate in real time. Send SMS to subject - select it If this alert definition requires to send SMS to subject about this alert. Expression - see Expression Alert Definition Actions - which action to do with this alert. see Expression Alert Language Flask Alert Language was designed to provide the ability for users to create rules to find the errors, missing data, or critical values in the subject's data. This language is based on the CRF items variables. When the CRF was created each item of this CRF gets a unique variable that looks like \"ITEM_AT_NAME_2WOMR\". In the future, each answer of the subject will be marked with this variable and stored in the DB. To find the errors, missing data, or critical values in the subject's data you need to create the expression close to the JavaScript programming language. If this expression will return true - you will get the alert. In current implementation you can use the simple expressions like $SOME_VARIABLE == '0' , or expressions with functions like count($SOME_VARIABLE) == '0' or filter($SOME_VARIABLE) == '0' . Also, you can combine these expressions using logical operators like && (AND) or || (OR). Examples: $SOME_VARIABLE == '0' && count($ELSE_ONE_VARIABLE) > '0' $SOME_VARIABLE != 'some string value' || $ELSE_ONE_VARIABLE >= '0' filter($SOME_VARIABLE) <= '4' && count($ELSE_ONE_VARIABLE) != '5' Logical operator !(NOT) also supporting in the current implementation Examples: !($SOME_VARIABLE == '5') && count($ELSE_ONE_VARIABLE) > '0' !($SOME_VARIABLE == 'some string value') Functions Count count(variable, period) - this is the general syntax of count function. The count function will return the number of records in the DB marked with this variable. The count function receives the two arguments: variable - the unique variable of the CRF item. period(not required) - the time period for filtering the subject's data by date of creating the record. The value of the period parameter must be the string that looks like 24 hours You can use the following time units: milliseconds seconds minutes hours days weeks months years Usage examples: count($ELSE_ONE_VARIABLE) - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time count($ELSE_ONE_VARIABLE, '24 hours') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours count($ELSE_ONE_VARIABLE, '7 days') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last week So, if you need to check did some subject fill some CRF during of 24 hours you can use the following expression: count($ELSE_ONE_VARIABLE, '24 hours') == '0'; In this case, if some subject didn't fill the CRF that contains an item with the current variable during 24 hours the function count($ELSE_ONE_VARIABLE, '24 hours') will return 0. The entire expression count($ELSE_ONE_VARIABLE, '24 hours') == '0' will return true and you will get the alert. Filter filter(variable, period, value, take) - this is the general syntax of the filter function. The filter function will return the number of records in the DB marked with this variable. The count function receives the two arguments: variable - the unique variable of the CRF item. period(not required) - the time period for filtering the subject's data by the date of creating the record. value(not required) - the expression that will be used for filtering by the value that a record contains take(not required) - the expression that will be used to get the part of the records array The period parameter works similarly to the period parameter in the count function. The value of the value parameter must be the string that looks like >2 , yes , ==5 You can use the following operators: == != >= <= > < Examples: ==2 some string value >=5 NOTE: the expression ==2 and 2 or ==yes and yes are equals! The value of the take parameter must be the string that looks like '-1' , '1' , '5' The take parameter provides the ability to get the part of records from the records array. Examples: '1' - The first event '2' - The first 2 events '-1' - The last event '-4' - The last 4 events NOTE: the records that receive from the DB ordered by date created. The order of the filters appling is following filtering by variable filtering by period filtering by 'take' filtering by 'value' NOTE: if you don't need to use some parameter you can set null instead. Usage examples: filter($ELSE_ONE_VARIABLE) - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time filter($ELSE_ONE_VARIABLE, '24 hours') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours filter($ELSE_ONE_VARIABLE, '24 hours', '>=5') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours that contains the value more or equal '5' filter($ELSE_ONE_VARIABLE, null, '>=5') - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time that contains the value more or equal '5' filter($ELSE_ONE_VARIABLE, null, '>=5', '2') - at first, will find all records with variable $ELSE_ONE_VARIABLE for the all-time. The next step - will receive the first 2 members of this array. Finally - will return the number of the records from the array that received in step two that contains the value more or equal to '5' So, if you need to check did some subject has some critical value in his data during of 24 hours you can use the following expression: filter($ELSE_ONE_VARIABLE, '24 hours', '>10') > '0'; In this case, if some subject entered this critical value in the CRF that contains an item with the current variable during 24 hours the function filter($ELSE_ONE_VARIABLE, '24 hours', '>10') will return some value that will be more than 0. The entire expression filter($ELSE_ONE_VARIABLE, '24 hours', '>10') > '0' will return true, and you will get the alert. Simple expressions In current implementation you can use the simple expressions like $SOME_VARIABLE == '0' . In this case this expression will be replaced to filter($SOME_VARIABLE, null, '== 0') != 0 Examples: Input Output $SOME_VARIABLE == '0' filter($SOME_VARIABLE, null, '== 0') != 0 $SOME_VARIABLE filter($SOME_VARIABLE, null, null) != 0 $SOME_VARIABLE == '3'&& $ELSE_ONE_VARIABLE > '2' filter($SOME_VARIABLE, null, '== 3') != 0 && filter($ELSE_ONE_VARIABLE, null, '>2') != 0 Alert Action You can define a few actions to alert definition by ADD ACTION green button. Each action has a few properties: Action Type - Send Email/SMS if there is alert. Expired Period - If alert will be expired after a period of its generation. Expired Period Units - seconds/ minutes/ days etc. Action recipient - email or phone number that will get an email/SMS about this alert. Study Alerts If there are alerts of your study you can see a red bell in Forms near the hamburger. To see alerts list - click on Study Alerts in hamburger menu. You can filter the alerts list. You can change status/ delete each alert in the list.","title":"Extras"},{"location":"extras/#alert-definitions","text":"In Flask Forms you can create alert definitions for your study.","title":"Alert Definitions"},{"location":"extras/#add-alerts-definition","text":"In order to add alert definition click on ADD ALERT DEFINITION green button. There are few properties of alert definition: Message - the message of the alert, this message will appear in this alert email. Expiration Date - optional field, if this alert definition has end date. Send email to subject - select it If this alert definition requires to send email to subject about this alert. SMS Message - this message will appear in this alert SMS (if Send SMS to subject is marked) Trigger Time - optional field, time of alert generation. If this field is empty - alert will generate in real time. Send SMS to subject - select it If this alert definition requires to send SMS to subject about this alert. Expression - see Expression Alert Definition Actions - which action to do with this alert. see Expression","title":"Add Alerts Definition"},{"location":"extras/#alert-language","text":"Flask Alert Language was designed to provide the ability for users to create rules to find the errors, missing data, or critical values in the subject's data. This language is based on the CRF items variables. When the CRF was created each item of this CRF gets a unique variable that looks like \"ITEM_AT_NAME_2WOMR\". In the future, each answer of the subject will be marked with this variable and stored in the DB. To find the errors, missing data, or critical values in the subject's data you need to create the expression close to the JavaScript programming language. If this expression will return true - you will get the alert. In current implementation you can use the simple expressions like $SOME_VARIABLE == '0' , or expressions with functions like count($SOME_VARIABLE) == '0' or filter($SOME_VARIABLE) == '0' . Also, you can combine these expressions using logical operators like && (AND) or || (OR). Examples: $SOME_VARIABLE == '0' && count($ELSE_ONE_VARIABLE) > '0' $SOME_VARIABLE != 'some string value' || $ELSE_ONE_VARIABLE >= '0' filter($SOME_VARIABLE) <= '4' && count($ELSE_ONE_VARIABLE) != '5' Logical operator !(NOT) also supporting in the current implementation Examples: !($SOME_VARIABLE == '5') && count($ELSE_ONE_VARIABLE) > '0' !($SOME_VARIABLE == 'some string value')","title":"Alert Language"},{"location":"extras/#functions","text":"","title":"Functions"},{"location":"extras/#count","text":"count(variable, period) - this is the general syntax of count function. The count function will return the number of records in the DB marked with this variable. The count function receives the two arguments: variable - the unique variable of the CRF item. period(not required) - the time period for filtering the subject's data by date of creating the record. The value of the period parameter must be the string that looks like 24 hours You can use the following time units: milliseconds seconds minutes hours days weeks months years Usage examples: count($ELSE_ONE_VARIABLE) - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time count($ELSE_ONE_VARIABLE, '24 hours') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours count($ELSE_ONE_VARIABLE, '7 days') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last week So, if you need to check did some subject fill some CRF during of 24 hours you can use the following expression: count($ELSE_ONE_VARIABLE, '24 hours') == '0'; In this case, if some subject didn't fill the CRF that contains an item with the current variable during 24 hours the function count($ELSE_ONE_VARIABLE, '24 hours') will return 0. The entire expression count($ELSE_ONE_VARIABLE, '24 hours') == '0' will return true and you will get the alert.","title":"Count"},{"location":"extras/#filter","text":"filter(variable, period, value, take) - this is the general syntax of the filter function. The filter function will return the number of records in the DB marked with this variable. The count function receives the two arguments: variable - the unique variable of the CRF item. period(not required) - the time period for filtering the subject's data by the date of creating the record. value(not required) - the expression that will be used for filtering by the value that a record contains take(not required) - the expression that will be used to get the part of the records array The period parameter works similarly to the period parameter in the count function. The value of the value parameter must be the string that looks like >2 , yes , ==5 You can use the following operators: == != >= <= > < Examples: ==2 some string value >=5 NOTE: the expression ==2 and 2 or ==yes and yes are equals! The value of the take parameter must be the string that looks like '-1' , '1' , '5' The take parameter provides the ability to get the part of records from the records array. Examples: '1' - The first event '2' - The first 2 events '-1' - The last event '-4' - The last 4 events NOTE: the records that receive from the DB ordered by date created. The order of the filters appling is following filtering by variable filtering by period filtering by 'take' filtering by 'value' NOTE: if you don't need to use some parameter you can set null instead. Usage examples: filter($ELSE_ONE_VARIABLE) - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time filter($ELSE_ONE_VARIABLE, '24 hours') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours filter($ELSE_ONE_VARIABLE, '24 hours', '>=5') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours that contains the value more or equal '5' filter($ELSE_ONE_VARIABLE, null, '>=5') - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time that contains the value more or equal '5' filter($ELSE_ONE_VARIABLE, null, '>=5', '2') - at first, will find all records with variable $ELSE_ONE_VARIABLE for the all-time. The next step - will receive the first 2 members of this array. Finally - will return the number of the records from the array that received in step two that contains the value more or equal to '5' So, if you need to check did some subject has some critical value in his data during of 24 hours you can use the following expression: filter($ELSE_ONE_VARIABLE, '24 hours', '>10') > '0'; In this case, if some subject entered this critical value in the CRF that contains an item with the current variable during 24 hours the function filter($ELSE_ONE_VARIABLE, '24 hours', '>10') will return some value that will be more than 0. The entire expression filter($ELSE_ONE_VARIABLE, '24 hours', '>10') > '0' will return true, and you will get the alert.","title":"Filter"},{"location":"extras/#simple-expressions","text":"In current implementation you can use the simple expressions like $SOME_VARIABLE == '0' . In this case this expression will be replaced to filter($SOME_VARIABLE, null, '== 0') != 0 Examples: Input Output $SOME_VARIABLE == '0' filter($SOME_VARIABLE, null, '== 0') != 0 $SOME_VARIABLE filter($SOME_VARIABLE, null, null) != 0 $SOME_VARIABLE == '3'&& $ELSE_ONE_VARIABLE > '2' filter($SOME_VARIABLE, null, '== 3') != 0 && filter($ELSE_ONE_VARIABLE, null, '>2') != 0","title":"Simple expressions"},{"location":"extras/#alert-action","text":"You can define a few actions to alert definition by ADD ACTION green button. Each action has a few properties: Action Type - Send Email/SMS if there is alert. Expired Period - If alert will be expired after a period of its generation. Expired Period Units - seconds/ minutes/ days etc. Action recipient - email or phone number that will get an email/SMS about this alert.","title":"Alert Action"},{"location":"extras/#study-alerts","text":"If there are alerts of your study you can see a red bell in Forms near the hamburger. To see alerts list - click on Study Alerts in hamburger menu. You can filter the alerts list. You can change status/ delete each alert in the list.","title":"Study Alerts"},{"location":"first_study/","text":"Define your study After signing up, the system will create your first study called default-XXX . Study Edit To edit the study - check it, in ACTIONS click on Edit option. In edit study window you can define your study profile, definitions and etc. NOTES: Database and EDC URL fields are related to EDC db, if you have EDC (ClinCapture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB). Study subject prefix : Prefix of creation subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the profile study will be opened. Study Profile In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments. NOTE: In comments card you can record free text annotations about your study. In Study Profile page you have ACTIONS green button with manage Users and manage sites options. Study manage Users In Manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcoma emails will be sent to Users' emails. Study manage sites In Manage sites page you can add/remove site from this study. To add a new site to study - you need create the site first. Type any part of the site's name in the Select sites box and choose the relevant site. Click NEXT STEP","title":"First Study"},{"location":"first_study/#define-your-study","text":"After signing up, the system will create your first study called default-XXX .","title":"Define your study"},{"location":"first_study/#study-edit","text":"To edit the study - check it, in ACTIONS click on Edit option. In edit study window you can define your study profile, definitions and etc. NOTES: Database and EDC URL fields are related to EDC db, if you have EDC (ClinCapture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB). Study subject prefix : Prefix of creation subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the profile study will be opened.","title":"Study Edit"},{"location":"first_study/#study-profile","text":"In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments.","title":"Study Profile"},{"location":"first_study/#_1","text":"NOTE: In comments card you can record free text annotations about your study.","title":""},{"location":"first_study/#_2","text":"In Study Profile page you have ACTIONS green button with manage Users and manage sites options.","title":""},{"location":"first_study/#study-manage-users","text":"In Manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcoma emails will be sent to Users' emails.","title":"Study manage Users"},{"location":"first_study/#study-manage-sites","text":"In Manage sites page you can add/remove site from this study. To add a new site to study - you need create the site first. Type any part of the site's name in the Select sites box and choose the relevant site. Click NEXT STEP","title":"Study manage sites"},{"location":"manage_data/","text":"Manage Data Entering Data Learning Objectives Understand data entry controls Enter, save, edit data Mark CRF complete View Audit history Add subject Site CRC and PI roles can add subjects. Study role- Administrator can not add new subjects For additional information how to add subject link. Scheduling events Events can be scheduled before data entry Scheduling an event simply means entering the (planned) start date of that event for that subject. You can schedule a number of events at once, or just schedule them when you wish to start data entry for the eCRFs.","title":"Manage data"},{"location":"manage_data/#manage-data","text":"","title":"Manage Data"},{"location":"manage_data/#entering-data","text":"","title":"Entering Data"},{"location":"manage_data/#learning-objectives","text":"Understand data entry controls Enter, save, edit data Mark CRF complete View Audit history","title":"Learning Objectives"},{"location":"manage_data/#add-subject","text":"Site CRC and PI roles can add subjects. Study role- Administrator can not add new subjects For additional information how to add subject link.","title":"Add subject"},{"location":"manage_data/#scheduling-events","text":"Events can be scheduled before data entry Scheduling an event simply means entering the (planned) start date of that event for that subject. You can schedule a number of events at once, or just schedule them when you wish to start data entry for the eCRFs.","title":"Scheduling events"},{"location":"manage_forms/","text":"Manage Forms In the left menu bar click on FORMS. What is Flask Forms? Flask Forms is an online eSource app Forms features unlimited subjects, forms and data. You can create the eCRFs yourself using a super friendly interface. Includes a library of ready-to-go eCRF templates. Runs on desktops, notebooks, tablets and phones. Build your eSource app In Forms page you can define the study's CRFs, Events , Pro and Alert rules. CRFS In order to create a new CRF click on ADD CRF green button CRF Properties In CRF card you need to define the CRF properties (You can also edit it after the saving). * Queries status - Turn on/off CRF queries option (See manage queries ). When CRF queries is Turn on - each item in this CRF has queries dialog - add query by click on the question mark. Layout - Layout of CRF, There are several layouts: Default (question after question vertically) Grid Cards on grid Columns - If the layout is grid or Cards on grid choose the number of fields in each row. Name - CRF name Description - CRF Description Click YES to create this CRF Layout examples: Default layout Grid layout Cards on grid layout CRF Sections In Section card define CRF's section, You can also edit it after the saving. (One CRF can include more than one section) Name Description You can add sections to CRF by click on ADD SECTION button CRF Items You can define items in each CRF. By click on component the component is added to the CRF (in the end of the list) After adding item you should define the new item properties by click on EDIT option Edit CRF Item By click on EDIT button of item an Edit card is opened. Labels In the first tab LABELS you should define item's name, description etc. Value Second tab is VALUE you can set a default value to this item Validations The third tab is Validation , each component has another validation options. For example - number component has the following validation tab: Required, Disabled and Confirm parameters exist in each component. Required - Check it if this item is a mandatory. Disabled - Check it if this item is disabled - the user cannot change/edit it Confirm - This item popup a confirm dialog card. Branching Logic The fourth tab is the Branching Logic , In this tab you can write a simple logic for this item. Branching logic expression for this item To use the autocomplete service, type \"$\" and select the variable of interest for you. Use variables to make expression for hide current form control. The terminal supports any JavaScript expressions for the value of the available form variables. For example: $ITEM_IMPORTANT_VAR == 'string_var_value' For example - Show/Hide method. Item that depends on another item. A radio button item has 2 options - Man or Female (required question) If user check female -> Another item 'Number of children' is opened. For do it - you need to create the basic item (man/female) first, Then save it by click on SAVE button in the top of the page. By save option the system generates variables to the CRF items, and you can use them for the branching logic. After you saved items CRF you can add branching logic to 'Number of children' item, Go to Hide/Show item branching logic and write your logic. CRF Actions There are a few available actions for each CRF. In CRFS tab there is an ACTIONS blue button with the following options: PREVIEW - By a click on PREVIEW option - a new window is opened with this CRF layout Edit CRF - Edit CRF Properties Edit ITEMS - Edit CRF Items DUPLICATE CRF - By click on this option a new CRF is created same as this CRF (with the same properties, sections and items) Notice: The CRF OID and items' variable are different. DELETE - Delete this CRF Export CSV There is EXPORT CSV green button. By click on this button you download a zip folder with all CRF data. One CSV file for each CRF. Event Definitions In order to manage study events, click on EVENT DEFINITIONS tab. Create event by click on ADD EVENT DEFINITION green button There are a few properties of event: Name - the display name of this event Attached CRF list - CRFs in this event. ADD CRF green button to add CRF in this event one more time add option in this event's CRF to add additional this CRF in this event Render 'Finish' on last form only Finish button will be appeared in the last CRF of this event (instead of appear in each CRF - by default) Attached Rules list, You can create rules and add them to this event. Event rule generates an error when CRC save the event with error. Click SAVE blue button to save your changes OR BACK TO LIST / CLEAR CHANGES to unsave your changes. Event Definition Actions There are a few available actions for each Event. Edit event definition - to edit this event (add CRF, delete CRF etc.) Delete - Delete this event. Study Schedules This tab is related to study PRO. If your study has PRO for patients (subjects link) To define PRO/s for study you need to create study schedule There are a few definitions of study schedule: Name - Name of this Study Schedule Periods - Study periods, Add periods by click on ADD PERIOD blue button Period Length - Period length in days Name - the name of this period Description - description of this period Allow expanding this period - continue this period until another period begin to the subject. For randomized subjects - Begin this period for randomized subject (CRC should define it to each subject) Event Definitions - Define the event to this period PRO Click on Event Definitions, Event Definitions list will be opened, choose one event. Click on ADD EVENT DEFINITIONS green button (You can add a few events). The selected event will be added to the list with Scheduled time and Scheduled days. Scheduled time You can choose the time of available this event to PRO of subject Scheduled days You can choose the days of this PRO event. By default, Scheduled time is 10:00 and Scheduled days are all the days of week. Save you Study Schedule by click on SAVE button Alert Definitions See Alert Definitions Languages You can switch between languages by click on Languages tab and select the desired language. Studies In the last option in the top bar you can switch between your studies and manage forms to each one of them. (In case you have several studies). Hamburger The last item in the top bar is the \"Hamburger\" By standing with the mouse on the hamburger a list of options opens. Signed in as - The login user (It's you ) Study Alerts - Open study alerts list Database Audit Log - Open the data audit log (create/update/delete CRF/Events/Data etc.) Restore Study CRFs - Put backup of study CRFs and restore it here (in the current study) NOTE - Restore study CRFs restores json file. Create a dump of study CRFs Create a backup of this study's CRFs. NOTE - You can create a dump includes/excludes events definitions, You can dump a few CRFs you choose. This option downloads CRFsDump.zip folder includes json file. Extract the file to restore it. Logout - Logout from FlaskData NOTE to return to flask application click on FlaskData logo","title":"Manage Forms"},{"location":"manage_forms/#manage-forms","text":"In the left menu bar click on FORMS.","title":"Manage Forms"},{"location":"manage_forms/#what-is-flask-forms","text":"Flask Forms is an online eSource app Forms features unlimited subjects, forms and data. You can create the eCRFs yourself using a super friendly interface. Includes a library of ready-to-go eCRF templates. Runs on desktops, notebooks, tablets and phones.","title":"What is Flask Forms?"},{"location":"manage_forms/#build-your-esource-app","text":"In Forms page you can define the study's CRFs, Events , Pro and Alert rules.","title":"Build your eSource app"},{"location":"manage_forms/#crfs","text":"In order to create a new CRF click on ADD CRF green button","title":"CRFS"},{"location":"manage_forms/#crf-properties","text":"In CRF card you need to define the CRF properties (You can also edit it after the saving). * Queries status - Turn on/off CRF queries option (See manage queries ). When CRF queries is Turn on - each item in this CRF has queries dialog - add query by click on the question mark. Layout - Layout of CRF, There are several layouts: Default (question after question vertically) Grid Cards on grid Columns - If the layout is grid or Cards on grid choose the number of fields in each row. Name - CRF name Description - CRF Description Click YES to create this CRF","title":"CRF Properties"},{"location":"manage_forms/#layout-examples","text":"Default layout Grid layout Cards on grid layout","title":"Layout examples:"},{"location":"manage_forms/#crf-sections","text":"In Section card define CRF's section, You can also edit it after the saving. (One CRF can include more than one section) Name Description You can add sections to CRF by click on ADD SECTION button","title":"CRF Sections"},{"location":"manage_forms/#crf-items","text":"You can define items in each CRF. By click on component the component is added to the CRF (in the end of the list) After adding item you should define the new item properties by click on EDIT option","title":"CRF Items"},{"location":"manage_forms/#edit-crf-item","text":"By click on EDIT button of item an Edit card is opened.","title":"Edit CRF Item"},{"location":"manage_forms/#labels","text":"In the first tab LABELS you should define item's name, description etc.","title":"Labels"},{"location":"manage_forms/#value","text":"Second tab is VALUE you can set a default value to this item","title":"Value"},{"location":"manage_forms/#validations","text":"The third tab is Validation , each component has another validation options. For example - number component has the following validation tab: Required, Disabled and Confirm parameters exist in each component. Required - Check it if this item is a mandatory. Disabled - Check it if this item is disabled - the user cannot change/edit it Confirm - This item popup a confirm dialog card.","title":"Validations"},{"location":"manage_forms/#branching-logic","text":"The fourth tab is the Branching Logic , In this tab you can write a simple logic for this item. Branching logic expression for this item To use the autocomplete service, type \"$\" and select the variable of interest for you. Use variables to make expression for hide current form control. The terminal supports any JavaScript expressions for the value of the available form variables. For example: $ITEM_IMPORTANT_VAR == 'string_var_value' For example - Show/Hide method. Item that depends on another item. A radio button item has 2 options - Man or Female (required question) If user check female -> Another item 'Number of children' is opened. For do it - you need to create the basic item (man/female) first, Then save it by click on SAVE button in the top of the page. By save option the system generates variables to the CRF items, and you can use them for the branching logic. After you saved items CRF you can add branching logic to 'Number of children' item, Go to Hide/Show item branching logic and write your logic.","title":"Branching Logic"},{"location":"manage_forms/#crf-actions","text":"There are a few available actions for each CRF. In CRFS tab there is an ACTIONS blue button with the following options: PREVIEW - By a click on PREVIEW option - a new window is opened with this CRF layout Edit CRF - Edit CRF Properties Edit ITEMS - Edit CRF Items DUPLICATE CRF - By click on this option a new CRF is created same as this CRF (with the same properties, sections and items) Notice: The CRF OID and items' variable are different. DELETE - Delete this CRF","title":"CRF Actions"},{"location":"manage_forms/#export-csv","text":"There is EXPORT CSV green button. By click on this button you download a zip folder with all CRF data. One CSV file for each CRF.","title":"Export CSV"},{"location":"manage_forms/#event-definitions","text":"In order to manage study events, click on EVENT DEFINITIONS tab. Create event by click on ADD EVENT DEFINITION green button There are a few properties of event: Name - the display name of this event Attached CRF list - CRFs in this event. ADD CRF green button to add CRF in this event one more time add option in this event's CRF to add additional this CRF in this event Render 'Finish' on last form only Finish button will be appeared in the last CRF of this event (instead of appear in each CRF - by default) Attached Rules list, You can create rules and add them to this event. Event rule generates an error when CRC save the event with error. Click SAVE blue button to save your changes OR BACK TO LIST / CLEAR CHANGES to unsave your changes.","title":"Event Definitions"},{"location":"manage_forms/#event-definition-actions","text":"There are a few available actions for each Event. Edit event definition - to edit this event (add CRF, delete CRF etc.) Delete - Delete this event.","title":"Event Definition Actions"},{"location":"manage_forms/#study-schedules","text":"This tab is related to study PRO. If your study has PRO for patients (subjects link) To define PRO/s for study you need to create study schedule There are a few definitions of study schedule: Name - Name of this Study Schedule Periods - Study periods, Add periods by click on ADD PERIOD blue button Period Length - Period length in days Name - the name of this period Description - description of this period Allow expanding this period - continue this period until another period begin to the subject. For randomized subjects - Begin this period for randomized subject (CRC should define it to each subject) Event Definitions - Define the event to this period PRO Click on Event Definitions, Event Definitions list will be opened, choose one event. Click on ADD EVENT DEFINITIONS green button (You can add a few events). The selected event will be added to the list with Scheduled time and Scheduled days. Scheduled time You can choose the time of available this event to PRO of subject Scheduled days You can choose the days of this PRO event. By default, Scheduled time is 10:00 and Scheduled days are all the days of week. Save you Study Schedule by click on SAVE button","title":"Study Schedules"},{"location":"manage_forms/#alert-definitions","text":"See Alert Definitions","title":"Alert Definitions"},{"location":"manage_forms/#languages","text":"You can switch between languages by click on Languages tab and select the desired language.","title":"Languages"},{"location":"manage_forms/#studies","text":"In the last option in the top bar you can switch between your studies and manage forms to each one of them. (In case you have several studies).","title":"Studies"},{"location":"manage_forms/#hamburger","text":"The last item in the top bar is the \"Hamburger\" By standing with the mouse on the hamburger a list of options opens. Signed in as - The login user (It's you ) Study Alerts - Open study alerts list Database Audit Log - Open the data audit log (create/update/delete CRF/Events/Data etc.) Restore Study CRFs - Put backup of study CRFs and restore it here (in the current study) NOTE - Restore study CRFs restores json file. Create a dump of study CRFs Create a backup of this study's CRFs. NOTE - You can create a dump includes/excludes events definitions, You can dump a few CRFs you choose. This option downloads CRFsDump.zip folder includes json file. Extract the file to restore it. Logout - Logout from FlaskData NOTE to return to flask application click on FlaskData logo","title":"Hamburger"},{"location":"manage_queries/","text":"Manage Queries In the left menu bar click on Queries. In this page - Queries index you can see all queries data of this study. You can filter Queries by sites, subject and status and then click APPLY","title":"Manage Queries"},{"location":"manage_queries/#manage-queries","text":"In the left menu bar click on Queries. In this page - Queries index you can see all queries data of this study. You can filter Queries by sites, subject and status and then click APPLY","title":"Manage Queries"},{"location":"manage_sites/","text":"Manage Sites In order to manage research sites, click on Sites in the left bar. Default site By default, you have one site assigned to your study, called Default-Site-XXX Edit the default site by ACTIONS -> EDIT Edit Site In the Edit option you can edit your site properties. Click SAVE green button to save your site properties. Site Profile In Site Profile you can see your site's definition, add comments, and mange this site's Users by click on ACTIONS -> Manage Users Mange Users In Site Manage Users you can remove/add existing User to this site (if you don't have the User, go to create it ) You can add a User by typing any part of his name - the application will show you a list of matching User names. Click on invite green button Now you have a site with Users (like - CRC, PI) in your study. Add a new site In the Sites index page you can add new sites to your study. To add site click on ADD SITE button Enter the site properties and save it by click on SAVE green button.","title":"Manage Sites"},{"location":"manage_sites/#manage-sites","text":"In order to manage research sites, click on Sites in the left bar.","title":"Manage Sites"},{"location":"manage_sites/#default-site","text":"By default, you have one site assigned to your study, called Default-Site-XXX Edit the default site by ACTIONS -> EDIT","title":"Default site"},{"location":"manage_sites/#edit-site","text":"In the Edit option you can edit your site properties. Click SAVE green button to save your site properties.","title":"Edit Site"},{"location":"manage_sites/#site-profile","text":"In Site Profile you can see your site's definition, add comments, and mange this site's Users by click on ACTIONS -> Manage Users","title":"Site Profile"},{"location":"manage_sites/#mange-users","text":"In Site Manage Users you can remove/add existing User to this site (if you don't have the User, go to create it ) You can add a User by typing any part of his name - the application will show you a list of matching User names. Click on invite green button Now you have a site with Users (like - CRC, PI) in your study.","title":"Mange Users"},{"location":"manage_sites/#add-a-new-site","text":"In the Sites index page you can add new sites to your study. To add site click on ADD SITE button Enter the site properties and save it by click on SAVE green button.","title":"Add a new site"},{"location":"manage_studies/","text":"Studies You can run a few studies in parallel. You can add/edit your studies properties, Users, sites etc. Add study To add studies go to studies index page by clicking on studies in the left bar. Click on ADD STUDY green button. Fill your study properties and click SAVE mange Users page will be opened. NOTES: Database and EDC URL fields are related to EDC db, if you have EDC (clin capture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB). Study manage Users In manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcome emails will be sent to Users' emails. The Manage Sites page will be opened. Study manage sites In manage sites page you can add/remove site from this study. To add a new site to your study - click on Create Site first. Type any part of the site name in the Select sites box and pick the site you want to add to your study. Click NEXT STEP Study Edit In the Studies index page you can edit your study. To edit your study - check it and then click on the green ACTIONS button and choose the Edit option. In the Edit Study page you can define your study profile, definitions etc. NOTES: Study subject prefix : Prefix for automatically creating a subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the Study Profile will be opened. Study Profile In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments. There is a Comments card that you can write all free text comments about your study. There is an ACTIONS green button with Manage Users and Manage Sites options.","title":"Manage Studies"},{"location":"manage_studies/#studies","text":"You can run a few studies in parallel. You can add/edit your studies properties, Users, sites etc.","title":"Studies"},{"location":"manage_studies/#add-study","text":"To add studies go to studies index page by clicking on studies in the left bar. Click on ADD STUDY green button. Fill your study properties and click SAVE mange Users page will be opened. NOTES: Database and EDC URL fields are related to EDC db, if you have EDC (clin capture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB).","title":"Add study"},{"location":"manage_studies/#study-manage-users","text":"In manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcome emails will be sent to Users' emails. The Manage Sites page will be opened.","title":"Study manage Users"},{"location":"manage_studies/#study-manage-sites","text":"In manage sites page you can add/remove site from this study. To add a new site to your study - click on Create Site first. Type any part of the site name in the Select sites box and pick the site you want to add to your study. Click NEXT STEP","title":"Study manage sites"},{"location":"manage_studies/#study-edit","text":"In the Studies index page you can edit your study. To edit your study - check it and then click on the green ACTIONS button and choose the Edit option. In the Edit Study page you can define your study profile, definitions etc. NOTES: Study subject prefix : Prefix for automatically creating a subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the Study Profile will be opened.","title":"Study Edit"},{"location":"manage_studies/#study-profile","text":"In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments. There is a Comments card that you can write all free text comments about your study. There is an ACTIONS green button with Manage Users and Manage Sites options.","title":"Study Profile"},{"location":"manage_subjects/","text":"Manage Subjects In the left menu bar click on Subjects. In this page - Subjects index you can see study subjects and their CRFs data. You can filter Subjects by site, or what you want by the Search filter and then click APPLY","title":"Manage Subjects"},{"location":"manage_subjects/#manage-subjects","text":"In the left menu bar click on Subjects. In this page - Subjects index you can see study subjects and their CRFs data. You can filter Subjects by site, or what you want by the Search filter and then click APPLY","title":"Manage Subjects"},{"location":"manage_users/","text":"Manage Users In the left menu bar click on Users. In this page - Users index you can add Users to your study, edit Users, assign User to site etc. You can filter Users by study, site or what you want by the Search filter and then click APPLY Default Users By default, you have 4 Users assigned to your study: 1.Customer admin User - This is your User! 2.CRC Default - CRC User 3.PI Default - PI User 4.CRA Default - CRA User Each default User has another permissions. Edit User Edit the default Users to your right Users one by one, by ACTIONS -> EDIT option Profile In the User profile page there is a pencil icon in the right corner of Profile card , click on it in order to edit the User properties. After you create a new User or modify their email, you can send them an email to create password by clicking on Send create password You don't have to do it - your Users can log in with their Google account. NOTES: In edit User Profile action you can change a few User's parameters Role There are 3 roles Customer Admin - User has all customer permissions - add/edit studis, Users, sites, alerts and etc. Study Role - User has study permissions - to see all study data (of all the sites) Site Role - User has site level permissions - to see his site data, add subject to his site, create events and crfs to subject. Form designer : define if User has Forms permissions - add/edit/delete Events and CRFs from the system (by default only customer admin Users can do it). Subscribe to Alerts : define if ths User will get alerts from this study (according to alert rules). Studies In Studies card you can see the User's studies Sites In Sites card you can see the User's sites (if the User is study role or customer admin he can see al study's sites) Comments In Comments card you can add comments about this User. Write your comments and click on ADD COMMENT button Mange User sites In User profile page you have an option to manage User sites. NOTE: You have this option just if the User is a site role User, otherwise the User has permissions to all study's sites In manage User sites page you can add/remove sites from User privileges. User actions In User profile page you have ACTIONS green button. In these actions button you have a few actions options: Send create password - By clicking on this option you email the User with create a new password request. Login as this User - By clicking on this option you login to the system like you are this User. Modify password - By clicking on this option you can modify the User password. Add User To add User click on ADD USER green button in Users index page The User will be added to the selected study that appears in the title. NOTES: Email should be unique for each User. Role There are 3 optional roles: 2.1 Customer Admin - Administrator of the customer - who has all permissions of this account, like - create User, create site, build CRFs etc. 2.2 Study role - who has all study permissions - see, extract etc. all study data. 2.3 Site role - who has specific site/s permissions - add subject to his site, fill CRFs, see site's data etc. EDC Role - more specific role from Role (number 2), it's more relevant for customers that have EDC db. Click on SAVE green button. The User will get a Welcome message in their email.","title":"Manage Users"},{"location":"manage_users/#manage-users","text":"In the left menu bar click on Users. In this page - Users index you can add Users to your study, edit Users, assign User to site etc. You can filter Users by study, site or what you want by the Search filter and then click APPLY","title":"Manage Users"},{"location":"manage_users/#default-users","text":"By default, you have 4 Users assigned to your study: 1.Customer admin User - This is your User! 2.CRC Default - CRC User 3.PI Default - PI User 4.CRA Default - CRA User Each default User has another permissions.","title":"Default Users"},{"location":"manage_users/#edit-user","text":"Edit the default Users to your right Users one by one, by ACTIONS -> EDIT option","title":"Edit User"},{"location":"manage_users/#profile","text":"In the User profile page there is a pencil icon in the right corner of Profile card , click on it in order to edit the User properties. After you create a new User or modify their email, you can send them an email to create password by clicking on Send create password You don't have to do it - your Users can log in with their Google account. NOTES: In edit User Profile action you can change a few User's parameters Role There are 3 roles Customer Admin - User has all customer permissions - add/edit studis, Users, sites, alerts and etc. Study Role - User has study permissions - to see all study data (of all the sites) Site Role - User has site level permissions - to see his site data, add subject to his site, create events and crfs to subject. Form designer : define if User has Forms permissions - add/edit/delete Events and CRFs from the system (by default only customer admin Users can do it). Subscribe to Alerts : define if ths User will get alerts from this study (according to alert rules).","title":"Profile"},{"location":"manage_users/#studies","text":"In Studies card you can see the User's studies","title":"Studies"},{"location":"manage_users/#sites","text":"In Sites card you can see the User's sites (if the User is study role or customer admin he can see al study's sites)","title":"Sites"},{"location":"manage_users/#comments","text":"In Comments card you can add comments about this User. Write your comments and click on ADD COMMENT button","title":"Comments"},{"location":"manage_users/#mange-user-sites","text":"In User profile page you have an option to manage User sites. NOTE: You have this option just if the User is a site role User, otherwise the User has permissions to all study's sites In manage User sites page you can add/remove sites from User privileges.","title":"Mange User sites"},{"location":"manage_users/#user-actions","text":"In User profile page you have ACTIONS green button. In these actions button you have a few actions options: Send create password - By clicking on this option you email the User with create a new password request. Login as this User - By clicking on this option you login to the system like you are this User. Modify password - By clicking on this option you can modify the User password.","title":"User actions"},{"location":"manage_users/#add-user","text":"To add User click on ADD USER green button in Users index page The User will be added to the selected study that appears in the title. NOTES: Email should be unique for each User. Role There are 3 optional roles: 2.1 Customer Admin - Administrator of the customer - who has all permissions of this account, like - create User, create site, build CRFs etc. 2.2 Study role - who has all study permissions - see, extract etc. all study data. 2.3 Site role - who has specific site/s permissions - add subject to his site, fill CRFs, see site's data etc. EDC Role - more specific role from Role (number 2), it's more relevant for customers that have EDC db. Click on SAVE green button. The User will get a Welcome message in their email.","title":"Add User"},{"location":"registration/","text":"Registration Welcome to FlaskData FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials. Audience Anyone in charge of running a clinical trial. Create a new account How to create a new account? It's so simple... Go to Registration Fill your properties and click CREATE AN ACCOUNT Welcome email will be sent to you. You're welcome to define your first study","title":"Registration"},{"location":"registration/#registration","text":"Welcome to FlaskData FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials.","title":"Registration"},{"location":"registration/#audience","text":"Anyone in charge of running a clinical trial.","title":"Audience"},{"location":"registration/#create-a-new-account","text":"How to create a new account? It's so simple... Go to Registration Fill your properties and click CREATE AN ACCOUNT Welcome email will be sent to you. You're welcome to define your first study","title":"Create a new account"}]}
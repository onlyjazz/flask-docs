{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"API Introduction Audience Developers who want to use the Flask API to collect and extract data. Concepts and terms The user should have API permissions - An API user that defined by FlaskData team. This API user has access to get data of his customer and EDC DBs that defined in his studies' EDC (dbname). There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io All the API environments have swagger UI. Swagger Schemes should be HTTPS. For using FlaskData API by swagger you need to click on \"Try it out\" of the relevant API. Config/ change header and body request as needed and click on \"Execute\" button. ClinCapture EDC ClinCapture EDC is a database includes all study data (events, crfs, items, sites, subjects, data and etc.) Some studies use EDC data and UI to insert/update/delete/extract the study data. FlaskData and EDC are related, there are ETLs to load EDC data to FlaskData, FlaskData uses the data for analytics, alerts and etc. FlaskData APIs extract data from EDC. Flask Forms Flask Forms is a platform to save study CRFs data ( events, crfs, items and the data), This is a tool developed by FlaskData team, easy to use! Some studies use FlaskForms, The customer can build/ edit his study or FlaskData can do it for him. FlaskData and FlaskForms are related and there's a perfect user experience. FlaskData API extract data from FlaskForms data. Getting started API Authorization For using FlaskData APIs you need to get token first. For getting FlaskData token use auth/authorize API. For example - in development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON) you need to set your API user's email and password, like: { \"email\": \"xxx@gmail.com\", \"password\": \"12345678\" } In the response body you get an access token, like: { \"token\": \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\", \"expired\": \"2019-10-28T15:23:10.407Z\" } NOTE: The expired time is UTC time.","title":"API Introduction"},{"location":"#api-introduction","text":"","title":"API Introduction"},{"location":"#audience","text":"Developers who want to use the Flask API to collect and extract data.","title":"Audience"},{"location":"#concepts-and-terms","text":"The user should have API permissions - An API user that defined by FlaskData team. This API user has access to get data of his customer and EDC DBs that defined in his studies' EDC (dbname). There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io All the API environments have swagger UI. Swagger Schemes should be HTTPS. For using FlaskData API by swagger you need to click on \"Try it out\" of the relevant API. Config/ change header and body request as needed and click on \"Execute\" button.","title":"Concepts and terms"},{"location":"#clincapture-edc","text":"ClinCapture EDC is a database includes all study data (events, crfs, items, sites, subjects, data and etc.) Some studies use EDC data and UI to insert/update/delete/extract the study data. FlaskData and EDC are related, there are ETLs to load EDC data to FlaskData, FlaskData uses the data for analytics, alerts and etc. FlaskData APIs extract data from EDC.","title":"ClinCapture EDC"},{"location":"#flask-forms","text":"Flask Forms is a platform to save study CRFs data ( events, crfs, items and the data), This is a tool developed by FlaskData team, easy to use! Some studies use FlaskForms, The customer can build/ edit his study or FlaskData can do it for him. FlaskData and FlaskForms are related and there's a perfect user experience. FlaskData API extract data from FlaskForms data.","title":"Flask Forms"},{"location":"#getting-started-api","text":"","title":"Getting started API"},{"location":"#authorization","text":"For using FlaskData APIs you need to get token first. For getting FlaskData token use auth/authorize API. For example - in development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON) you need to set your API user's email and password, like: { \"email\": \"xxx@gmail.com\", \"password\": \"12345678\" } In the response body you get an access token, like: { \"token\": \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\", \"expired\": \"2019-10-28T15:23:10.407Z\" } NOTE: The expired time is UTC time.","title":"Authorization"},{"location":"apiflows/","text":"API flows The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to ClinCapture EDC (extract EDC data and etc.) Flask - APIs are related to flask data (extract data, insert data and etc.) NOTES: Authorization parameter in the header request should be the token you had get before from you authorization request . EDC parameter in the header request should be the EDC DB name. In this document there are a few examples of FlaskData APIs - There are more EDC APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com . EDC Extract EDC Data There are a few APIs you can use to extract your ClinCapture EDC data. For example: /edc/study/extract-data This API extract EDC data of each table/view/function (like functionName()) and return json. fromDate, toDate, sort, filters and inputVariables(if tableName is a function) are optional values. Filters and inputVariable json objects - the key is the column name/ input variable name in postgres, the json value is the compare value (like where site = XXX)/ input value in function (like schema.function(XXX)). For example: { \"tableName\": \"cc_event_data\", \"fromDate\": \"2017-01-01T00:00:00.000Z\", \"toDate\": \"2019-02-01T00:00:00.000Z\", \"sort\": \"subject\" } Another example: { \"tableName\": \"cross_event_crf_data\" } /edc/study/download-csvs-data This API download a zip folder includes EDC study data. Each csv is an event CRF data. /edc/study/extract-study-data-at-crf-level This API extract EDC data at CRF level and return the data as a json object. This API return only CRFs with data. This API have filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/study/extract-study-data-at-crf-level-to-csvs This API extract EDC data at CRF level and return a zip folder includes CSV files (each CRF as CSV file). This API return only CRFs with data. This API have filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/subjects/create-subject This API create a subject in EDC DB and return the study_subject_id value. Flask /flask/customer/extract-data-to-json This API extract data from flask tables and views for your customer. The table/ view should have customer_id column for this process. For example: studies table, audit_user_login, billing_reports_customer and etc. studyIds and filters are optional. /flask/customer/download-billing-reports This API download a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. NOTE - This process will download files only if the billing reports features turn on in your customer account. /flask/device/get-logs This API returns device logs of a study. /flask/device/insert-log This API inserts device log into flaskData with correct study_id according to EDC. payload parameter is optional and can include each key value pairs. /flask/study/create-update-flask-study This API creates/updates study in FlaskData. /flask/site/create-update-flask-site This API creates/updates site in FlaskData. /flask/study/create-update-flask-study-users This API create user if not exists and assigned users to study. NOTE - This API delete the users that were assigned to this study and assigned the new users. /flask/subject/extract-study-event-data-to-CSV This API extract all study data (from FlaskForms) based on study id and download CSV files. /flask/crf/create-CRF-and-insert-data This API create CRF in existing event and insert data Example - Create a new AE (adverse event) CRF in existing event. /flask/crf/create-event-CRF-and-insert-data This API create event and CRF and insert data. Example - Create a new Medication event with CRF and insert data. /flask/crf/get-CRF-data-ids This API returns subject's crf data Id (unique for each CRF) for specific crf name. /flask/crf/update-CRF-data This API updates CRF data by crf data id. /flask/crf/create-CRF-and-insert-data This API Create CRF in existing event and insert data Use Cases NOTE: The following examples require jQuery later version General example of extract data using JS: var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json', type: 'POST', headers: { 'Authorization': jwt}, data: '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here }) .fail(function(error) { if(error) { // Enter your code here } }); Save data in CRF JS Example. Your study uses FlaskForms application. You have a mobile app and you want to collect data and save it to a Flask Forms Event/CRF This JS code is an example to create CRF and save its data into existing event. $(document).ready(function() { // Call insertDataIntoFlaskFormsCRF function to assign new CRF and save data. // Input values : user email, user password, study id, subject label, event name, CRF name, CRF data. insertDataIntoFlaskFormsCRF(\"mongositerole@clearclinica.com\", \"123456\", 145858, 'mongo_test_site_1-03', 'Screening', 'Subject properties', {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2}); }); var insertDataIntoFlaskFormsCRF = function(uEmail, uPass, studyId, subjectLabel, eventName, crfName, crfData){ // Get token getFlaskDataToken(uEmail, uPass, function(userToken){ var token = userToken; // Create new CRF in existin event and insert data createCRFandInsertData(token, studyId, subjectLabel, eventName, crfName, crfData, function(crfDataId){ console.log(crfDataId); // Save this crfDataId if you will need to update this CRF data }); }); } var getFlaskDataToken = function(email, password, cb) { // Get JWT token var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/auth/authorize', type: 'POST', data: '{\"email\":\"' + email + '\",\"password\":\"' + password +'\"}', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.token); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to get token ' + error); } }); } // Create new CRF and insert data // /flask/crf/create-CRF-and-insert-data var createCRFandInsertData = function(token, study_id, subject_label, event_name, crf_name, crf_data, cb) { var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/crf/create-CRF-and-insert-data', type: 'POST', headers: { 'Authorization': token}, data: '{\"study_id\": '+study_id+',\"subject_label\": \"'+subject_label+'\",\"event_name\": \"'+event_name+'\",\"crf_name\": \"'+crf_name+'\",\"crf_data\": '+ JSON.stringify(crf_data) +' }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.crfDataId); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to create CRF and insert data :' + JSON.stringify(error)); } }); } Your application should call insertDataIntoFlaskFormsCRF function with the following input parameters: user email - Your customer API user email address for authorization. user password - Your customer API user password for authorization. studyId - Your study Id parameter, You can take it from study dashboard URL. Subject label - Subject label from flaskdata, for example: Event name for creating CRF, for example: CRF name for creating CRF, for example (in flask forms): CRF data - for saving CRF data, Json structure, key value pair, The key is the item's variable (as it's defined in flask forms) and the value is the data for this variable. for example: {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2} The output should be new CRF for the subject with the correct data, for example: Example of calling FlaskData API using jQuery older version var http = new XMLHttpRequest(); var url = 'https://dev-api.flaskdata.io/auth/authorize'; var params = '{\"email\":\"xxx@gmail.com\",\"password\":\"123456\"}'; http.open('POST', url, true); //Send the proper header information along with the request http.setRequestHeader('Content-type', 'application/json'); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 && http.status == 200) { alert(http.responseText); } } http.send(params);","title":"API flows"},{"location":"apiflows/#api-flows","text":"The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to ClinCapture EDC (extract EDC data and etc.) Flask - APIs are related to flask data (extract data, insert data and etc.) NOTES: Authorization parameter in the header request should be the token you had get before from you authorization request . EDC parameter in the header request should be the EDC DB name. In this document there are a few examples of FlaskData APIs - There are more EDC APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com .","title":"API flows"},{"location":"apiflows/#edc","text":"","title":"EDC"},{"location":"apiflows/#extract-edc-data","text":"There are a few APIs you can use to extract your ClinCapture EDC data. For example:","title":"Extract EDC Data"},{"location":"apiflows/#edcstudyextract-data","text":"This API extract EDC data of each table/view/function (like functionName()) and return json. fromDate, toDate, sort, filters and inputVariables(if tableName is a function) are optional values. Filters and inputVariable json objects - the key is the column name/ input variable name in postgres, the json value is the compare value (like where site = XXX)/ input value in function (like schema.function(XXX)). For example: { \"tableName\": \"cc_event_data\", \"fromDate\": \"2017-01-01T00:00:00.000Z\", \"toDate\": \"2019-02-01T00:00:00.000Z\", \"sort\": \"subject\" } Another example: { \"tableName\": \"cross_event_crf_data\" }","title":"/edc/study/extract-data"},{"location":"apiflows/#edcstudydownload-csvs-data","text":"This API download a zip folder includes EDC study data. Each csv is an event CRF data.","title":"/edc/study/download-csvs-data"},{"location":"apiflows/#edcstudyextract-study-data-at-crf-level","text":"This API extract EDC data at CRF level and return the data as a json object. This API return only CRFs with data. This API have filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level"},{"location":"apiflows/#edcstudyextract-study-data-at-crf-level-to-csvs","text":"This API extract EDC data at CRF level and return a zip folder includes CSV files (each CRF as CSV file). This API return only CRFs with data. This API have filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level-to-csvs"},{"location":"apiflows/#edcsubjectscreate-subject","text":"This API create a subject in EDC DB and return the study_subject_id value.","title":"/edc/subjects/create-subject"},{"location":"apiflows/#flask","text":"","title":"Flask"},{"location":"apiflows/#flaskcustomerextract-data-to-json","text":"This API extract data from flask tables and views for your customer. The table/ view should have customer_id column for this process. For example: studies table, audit_user_login, billing_reports_customer and etc. studyIds and filters are optional.","title":"/flask/customer/extract-data-to-json"},{"location":"apiflows/#flaskcustomerdownload-billing-reports","text":"This API download a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. NOTE - This process will download files only if the billing reports features turn on in your customer account.","title":"/flask/customer/download-billing-reports"},{"location":"apiflows/#flaskdeviceget-logs","text":"This API returns device logs of a study.","title":"/flask/device/get-logs"},{"location":"apiflows/#flaskdeviceinsert-log","text":"This API inserts device log into flaskData with correct study_id according to EDC. payload parameter is optional and can include each key value pairs.","title":"/flask/device/insert-log"},{"location":"apiflows/#flaskstudycreate-update-flask-study","text":"This API creates/updates study in FlaskData.","title":"/flask/study/create-update-flask-study"},{"location":"apiflows/#flasksitecreate-update-flask-site","text":"This API creates/updates site in FlaskData.","title":"/flask/site/create-update-flask-site"},{"location":"apiflows/#flaskstudycreate-update-flask-study-users","text":"This API create user if not exists and assigned users to study. NOTE - This API delete the users that were assigned to this study and assigned the new users.","title":"/flask/study/create-update-flask-study-users"},{"location":"apiflows/#flasksubjectextract-study-event-data-to-csv","text":"This API extract all study data (from FlaskForms) based on study id and download CSV files.","title":"/flask/subject/extract-study-event-data-to-CSV"},{"location":"apiflows/#flaskcrfcreate-crf-and-insert-data","text":"This API create CRF in existing event and insert data Example - Create a new AE (adverse event) CRF in existing event.","title":"/flask/crf/create-CRF-and-insert-data"},{"location":"apiflows/#flaskcrfcreate-event-crf-and-insert-data","text":"This API create event and CRF and insert data. Example - Create a new Medication event with CRF and insert data.","title":"/flask/crf/create-event-CRF-and-insert-data"},{"location":"apiflows/#flaskcrfget-crf-data-ids","text":"This API returns subject's crf data Id (unique for each CRF) for specific crf name.","title":"/flask/crf/get-CRF-data-ids"},{"location":"apiflows/#flaskcrfupdate-crf-data","text":"This API updates CRF data by crf data id.","title":"/flask/crf/update-CRF-data"},{"location":"apiflows/#flaskcrfcreate-crf-and-insert-data_1","text":"This API Create CRF in existing event and insert data","title":"/flask/crf/create-CRF-and-insert-data"},{"location":"apiflows/#use-cases","text":"NOTE: The following examples require jQuery later version","title":"Use Cases"},{"location":"apiflows/#general-example-of-extract-data-using-js","text":"var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json', type: 'POST', headers: { 'Authorization': jwt}, data: '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here }) .fail(function(error) { if(error) { // Enter your code here } });","title":"General example of extract data using JS:"},{"location":"apiflows/#save-data-in-crf-js-example","text":"Your study uses FlaskForms application. You have a mobile app and you want to collect data and save it to a Flask Forms Event/CRF This JS code is an example to create CRF and save its data into existing event. $(document).ready(function() { // Call insertDataIntoFlaskFormsCRF function to assign new CRF and save data. // Input values : user email, user password, study id, subject label, event name, CRF name, CRF data. insertDataIntoFlaskFormsCRF(\"mongositerole@clearclinica.com\", \"123456\", 145858, 'mongo_test_site_1-03', 'Screening', 'Subject properties', {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2}); }); var insertDataIntoFlaskFormsCRF = function(uEmail, uPass, studyId, subjectLabel, eventName, crfName, crfData){ // Get token getFlaskDataToken(uEmail, uPass, function(userToken){ var token = userToken; // Create new CRF in existin event and insert data createCRFandInsertData(token, studyId, subjectLabel, eventName, crfName, crfData, function(crfDataId){ console.log(crfDataId); // Save this crfDataId if you will need to update this CRF data }); }); } var getFlaskDataToken = function(email, password, cb) { // Get JWT token var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/auth/authorize', type: 'POST', data: '{\"email\":\"' + email + '\",\"password\":\"' + password +'\"}', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.token); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to get token ' + error); } }); } // Create new CRF and insert data // /flask/crf/create-CRF-and-insert-data var createCRFandInsertData = function(token, study_id, subject_label, event_name, crf_name, crf_data, cb) { var xhrcall = $.ajax({ url: 'https://dev-api.flaskdata.io/flask/crf/create-CRF-and-insert-data', type: 'POST', headers: { 'Authorization': token}, data: '{\"study_id\": '+study_id+',\"subject_label\": \"'+subject_label+'\",\"event_name\": \"'+event_name+'\",\"crf_name\": \"'+crf_name+'\",\"crf_data\": '+ JSON.stringify(crf_data) +' }', contentType: 'application/json' }); //promise syntax to render after xhr completes xhrcall .done(function(data){ // Enter your code here cb(data.crfDataId); }) .fail(function(error) { if(error) { // Enter your code here console.log('Failed to create CRF and insert data :' + JSON.stringify(error)); } }); } Your application should call insertDataIntoFlaskFormsCRF function with the following input parameters: user email - Your customer API user email address for authorization. user password - Your customer API user password for authorization. studyId - Your study Id parameter, You can take it from study dashboard URL. Subject label - Subject label from flaskdata, for example: Event name for creating CRF, for example: CRF name for creating CRF, for example (in flask forms): CRF data - for saving CRF data, Json structure, key value pair, The key is the item's variable (as it's defined in flask forms) and the value is the data for this variable. for example: {\"ITEM_SP_AGE_WR6NP\":30, \"ITEM_SP_MANWOMAN_HDNAO\":2} The output should be new CRF for the subject with the correct data, for example:","title":"Save data in CRF JS Example."},{"location":"apiflows/#example-of-calling-flaskdata-api-using-jquery-older-version","text":"var http = new XMLHttpRequest(); var url = 'https://dev-api.flaskdata.io/auth/authorize'; var params = '{\"email\":\"xxx@gmail.com\",\"password\":\"123456\"}'; http.open('POST', url, true); //Send the proper header information along with the request http.setRequestHeader('Content-type', 'application/json'); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 && http.status == 200) { alert(http.responseText); } } http.send(params);","title":"Example of calling FlaskData API using jQuery older version"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FlaskData Collect, Detect and Act FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials. The FlaskData platform provides real-time data collection and automated detection and response. An open API architecture fits easily into any digital health, digital therapeutics or eClinical software. Flask collects data from any combination of sources \u2013 investigators, patients, mobile, wearables, passive monitoring, connected medical devices and code. Collect provides you with desktop, mobile and RESTful Flask Data API services to collect data directly from patients, investigators and connected medical devices. Detect provides you with the capability to automated deviation monitoring of all your clinical data continuously. This is based on techniques used widely in cyber security \u2013 read more here about An attack modeling approach for monitoring clinical data Act provides you with the capability to automate response to patients and clinical operations teams with push notifications triggered by computed protocol compliance metrics over threshold. Read more about the Flaskdata software architecture here: Flaskdata software architecture white paper Introduction Learning objectives What is Flask Data ? Understand concepts Use basic functions Basic concepts Study \u2013 a clinical trial or research study. Site \u2013 hospital or clinic Study event \u2013 a visit of a study subject at a site during a study. A study event contains 1 or more eCRFs eCRF \u2013 electronic case report form. Item \u2013 a question on an eCRF User interface (UI) Web application that runs in your browser All modern browsers including Chrome and on Windows Windows, Linux and Mac Basic UI after login Top level status info with Change Site / Study To navigation bar Left side bar Body Plus(+)/minus(-) signs to expand/contract content Navigation buttons \u2013 Submit, Back etc\u2026 Roles \u2013 who can do what? Flask Role Customer Admin Role Study Role Site Role Users Subjects Studies Sites Forms design Forms data entry User profile Top line always shows User Name and Role Currently logged-in user and role Click on here at any time to access and change your User Profile \u2013 including changing your password. Change password Change password allows you to change your password when you want, Just click on Change password option, a reset password email will send to you. Request support If you need support from us, click on this option. A request support page will be opened. Write your request, you can upload file. Please detail your request as much as possible Every effort will be made to get back to you soon. Logout Logout \u2013 use the logout button Don\u2019t just close the browser This will leave open sessions on the server and potentially cause problems Languages You can change your app language, by press on the languages' symbol. FlaskData Logo Clicking on FlaskData logo opens Study Dashboard page.","title":"Home"},{"location":"#flaskdata","text":"Collect, Detect and Act FlaskData is a cloud API platform to collect and monitor clinical data. FlaskData helps you achieve high levels of protocol compliance and save time and money by automating the manual work of compliance monitoring in clinical trials. The FlaskData platform provides real-time data collection and automated detection and response. An open API architecture fits easily into any digital health, digital therapeutics or eClinical software. Flask collects data from any combination of sources \u2013 investigators, patients, mobile, wearables, passive monitoring, connected medical devices and code. Collect provides you with desktop, mobile and RESTful Flask Data API services to collect data directly from patients, investigators and connected medical devices. Detect provides you with the capability to automated deviation monitoring of all your clinical data continuously. This is based on techniques used widely in cyber security \u2013 read more here about An attack modeling approach for monitoring clinical data Act provides you with the capability to automate response to patients and clinical operations teams with push notifications triggered by computed protocol compliance metrics over threshold. Read more about the Flaskdata software architecture here: Flaskdata software architecture white paper","title":"FlaskData"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#learning-objectives","text":"What is Flask Data ? Understand concepts Use basic functions","title":"Learning objectives"},{"location":"#basic-concepts","text":"Study \u2013 a clinical trial or research study. Site \u2013 hospital or clinic Study event \u2013 a visit of a study subject at a site during a study. A study event contains 1 or more eCRFs eCRF \u2013 electronic case report form. Item \u2013 a question on an eCRF","title":"Basic concepts"},{"location":"#user-interface-ui","text":"Web application that runs in your browser All modern browsers including Chrome and on Windows Windows, Linux and Mac Basic UI after login Top level status info with Change Site / Study To navigation bar Left side bar Body Plus(+)/minus(-) signs to expand/contract content Navigation buttons \u2013 Submit, Back etc\u2026","title":"User interface (UI)"},{"location":"#roles-who-can-do-what","text":"Flask Role Customer Admin Role Study Role Site Role Users Subjects Studies Sites Forms design Forms data entry","title":"Roles \u2013 who can do what?"},{"location":"#user-profile","text":"Top line always shows User Name and Role Currently logged-in user and role Click on here at any time to access and change your User Profile \u2013 including changing your password.","title":"User profile"},{"location":"#change-password","text":"Change password allows you to change your password when you want, Just click on Change password option, a reset password email will send to you.","title":"Change password"},{"location":"#request-support","text":"If you need support from us, click on this option. A request support page will be opened. Write your request, you can upload file. Please detail your request as much as possible Every effort will be made to get back to you soon.","title":"Request support"},{"location":"#logout","text":"Logout \u2013 use the logout button Don\u2019t just close the browser This will leave open sessions on the server and potentially cause problems","title":"Logout"},{"location":"#languages","text":"You can change your app language, by press on the languages' symbol.","title":"Languages"},{"location":"#flaskdata-logo","text":"Clicking on FlaskData logo opens Study Dashboard page.","title":"FlaskData Logo"},{"location":"api_introduction/","text":"API Introduction Audience Developers who want to use the Flask API. Concepts and terms A developer will need credentials to a User account with an API role. This User can be created by customer admin role. The API User has access to data of the customer account and EDC databases that defined in the study EDC dbname. There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io Each API environments has its own swagger UI - like https://api.flaskdata.io/swagger/ Select HTTPS in the Swagger Schemes dropdown before trying it out. For using FlaskData API by swagger you need to click on \"Try it out\" of the relevant API. Config/ change header and body request as needed and click on \"Execute\" button. EDC ClinCapture EDC is a 21 CFR Part 11 compliant EDC system that is integrated into Flask Collect. The ClinCapture database uses a standard clinical trial data model (Events (aka Visits), CRF, Items, Sites, Subjects, Queries, SDV, Audit log and data extracts) Users and sites management is performed using the FlaskData UX; the FlaskData API updates/inserts entities into the ClinCapture PostgreSQL database. There are 3 paths for data capture: 1. Direct data capture to EDC Direct data capture in ClinCapture or data entry from paper source (the traditional way of doing things). eSource with Flask Forms expand inline update to EDC You can design CRFs using Forms - site coordinators (and patients using the Flask ePRO app). Forms will update the EDC inline and synchronize CRF fields/metadata and item values. Direct data capture with Flask Forms Automated ETL processes extract data to Flask Detect and Act for analytics and alerts, or you can use FlaskData APIs to extract / insert data in JSON format on demand, for your own analytics processing. Flask Forms eSource Flask Forms is an eSource platform that includes a visual Forms designer. A CRF you design in Forms is designed once and can be rendered on Desktop or Mobile for a native Android app. You can use the FlaskData API to extract and insert Forms data. Getting started API Authorization In order to use the FlaskData APIs you need to first get aa JWT token with the auth/authorize API. Example in development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON) you need to set your API User's email and password, like: { \"email\" : \"xxx@gmail.com\" , \"password\" : \"12345678\" } In the response body you get an access token, like: { \"token\" : \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\" , \"expired\" : \"2019-10-28T15:23:10.407Z\" } Info The expired time is UTC time. Additional Urls There are additional swaggers for additional functionality. Date Server By Data server APIs you can get Forms data in csv/json format with include/exclude criteria. api.flaskdata.io/data-server FlaskData Features By Features APIs you can process a few additional flaskdata features, like create subject etc. api.flaskdata.io/features Alerts Server By Alerts Server APIs you enable to run functions related to alerts definitions api.flaskdata.io/alerts-server","title":"API Introduction"},{"location":"api_introduction/#api-introduction","text":"","title":"API Introduction"},{"location":"api_introduction/#audience","text":"Developers who want to use the Flask API.","title":"Audience"},{"location":"api_introduction/#concepts-and-terms","text":"A developer will need credentials to a User account with an API role. This User can be created by customer admin role. The API User has access to data of the customer account and EDC databases that defined in the study EDC dbname. There are 3 FlaskData API environments: development environment : dev-api.flaskdata.io staging environment : staging-api.flaskdata.io production environment : api.flaskdata.io Each API environments has its own swagger UI - like https://api.flaskdata.io/swagger/ Select HTTPS in the Swagger Schemes dropdown before trying it out. For using FlaskData API by swagger you need to click on \"Try it out\" of the relevant API. Config/ change header and body request as needed and click on \"Execute\" button.","title":"Concepts and terms"},{"location":"api_introduction/#edc","text":"ClinCapture EDC is a 21 CFR Part 11 compliant EDC system that is integrated into Flask Collect. The ClinCapture database uses a standard clinical trial data model (Events (aka Visits), CRF, Items, Sites, Subjects, Queries, SDV, Audit log and data extracts) Users and sites management is performed using the FlaskData UX; the FlaskData API updates/inserts entities into the ClinCapture PostgreSQL database. There are 3 paths for data capture: 1. Direct data capture to EDC Direct data capture in ClinCapture or data entry from paper source (the traditional way of doing things). eSource with Flask Forms expand inline update to EDC You can design CRFs using Forms - site coordinators (and patients using the Flask ePRO app). Forms will update the EDC inline and synchronize CRF fields/metadata and item values. Direct data capture with Flask Forms Automated ETL processes extract data to Flask Detect and Act for analytics and alerts, or you can use FlaskData APIs to extract / insert data in JSON format on demand, for your own analytics processing.","title":"EDC"},{"location":"api_introduction/#flask-forms-esource","text":"Flask Forms is an eSource platform that includes a visual Forms designer. A CRF you design in Forms is designed once and can be rendered on Desktop or Mobile for a native Android app. You can use the FlaskData API to extract and insert Forms data.","title":"Flask Forms eSource"},{"location":"api_introduction/#getting-started-api","text":"","title":"Getting started API"},{"location":"api_introduction/#authorization","text":"In order to use the FlaskData APIs you need to first get aa JWT token with the auth/authorize API. Example in development swagger environment : https://dev-api.flaskdata.io/swagger/#/FLASK/post_auth_authorize In the body request (JSON) you need to set your API User's email and password, like: { \"email\" : \"xxx@gmail.com\" , \"password\" : \"12345678\" } In the response body you get an access token, like: { \"token\" : \"eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiV1BWaEJ3RnVMcGo2RjRTWVlkaENWSDBwZHR0SjlIZSIsImV4cCI6MTU3MjI3NjE5MDQwNywiaWF0IjoxNTcyMjY1MzkwfQ.f9CktAJxJ61D4act9ofB7wzfxOByREn22szMd6VqEW79E0L0AId_xXv4Vs4rdy8k\" , \"expired\" : \"2019-10-28T15:23:10.407Z\" } Info The expired time is UTC time.","title":"Authorization"},{"location":"api_introduction/#additional-urls","text":"There are additional swaggers for additional functionality.","title":"Additional Urls"},{"location":"api_introduction/#date-server","text":"By Data server APIs you can get Forms data in csv/json format with include/exclude criteria. api.flaskdata.io/data-server","title":"Date Server"},{"location":"api_introduction/#flaskdata-features","text":"By Features APIs you can process a few additional flaskdata features, like create subject etc. api.flaskdata.io/features","title":"FlaskData Features"},{"location":"api_introduction/#alerts-server","text":"By Alerts Server APIs you enable to run functions related to alerts definitions api.flaskdata.io/alerts-server","title":"Alerts Server"},{"location":"apiflows/","text":"API flows The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to an external EDC instance (extract EDC data etc.) Flask - APIs are related to the internal Flask data model (extract data, insert data etc.) Request header Authorization parameter in the header request should be the token you had get before from you authorization request EDC parameter in the header request should be the EDC DB name . In this document there are a few examples of FlaskData APIs - There are more APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com . EDC Extract EDC Data There are a few APIs you can use to extract EDC data. For example: /edc/study/extract-data This API extracts EDC data of each table/view/function (like functionName()) and returns a json structure. fromDate, toDate, sort, filters and inputVariables(if tableName is a function) are optional values. Filters and inputVariable json objects: The key is the column name/input variable name in the EDC PostgreSQL database, the json value is the corresponding value (like where site = XXX)/ input value in function (like schema.function(XXX)). Example { \"tableName\" : \"cc_event_data\" , \"fromDate\" : \"2017-01-01T00:00:00.000Z\" , \"toDate\" : \"2019-02-01T00:00:00.000Z\" , \"sort\" : \"subject\" } Another example: { \"tableName\" : \"cross_event_crf_data\" } /edc/study/download-csvs-data This API downloads a zip folder of CSV files with EDC study data. Each CSV file contains EDC Event-CRF data (Event is often called a Visit in an EDC) /edc/study/extract-study-data-at-crf-level This API extracts EDC data at CRF level and returns the data as a json object. This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/study/extract-study-data-at-crf-level-to-csvs This API extracts EDC data at CRF level and returns a zip folder includes CSV files (each CRF as CSV file). This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign). /edc/subjects/create-subject This API creates a subject in EDC DB and returns the study_subject_id value. Flask /flask/customer/extract-data-to-json This API extracts data from flask tables and views for your customer. The table/ view should have customer_id column for this process. Examples studies table, audit_user_login, billing_reports_customer etc. studyIds and filters are optional. /flask/customer/download-billing-reports This API downloads a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. Note This process will download files only if the billing reports features turn on in your customer account. /flask/device/get-logs This API returns device logs of a study. /flask/device/insert-log This API inserts device log into flaskData with correct study_id according to EDC. payload parameter is optional and can include each key value pairs. /flask/study/create-update-flask-study This API creates/updates study in FlaskData. /flask/site/create-update-flask-site This API creates/updates site in FlaskData. /flask/study/create-update-flask-study-users This API creates User if not exists and assigned Users to study. Note This API deletes the Users that were assigned to this study and assigned the new Users. /data-server/data/extract/extract-study-event-data-to-CSV This API extracts all study data (from FlaskForms) based on study id and download CSV files. /data-server/data/extract/partial-extract-study-event-data-to-json This API extracts all events data and CRFs data to json with results of data entry. The min needed request body is: { \"study_id\": 7253541 } Please choose the shape of the result object using the columns field in your request body. For example, if you need only crf , event and value fields use: \"columns\" : { \"_id\" : 0 , \"crf\" : 1 , \"event\" : 1 , \"value\" : 1 } You need to set 0 only for the _id column - other columns will not be returned if you just don\u2019t point them. The full entity will be returned if you don\u2019t point the columns field or if you point the full entire list of fields. The filters field can receive any field of an entity and it will be used as a filter. Also, there are additional filters like date_from, date_to. All filters will be applied at the same time. Example \"filters\" : { \"date_from\" : \"2020-12-01T16:26:54.461Z\" , \"date_to\" : \"2020-12-31T16:26:54.461Z\" , \"crf\" : \"demographic\" , \"item_type\" : \u201cINPUT\u201d } Note If you don\u2019t point the filters field you will get all records. /flask/crf/create-CRF-and-insert-data This API creates CRF in existing event and insert data Creates a new AE (adverse event) CRF in existing event. /flask/crf/create-event-CRF-and-insert-data This API creates event and CRF and inserts data. Example - Creates a new Medication event with CRF and inserts data. /flask/crf/get-CRF-data-ids This API returns subject's crf data Id (unique for each CRF) for specific crf name. /flask/crf/update-CRF-data This API updates CRF data by crf data id. Use Cases Note The following examples require jQuery later version General example of extract data using JS: var xhrcall = $ . ajax ({ url : 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json' , type : 'POST' , headers : { 'Authorization' : jwt }, data : '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }' , contentType : 'application/json' }); //promise syntax to render after xhr completes xhrcall . done ( function ( data ){ // Enter your code here }) . fail ( function ( error ) { if ( error ) { // Enter your code here } }); Save data to the Flask data model - code example Use cases: You have a mobile app that collects data from a device or person, and you want to save the data to the Flask data model. You have a connected wearable device that connects to your phone app with BLE and you want to save some data to Flask. Pre-requisites: In order to insert data you wil have previously created entities in the Flask data model: Study, Site, Event, Form (CRF). You have a Form (for example, a daily Quality of life diary) or a connected wearable that uses the phone app to send data (for example hours of sleep) to Flask. Items in the Form you use correspond to the the data items that you want to save from your app. You have a 'customer admin' role user credentials in your Flask customer account; (Your Flask customer admin can set you up with one of these). The credentials are an email and password. Your app sends The data items you send via the API populating the Form data items as key-value pairs. See below. TIP: Flask Forms automatically names the item variables; you will probably want to reset variable names to something friendly like PATIENT_AGE or PATIENT_GENDER_CODE. TIP: If you are using radio buttons, check, select boxes in your mobile app - make sure that the values you pass are not offset by 1 by mistake - for example if PATIENT_GENDER_CODE is (1 - female, 2 - male) then make sure you pass 1 or 2 (and not 0 or 1). Code example The following code example uses is a client-side JavaScript and can be run inside the Chrome debugger or embedded in a test HTML page for testing. The client-side code uses Jquery to perform Ajax calls. Input parameters to the API In the below code example, we have a cover function called saveData that gets a token (JWT) and then calls another cover function called createCRFandInsertData that makes the RESTful API call to /flask/crf/create-CRF-and-insert-data. The createCRFandInsertData function takes the following arguments: uEmail - Your customer API User email address for authorization. uPass - Your customer API User password for authorization. studyId - Your study Id parameter, You can take it from study dashboard URL. subjectLabel - Subject label from FlaskData eventName - Event name for creating CRF crfName - CRF name for creating CRF. crfData - A JSON structure with Form items key value pairs. The key is the item's variable (as it's defined in Flask Forms) and the value is the data for this variable; for example: { \"PATIENT_AGE\" : 30 , \"PATIENT_GENDER_CODE\" : 2 } The RESTful API creates a new CRF in the Flask data model for the subject with the data you provided. You can see the data after the update in the /subjects/flask-events/ page $ ( document ). ready ( function () { // Create a new CRF and save data. // Input values : User email, User password, study id, subject label, event name, CRF name, CRF data. saveData ( \"mongositerole@clearclinica.com\" , \"123456\" , 145858 , 'mongo_test_site_1-03' , 'Screening' , 'Subject properties' , { \"ITEM_SP_AGE_WR6NP\" : 30 , \"ITEM_SP_MANWOMAN_HDNAO\" : 2 }); }); var saveData = function ( uEmail , uPass , studyId , subjectLabel , eventName , crfName , crfData ){ // First we get a JWT getFlaskDataToken ( uEmail , uPass , function ( userToken ){ var token = UserToken ; // Then we create a new instance of a CRF in an existing event and save data to the CRF. // Save the crfDataId if you need to come back later and update the data createCRFandInsertData ( token , studyId , subjectLabel , eventName , crfName , crfData , function ( crfDataId ){ console . log ( crfDataId ); }); }); } var getFlaskDataToken = function ( email , password , cb ) { // Get JWT token var xhrcall = $ . ajax ({ url : 'https://dev-api.flaskdata.io/auth/authorize' , type : 'POST' , data : '{\"email\":\"' + email + '\",\"password\":\"' + password + '\"}' , contentType : 'application/json' }); //promise syntax to render after xhr completes xhrcall . done ( function ( data ){ // Enter your code here cb ( data . token ); }) . fail ( function ( error ) { if ( error ) { // Enter your code here console . log ( 'Failed to get token ' + error ); } }); } // Create new CRF and insert data // /flask/crf/create-CRF-and-insert-data var createCRFandInsertData = function ( token , study_id , subject_label , event_name , crf_name , crf_data , cb ) { var xhrcall = $ . ajax ({ url : 'https://dev-api.flaskdata.io/flask/crf/create-CRF-and-insert-data' , type : 'POST' , headers : { 'Authorization' : token }, data : '{\"study_id\": ' + study_id + ',\"subject_label\": \"' + subject_label + '\",\"event_name\": \"' + event_name + '\",\"crf_name\": \"' + crf_name + '\",\"crf_data\": ' + JSON . stringify ( crf_data ) + ' }' , contentType : 'application/json' }); //promise syntax to render after xhr completes xhrcall . done ( function ( data ){ // Enter your code here cb ( data . crfDataId ); }) . fail ( function ( error ) { if ( error ) { // Enter your code here console . log ( 'Failed to create CRF and insert data :' + JSON . stringify ( error )); } }); } -- End of page","title":"API Flows"},{"location":"apiflows/#api-flows","text":"The API has 2 parts of APIs - EDC and Flask. EDC - APIs are related to an external EDC instance (extract EDC data etc.) Flask - APIs are related to the internal Flask data model (extract data, insert data etc.) Request header Authorization parameter in the header request should be the token you had get before from you authorization request EDC parameter in the header request should be the EDC DB name . In this document there are a few examples of FlaskData APIs - There are more APIs, their description exists in swagger. For more details and questions contact us by sending email to support@clearclinica.com .","title":"API flows"},{"location":"apiflows/#edc","text":"","title":"EDC"},{"location":"apiflows/#extract-edc-data","text":"There are a few APIs you can use to extract EDC data. For example:","title":"Extract EDC Data"},{"location":"apiflows/#edcstudyextract-data","text":"This API extracts EDC data of each table/view/function (like functionName()) and returns a json structure. fromDate, toDate, sort, filters and inputVariables(if tableName is a function) are optional values. Filters and inputVariable json objects: The key is the column name/input variable name in the EDC PostgreSQL database, the json value is the corresponding value (like where site = XXX)/ input value in function (like schema.function(XXX)). Example { \"tableName\" : \"cc_event_data\" , \"fromDate\" : \"2017-01-01T00:00:00.000Z\" , \"toDate\" : \"2019-02-01T00:00:00.000Z\" , \"sort\" : \"subject\" } Another example: { \"tableName\" : \"cross_event_crf_data\" }","title":"/edc/study/extract-data"},{"location":"apiflows/#edcstudydownload-csvs-data","text":"This API downloads a zip folder of CSV files with EDC study data. Each CSV file contains EDC Event-CRF data (Event is often called a Visit in an EDC)","title":"/edc/study/download-csvs-data"},{"location":"apiflows/#edcstudyextract-study-data-at-crf-level","text":"This API extracts EDC data at CRF level and returns the data as a json object. This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level"},{"location":"apiflows/#edcstudyextract-study-data-at-crf-level-to-csvs","text":"This API extracts EDC data at CRF level and returns a zip folder includes CSV files (each CRF as CSV file). This API returns only CRFs with data. This API has filters option (from date and to date are related to date_updated column, filters can include each column and value with equal sign).","title":"/edc/study/extract-study-data-at-crf-level-to-csvs"},{"location":"apiflows/#edcsubjectscreate-subject","text":"This API creates a subject in EDC DB and returns the study_subject_id value.","title":"/edc/subjects/create-subject"},{"location":"apiflows/#flask","text":"","title":"Flask"},{"location":"apiflows/#flaskcustomerextract-data-to-json","text":"This API extracts data from flask tables and views for your customer. The table/ view should have customer_id column for this process. Examples studies table, audit_user_login, billing_reports_customer etc. studyIds and filters are optional.","title":"/flask/customer/extract-data-to-json"},{"location":"apiflows/#flaskcustomerdownload-billing-reports","text":"This API downloads a billing reports folder for the month of the billingDate parameter. The billing report zip folder includes all the billing report files for your customer. Note This process will download files only if the billing reports features turn on in your customer account.","title":"/flask/customer/download-billing-reports"},{"location":"apiflows/#flaskdeviceget-logs","text":"This API returns device logs of a study.","title":"/flask/device/get-logs"},{"location":"apiflows/#flaskdeviceinsert-log","text":"This API inserts device log into flaskData with correct study_id according to EDC. payload parameter is optional and can include each key value pairs.","title":"/flask/device/insert-log"},{"location":"apiflows/#flaskstudycreate-update-flask-study","text":"This API creates/updates study in FlaskData.","title":"/flask/study/create-update-flask-study"},{"location":"apiflows/#flasksitecreate-update-flask-site","text":"This API creates/updates site in FlaskData.","title":"/flask/site/create-update-flask-site"},{"location":"apiflows/#flaskstudycreate-update-flask-study-users","text":"This API creates User if not exists and assigned Users to study. Note This API deletes the Users that were assigned to this study and assigned the new Users.","title":"/flask/study/create-update-flask-study-users"},{"location":"apiflows/#data-serverdataextractextract-study-event-data-to-csv","text":"This API extracts all study data (from FlaskForms) based on study id and download CSV files.","title":"/data-server/data/extract/extract-study-event-data-to-CSV"},{"location":"apiflows/#data-serverdataextractpartial-extract-study-event-data-to-json","text":"This API extracts all events data and CRFs data to json with results of data entry. The min needed request body is: { \"study_id\": 7253541 } Please choose the shape of the result object using the columns field in your request body. For example, if you need only crf , event and value fields use: \"columns\" : { \"_id\" : 0 , \"crf\" : 1 , \"event\" : 1 , \"value\" : 1 } You need to set 0 only for the _id column - other columns will not be returned if you just don\u2019t point them. The full entity will be returned if you don\u2019t point the columns field or if you point the full entire list of fields. The filters field can receive any field of an entity and it will be used as a filter. Also, there are additional filters like date_from, date_to. All filters will be applied at the same time. Example \"filters\" : { \"date_from\" : \"2020-12-01T16:26:54.461Z\" , \"date_to\" : \"2020-12-31T16:26:54.461Z\" , \"crf\" : \"demographic\" , \"item_type\" : \u201cINPUT\u201d } Note If you don\u2019t point the filters field you will get all records.","title":"/data-server/data/extract/partial-extract-study-event-data-to-json"},{"location":"apiflows/#flaskcrfcreate-crf-and-insert-data","text":"This API creates CRF in existing event and insert data Creates a new AE (adverse event) CRF in existing event.","title":"/flask/crf/create-CRF-and-insert-data"},{"location":"apiflows/#flaskcrfcreate-event-crf-and-insert-data","text":"This API creates event and CRF and inserts data. Example - Creates a new Medication event with CRF and inserts data.","title":"/flask/crf/create-event-CRF-and-insert-data"},{"location":"apiflows/#flaskcrfget-crf-data-ids","text":"This API returns subject's crf data Id (unique for each CRF) for specific crf name.","title":"/flask/crf/get-CRF-data-ids"},{"location":"apiflows/#flaskcrfupdate-crf-data","text":"This API updates CRF data by crf data id.","title":"/flask/crf/update-CRF-data"},{"location":"apiflows/#use-cases","text":"Note The following examples require jQuery later version","title":"Use Cases"},{"location":"apiflows/#general-example-of-extract-data-using-js","text":"var xhrcall = $ . ajax ({ url : 'https://dev-api.flaskdata.io/flask/customer/extract-data-to-json' , type : 'POST' , headers : { 'Authorization' : jwt }, data : '{ \"tableName\": \"studies\", \"fromDate\": \"2018-03-29T11:44:12.511Z\", \"toDate\": \"2019-03-29T11:44:12.511Z\" }' , contentType : 'application/json' }); //promise syntax to render after xhr completes xhrcall . done ( function ( data ){ // Enter your code here }) . fail ( function ( error ) { if ( error ) { // Enter your code here } });","title":"General example of extract data using JS:"},{"location":"apiflows/#save-data-to-the-flask-data-model-code-example","text":"Use cases: You have a mobile app that collects data from a device or person, and you want to save the data to the Flask data model. You have a connected wearable device that connects to your phone app with BLE and you want to save some data to Flask. Pre-requisites: In order to insert data you wil have previously created entities in the Flask data model: Study, Site, Event, Form (CRF). You have a Form (for example, a daily Quality of life diary) or a connected wearable that uses the phone app to send data (for example hours of sleep) to Flask. Items in the Form you use correspond to the the data items that you want to save from your app. You have a 'customer admin' role user credentials in your Flask customer account; (Your Flask customer admin can set you up with one of these). The credentials are an email and password. Your app sends The data items you send via the API populating the Form data items as key-value pairs. See below. TIP: Flask Forms automatically names the item variables; you will probably want to reset variable names to something friendly like PATIENT_AGE or PATIENT_GENDER_CODE. TIP: If you are using radio buttons, check, select boxes in your mobile app - make sure that the values you pass are not offset by 1 by mistake - for example if PATIENT_GENDER_CODE is (1 - female, 2 - male) then make sure you pass 1 or 2 (and not 0 or 1).","title":"Save data to the Flask data model -  code example"},{"location":"apiflows/#code-example","text":"The following code example uses is a client-side JavaScript and can be run inside the Chrome debugger or embedded in a test HTML page for testing. The client-side code uses Jquery to perform Ajax calls.","title":"Code example"},{"location":"apiflows/#input-parameters-to-the-api","text":"In the below code example, we have a cover function called saveData that gets a token (JWT) and then calls another cover function called createCRFandInsertData that makes the RESTful API call to /flask/crf/create-CRF-and-insert-data. The createCRFandInsertData function takes the following arguments: uEmail - Your customer API User email address for authorization. uPass - Your customer API User password for authorization. studyId - Your study Id parameter, You can take it from study dashboard URL. subjectLabel - Subject label from FlaskData eventName - Event name for creating CRF crfName - CRF name for creating CRF. crfData - A JSON structure with Form items key value pairs. The key is the item's variable (as it's defined in Flask Forms) and the value is the data for this variable; for example: { \"PATIENT_AGE\" : 30 , \"PATIENT_GENDER_CODE\" : 2 } The RESTful API creates a new CRF in the Flask data model for the subject with the data you provided. You can see the data after the update in the /subjects/flask-events/ page $ ( document ). ready ( function () { // Create a new CRF and save data. // Input values : User email, User password, study id, subject label, event name, CRF name, CRF data. saveData ( \"mongositerole@clearclinica.com\" , \"123456\" , 145858 , 'mongo_test_site_1-03' , 'Screening' , 'Subject properties' , { \"ITEM_SP_AGE_WR6NP\" : 30 , \"ITEM_SP_MANWOMAN_HDNAO\" : 2 }); }); var saveData = function ( uEmail , uPass , studyId , subjectLabel , eventName , crfName , crfData ){ // First we get a JWT getFlaskDataToken ( uEmail , uPass , function ( userToken ){ var token = UserToken ; // Then we create a new instance of a CRF in an existing event and save data to the CRF. // Save the crfDataId if you need to come back later and update the data createCRFandInsertData ( token , studyId , subjectLabel , eventName , crfName , crfData , function ( crfDataId ){ console . log ( crfDataId ); }); }); } var getFlaskDataToken = function ( email , password , cb ) { // Get JWT token var xhrcall = $ . ajax ({ url : 'https://dev-api.flaskdata.io/auth/authorize' , type : 'POST' , data : '{\"email\":\"' + email + '\",\"password\":\"' + password + '\"}' , contentType : 'application/json' }); //promise syntax to render after xhr completes xhrcall . done ( function ( data ){ // Enter your code here cb ( data . token ); }) . fail ( function ( error ) { if ( error ) { // Enter your code here console . log ( 'Failed to get token ' + error ); } }); } // Create new CRF and insert data // /flask/crf/create-CRF-and-insert-data var createCRFandInsertData = function ( token , study_id , subject_label , event_name , crf_name , crf_data , cb ) { var xhrcall = $ . ajax ({ url : 'https://dev-api.flaskdata.io/flask/crf/create-CRF-and-insert-data' , type : 'POST' , headers : { 'Authorization' : token }, data : '{\"study_id\": ' + study_id + ',\"subject_label\": \"' + subject_label + '\",\"event_name\": \"' + event_name + '\",\"crf_name\": \"' + crf_name + '\",\"crf_data\": ' + JSON . stringify ( crf_data ) + ' }' , contentType : 'application/json' }); //promise syntax to render after xhr completes xhrcall . done ( function ( data ){ // Enter your code here cb ( data . crfDataId ); }) . fail ( function ( error ) { if ( error ) { // Enter your code here console . log ( 'Failed to create CRF and insert data :' + JSON . stringify ( error )); } }); }","title":"Input parameters to the API"},{"location":"apiflows/#-end-of-page","text":"","title":"-- End of page"},{"location":"edc/","text":"EDC FlaskData team support ClinCapture system. You can use ClinCapture for your study. You can use just EDC OR use EDC with Flask (see the relationship between FlaskData and EDC ) EDC is a data collection system for clinical trials. For more information see the user guide doc. ClinCapture User Guide","title":"EDC"},{"location":"edc/#edc","text":"FlaskData team support ClinCapture system. You can use ClinCapture for your study. You can use just EDC OR use EDC with Flask (see the relationship between FlaskData and EDC ) EDC is a data collection system for clinical trials. For more information see the user guide doc. ClinCapture User Guide","title":"EDC"},{"location":"epro/","text":"ePRO This is a patient's diary. What is Flask PRO? Flask PRO is an online ePRO app Forms PRO unlimited subjects, forms and data. You can create the ePRO yourself using a super friendly interface. Runs on desktops, notebooks, tablets and phones. Prerequisites Study definition To define study with ePRO, the study should be defined as the following: 1. Enable patient reported outcome module? 3. PRO URL : should be https://epro.flaskdata.io , (If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL). Forms definitions To define ePRO questionnaire, you need to create CRF/s and Event includes your diary CRF/s first. Second you need to create Study Schedule with your period diary. Welcome Email and SMS When subject has been created the patient gets a welcome email and SMS with PRO link. He/She is invited entering and fill his/her diary. If patient forgets his password site role user (like CRC or PI) can go to subject's profile page and send him Welcome back/Reset password email. Patient will get a welcome email again. Subject invited When patient gets a welcome emil/SMS He/she should click on the link. The patient is invited to login with his Google account OR to choose a password. Note To create a password or reset password - CRC user should reset subject's password by clicking on Reset password option. The patient will get a reset password email After Subject set his/her password, He can login to ePRO by Google account or with FlaskData password Android application Installation If patient has an Android phone, he can install Flask ePRO application from Google play store. Search flask epro and install it After patient install Flask ePRO application he will see the Flask ePRO icon Just click on the application and login to ePRO, Enjoy Login to Flask ePRO Open Flask ePRO application and login to your diary. (To login by email and password you should create the password first by reset password option) Enter diary While patient logins to ePRO, he see his diary for the current date. He should fill his diary and save. If there are a few Forms in the diary the next form will be opened when he clicks SAVE AND NEXT button. Important If patient filed a part of his diary he can continue later. If patient forgot to fill his diary, He can fill it next 2 days (By logs option) Required fields are marked with a red asterisk. If patient try to save the diary with missing information, an error flag appears Clicking on the error flag opens the error message. Input Data Patient can click Input Data option and fill his diary for the current date. If he saved his data before, He just see his data and cannot change it. Logs Patient can see / continue his diaries in Logs option My Account Patient can change his account definition by clicking on My Account option He can change his default language. Support languages For ePRO lunguages support customer admin user should define it in the CRFs definition Patient can change ePRO display mode by clicking on theme option. If he sets the mode as Dark he will see something like this: Study information The patient can see details of the study he is participating in by clicking on the exclamation mark FlaskData application If subject cannot use Flask ePRO android application he/she can use FlaskData application to enter his/her diary. It's less beautiful but works great. In any case in such a case that the phone does not support Android it is better for the patient to use his desktop. Login Patient should login to FlaskData ePRO URL (https://epro.flaskdata.io) Input Data When patient login to his diary a diary for the current date opens. He can start to fill the diary. If there are another Forms in the diary he should click SAVE AND NEXT button If he filled the last form he should click FINISH button When patient finish fill diary a success message appears To go back to Input Data click on the icon Logs Patient can see his diaries by Logs option By logs option patient cannot change his diaries, just see them Forget Option If patient filled diary but didn't finish all his diary forms he can continue from Logs option He can continue filling data for yesterday's diary and for the diary of two days ago. If patient forgot to fill his diary he can enter data for yesterday's diary and for the diary of two days ago. My Account To see account definition click on My Account icon Note Patient can change the language by click on Languages icon - this option change the language for this login but it doesn't change patient account definitions, So in the next login the language will be the default language again. Save patient's account information after changing. Study information The patient can see details of the study he is participating in by clicking on the exclamation mark Logout After patient finish filling his diary he can logout from the system by clicking Logout icon.","title":"Flask ePRO"},{"location":"epro/#epro","text":"This is a patient's diary.","title":"ePRO"},{"location":"epro/#what-is-flask-pro","text":"Flask PRO is an online ePRO app Forms PRO unlimited subjects, forms and data. You can create the ePRO yourself using a super friendly interface. Runs on desktops, notebooks, tablets and phones.","title":"What is Flask PRO?"},{"location":"epro/#prerequisites","text":"","title":"Prerequisites"},{"location":"epro/#study-definition","text":"To define study with ePRO, the study should be defined as the following: 1. Enable patient reported outcome module? 3. PRO URL : should be https://epro.flaskdata.io , (If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL).","title":"Study definition"},{"location":"epro/#forms-definitions","text":"To define ePRO questionnaire, you need to create CRF/s and Event includes your diary CRF/s first. Second you need to create Study Schedule with your period diary.","title":"Forms definitions"},{"location":"epro/#welcome-email-and-sms","text":"When subject has been created the patient gets a welcome email and SMS with PRO link. He/She is invited entering and fill his/her diary. If patient forgets his password site role user (like CRC or PI) can go to subject's profile page and send him Welcome back/Reset password email. Patient will get a welcome email again.","title":"Welcome Email and SMS"},{"location":"epro/#subject-invited","text":"When patient gets a welcome emil/SMS He/she should click on the link. The patient is invited to login with his Google account OR to choose a password. Note To create a password or reset password - CRC user should reset subject's password by clicking on Reset password option. The patient will get a reset password email After Subject set his/her password, He can login to ePRO by Google account or with FlaskData password","title":"Subject invited"},{"location":"epro/#android-application","text":"","title":"Android application"},{"location":"epro/#installation","text":"If patient has an Android phone, he can install Flask ePRO application from Google play store. Search flask epro and install it After patient install Flask ePRO application he will see the Flask ePRO icon Just click on the application and login to ePRO, Enjoy","title":"Installation"},{"location":"epro/#login-to-flask-epro","text":"Open Flask ePRO application and login to your diary. (To login by email and password you should create the password first by reset password option)","title":"Login to Flask ePRO"},{"location":"epro/#enter-diary","text":"While patient logins to ePRO, he see his diary for the current date. He should fill his diary and save. If there are a few Forms in the diary the next form will be opened when he clicks SAVE AND NEXT button. Important If patient filed a part of his diary he can continue later. If patient forgot to fill his diary, He can fill it next 2 days (By logs option) Required fields are marked with a red asterisk. If patient try to save the diary with missing information, an error flag appears Clicking on the error flag opens the error message.","title":"Enter diary"},{"location":"epro/#input-data","text":"Patient can click Input Data option and fill his diary for the current date. If he saved his data before, He just see his data and cannot change it.","title":"Input Data"},{"location":"epro/#logs","text":"Patient can see / continue his diaries in Logs option","title":"Logs"},{"location":"epro/#my-account","text":"Patient can change his account definition by clicking on My Account option He can change his default language. Support languages For ePRO lunguages support customer admin user should define it in the CRFs definition Patient can change ePRO display mode by clicking on theme option. If he sets the mode as Dark he will see something like this:","title":"My Account"},{"location":"epro/#study-information","text":"The patient can see details of the study he is participating in by clicking on the exclamation mark","title":"Study information"},{"location":"epro/#flaskdata-application","text":"If subject cannot use Flask ePRO android application he/she can use FlaskData application to enter his/her diary. It's less beautiful but works great. In any case in such a case that the phone does not support Android it is better for the patient to use his desktop.","title":"FlaskData application"},{"location":"epro/#login","text":"Patient should login to FlaskData ePRO URL (https://epro.flaskdata.io)","title":"Login"},{"location":"epro/#input-data_1","text":"When patient login to his diary a diary for the current date opens. He can start to fill the diary. If there are another Forms in the diary he should click SAVE AND NEXT button If he filled the last form he should click FINISH button When patient finish fill diary a success message appears To go back to Input Data click on the icon","title":"Input Data"},{"location":"epro/#logs_1","text":"Patient can see his diaries by Logs option By logs option patient cannot change his diaries, just see them Forget Option If patient filled diary but didn't finish all his diary forms he can continue from Logs option He can continue filling data for yesterday's diary and for the diary of two days ago. If patient forgot to fill his diary he can enter data for yesterday's diary and for the diary of two days ago.","title":"Logs"},{"location":"epro/#my-account_1","text":"To see account definition click on My Account icon Note Patient can change the language by click on Languages icon - this option change the language for this login but it doesn't change patient account definitions, So in the next login the language will be the default language again. Save patient's account information after changing.","title":"My Account"},{"location":"epro/#study-information_1","text":"The patient can see details of the study he is participating in by clicking on the exclamation mark","title":"Study information"},{"location":"epro/#logout","text":"After patient finish filling his diary he can logout from the system by clicking Logout icon.","title":"Logout"},{"location":"epro_desktop/","text":"ePRO Desktop Attached a few short videos with example of ePRO desktop . Login to ePRO desktop This is a short video with example of patient's diary using desktop. ePRO desktop Options This is a short video with example of patient's diary options.","title":"ePRO Desktop"},{"location":"epro_desktop/#epro-desktop","text":"Attached a few short videos with example of ePRO desktop .","title":"ePRO Desktop"},{"location":"epro_desktop/#login-to-epro-desktop","text":"This is a short video with example of patient's diary using desktop.","title":"Login to ePRO desktop"},{"location":"epro_desktop/#epro-desktop-options","text":"This is a short video with example of patient's diary options.","title":"ePRO desktop Options"},{"location":"epro_mobile/","text":"ePRO Mobile Attached a few short videos with example of ePRO Mobile . First login with email and password After CRC add subject, Patient gets a welcome email. He should click on email's link and reset his password by himself. Set a password by the reset password email Login to ePRO mobile and fill your diary This is a short video with example of patient's diary using mobile. ePRO mobile Options This is a short video with example of patient's diary options. See his diary data (cannot change diary data after saving) See his diary logs Change languages Change display mode See study details.","title":"ePRO Mobile"},{"location":"epro_mobile/#epro-mobile","text":"Attached a few short videos with example of ePRO Mobile .","title":"ePRO Mobile"},{"location":"epro_mobile/#first-login-with-email-and-password","text":"After CRC add subject, Patient gets a welcome email. He should click on email's link and reset his password by himself. Set a password by the reset password email","title":"First login with email and password"},{"location":"epro_mobile/#login-to-epro-mobile-and-fill-your-diary","text":"This is a short video with example of patient's diary using mobile.","title":"Login to ePRO mobile and fill your diary"},{"location":"epro_mobile/#epro-mobile-options","text":"This is a short video with example of patient's diary options. See his diary data (cannot change diary data after saving) See his diary logs Change languages Change display mode See study details.","title":"ePRO mobile Options"},{"location":"epro_patient_instructions/","text":"Research diaries - completion instructions This document specifies instructions for filling a patient diary. Upon joining the study, you will have access to the electronic diary system designed for participants in the trial and designed for daily filling of tracking diary pages via mobile phone or computer. First login for using desktop Before the first entry, you will receive a welcome email from Flask Data. Upon receiving the email, you can enter and set a personal password for the system. Set a password by the reset password email Note The link to the system is available from any mobile or stationary device https://epro.flaskdata.io/welcome First login for using Android mobile This is a short video of diary using mobile. Diary Options This is a short video with example of your diary options. See his diary data (cannot change diary data after saving) See his diary logs Change languages Change display mode See study details. Important Upon completion of all the required details, make sure you click on the Save and Next or Finish control (this is so that all the information will be saved). By clicking on the text Data log you can find the logs that are waiting to be filled in by you. In the relevant box for the day of filling in, click on Add Event Enter the diary you need to fill out. Be sure to fill in the daily diary and all the details in order every day. When the filling is complete, click on Finish Please note that the daily log of yesterday and the day before can be completed - the details of the log cannot be completed backwards of 3 days or more. Thank you for joining the study","title":"Instructions for patient diary"},{"location":"epro_patient_instructions/#research-diaries-completion-instructions","text":"This document specifies instructions for filling a patient diary. Upon joining the study, you will have access to the electronic diary system designed for participants in the trial and designed for daily filling of tracking diary pages via mobile phone or computer.","title":"Research diaries - completion instructions"},{"location":"epro_patient_instructions/#first-login-for-using-desktop","text":"Before the first entry, you will receive a welcome email from Flask Data. Upon receiving the email, you can enter and set a personal password for the system. Set a password by the reset password email Note The link to the system is available from any mobile or stationary device https://epro.flaskdata.io/welcome","title":"First login for using desktop"},{"location":"epro_patient_instructions/#first-login-for-using-android-mobile","text":"This is a short video of diary using mobile.","title":"First login for using Android mobile"},{"location":"epro_patient_instructions/#diary-options","text":"This is a short video with example of your diary options. See his diary data (cannot change diary data after saving) See his diary logs Change languages Change display mode See study details. Important Upon completion of all the required details, make sure you click on the Save and Next or Finish control (this is so that all the information will be saved). By clicking on the text Data log you can find the logs that are waiting to be filled in by you. In the relevant box for the day of filling in, click on Add Event Enter the diary you need to fill out. Be sure to fill in the daily diary and all the details in order every day. When the filling is complete, click on Finish Please note that the daily log of yesterday and the day before can be completed - the details of the log cannot be completed backwards of 3 days or more. Thank you for joining the study","title":"Diary Options"},{"location":"first_study/","text":"Define your study After signing up, the system will create your first study called default-XXX . Study Edit To edit the study - check it, in ACTIONS click on Edit option. In edit study window you can define your study profile, definitions etc. Study definition values Fill out the Database and the EDC URL fields if you are using an external EDC like ClinCapture. Enable patient reported outcome module? Click this checkbox if your study uses Flask ePRO desktop / Mobile edition. PRO URL : Enter the PRO URL field with the Website address of your ePRO system - if your'e using Flask ePRO, then the default will be Flask ePRO . Package : There are 3 available packages, Start, Submit and Validate. Start - The study uses Flask Subject management and Flask Forms for data Collect. Validate - Start + ClinCapture EDC on the Flaskdata cloud platform. Submit - Start + external EDC Alert data source : Data for alert definitions (If study uses ClinCapture you should choose PostgreSQL otherwise choose MongoDB). Study subject prefix : Prefix for automatically creating a Subject label like - NCT123456-001 Subject\u2019s IDPs settings : Enable Subjects to login with their Google Account or enable Subjects to login with multiple identity providers. When you click SAVE the profile study will be opened. Study Profile The Study Profile page shows your study's attributes, Alert rules, Analytic rules, Users, Sites and comments. Comments In the Comments card you can record free text annotations about your study. In the Study Profile page you have a green ACTIONS button with Manage users and Manage sites options. Study > Manage Users In the Manage Users page you can add/remove User from this study. To add a new User to the study - click create the User . Type any part of the User's name in the Select Users box and click the user you want to add to the study. Click NEXT STEP , Welcome emails will be sent to the users. Study > Manage sites In the Manage sites page you can add/remove site from this study. To add a new site to study - click create the site first. Type any part of the site's name in the Select sites box and click the site you want to add to the study. Click NEXT STEP","title":"First Study"},{"location":"first_study/#define-your-study","text":"After signing up, the system will create your first study called default-XXX .","title":"Define your study"},{"location":"first_study/#study-edit","text":"To edit the study - check it, in ACTIONS click on Edit option. In edit study window you can define your study profile, definitions etc. Study definition values Fill out the Database and the EDC URL fields if you are using an external EDC like ClinCapture. Enable patient reported outcome module? Click this checkbox if your study uses Flask ePRO desktop / Mobile edition. PRO URL : Enter the PRO URL field with the Website address of your ePRO system - if your'e using Flask ePRO, then the default will be Flask ePRO . Package : There are 3 available packages, Start, Submit and Validate. Start - The study uses Flask Subject management and Flask Forms for data Collect. Validate - Start + ClinCapture EDC on the Flaskdata cloud platform. Submit - Start + external EDC Alert data source : Data for alert definitions (If study uses ClinCapture you should choose PostgreSQL otherwise choose MongoDB). Study subject prefix : Prefix for automatically creating a Subject label like - NCT123456-001 Subject\u2019s IDPs settings : Enable Subjects to login with their Google Account or enable Subjects to login with multiple identity providers. When you click SAVE the profile study will be opened.","title":"Study Edit"},{"location":"first_study/#study-profile","text":"The Study Profile page shows your study's attributes, Alert rules, Analytic rules, Users, Sites and comments. Comments In the Comments card you can record free text annotations about your study. In the Study Profile page you have a green ACTIONS button with Manage users and Manage sites options.","title":"Study Profile"},{"location":"first_study/#study-manage-users","text":"In the Manage Users page you can add/remove User from this study. To add a new User to the study - click create the User . Type any part of the User's name in the Select Users box and click the user you want to add to the study. Click NEXT STEP , Welcome emails will be sent to the users.","title":"Study &gt; Manage Users"},{"location":"first_study/#study-manage-sites","text":"In the Manage sites page you can add/remove site from this study. To add a new site to study - click create the site first. Type any part of the site's name in the Select sites box and click the site you want to add to the study. Click NEXT STEP","title":"Study &gt; Manage sites"},{"location":"flask_and_edc/","text":"Flask and EDC You can use FlaskData and ClinCapture Database in parallel for your study. There are a few functions to connect them: Create user in EDC feature - Create user in flask and he/she will be created in EDC. Create site in Flask - The site will be created in EDC. Add subject in Flask - The subject will be added in EDC. EDC button - Opens the clincapture in a new window. Create Alert Definition on EDC data. See EDC Queries in tools . Download EDC data (CSV files) Connect Forms data and EDC data. Create site EDC has a lot of connectivity, After you add a site in Flask you must go to EDC and \"edit\" the site. Just Click edit and save without edit anything. Relationship between Forms and EDC If your study uses ClinCapture Database you can connect the two. Import CRF from EDC You can import CRF From EDC to Forms by click on IMPORT CRF FROM EDC blue button CRF list opens, You can import each CRF you need. After you imported, you can edit the CRF . Now - You have CRF in Forms related to EDC CRF. Each CRF data you enter or edit for specific subject in Forms will update the EDC CRF data. For detach the CRF from EDC CRF, Go to CRF list ACTIONS -> DETACH CRF Export CRF to EDC You can export CRF to EDC by click on ACTIONS -> EXPORT option Example Study uses Flask PRO and EDC DB, You can export study PRO CRFs to EDC. When subject inserts data in ePRO the data is inserted into EDC as well. Import Event from EDC You can import event from EDC includes all it's CRFs. In Event Definition tab click on IMPORT EVENT DEFITION FROM EDC blue button Events list appears, you can import each event from there, edit the imported event, and it's CRFs. Export Event to EDC You can export Event to EDC by click on ACTIONS -> EXPORT option The export window Difference between Flask Event Definition and EDC Event Definition preview shows the event's different definitions between Forms and EDC. You can export or cancel the export process. Export study By click on Export study Hamburger option, You can export to EDC DB all the Events and CRFs of ths study.","title":"Flask and EDC"},{"location":"flask_and_edc/#flask-and-edc","text":"You can use FlaskData and ClinCapture Database in parallel for your study. There are a few functions to connect them: Create user in EDC feature - Create user in flask and he/she will be created in EDC. Create site in Flask - The site will be created in EDC. Add subject in Flask - The subject will be added in EDC. EDC button - Opens the clincapture in a new window. Create Alert Definition on EDC data. See EDC Queries in tools . Download EDC data (CSV files) Connect Forms data and EDC data. Create site EDC has a lot of connectivity, After you add a site in Flask you must go to EDC and \"edit\" the site. Just Click edit and save without edit anything.","title":"Flask and EDC"},{"location":"flask_and_edc/#relationship-between-forms-and-edc","text":"If your study uses ClinCapture Database you can connect the two.","title":"Relationship between Forms and EDC"},{"location":"flask_and_edc/#import-crf-from-edc","text":"You can import CRF From EDC to Forms by click on IMPORT CRF FROM EDC blue button CRF list opens, You can import each CRF you need. After you imported, you can edit the CRF . Now - You have CRF in Forms related to EDC CRF. Each CRF data you enter or edit for specific subject in Forms will update the EDC CRF data. For detach the CRF from EDC CRF, Go to CRF list ACTIONS -> DETACH CRF","title":"Import CRF from EDC"},{"location":"flask_and_edc/#export-crf-to-edc","text":"You can export CRF to EDC by click on ACTIONS -> EXPORT option Example Study uses Flask PRO and EDC DB, You can export study PRO CRFs to EDC. When subject inserts data in ePRO the data is inserted into EDC as well.","title":"Export CRF to EDC"},{"location":"flask_and_edc/#import-event-from-edc","text":"You can import event from EDC includes all it's CRFs. In Event Definition tab click on IMPORT EVENT DEFITION FROM EDC blue button Events list appears, you can import each event from there, edit the imported event, and it's CRFs.","title":"Import Event from EDC"},{"location":"flask_and_edc/#export-event-to-edc","text":"You can export Event to EDC by click on ACTIONS -> EXPORT option The export window Difference between Flask Event Definition and EDC Event Definition preview shows the event's different definitions between Forms and EDC. You can export or cancel the export process.","title":"Export Event to EDC"},{"location":"flask_and_edc/#export-study","text":"By click on Export study Hamburger option, You can export to EDC DB all the Events and CRFs of ths study.","title":"Export study"},{"location":"manage_alerts_definitions/","text":"Alert Definitions In Flask Forms you can create alert definitions for your study. Alert Definition entity was designed for use in the data analysis process. Alert Definition allows determining the expression that will be used for data checking and the actions that will be executed if the expression returns true. In the Actions dropdown, you can find the Delete and Edit Alert Definition buttons. Add Alerts Definition In order to add alert definition click on ADD ALERT DEFINITION green button. There are few properties of alert definition: Message - the message of the alert, this message will appear in this alert email. Expiration Date - optional field, if this alert definition has end date. Send email to subject - select it If this alert definition requires to send email to subject about this alert. SMS Message - this message will appear in this alert SMS (if Send SMS to subject is marked) Trigger Time - optional field, time of alert generation. If this field is empty - alert will generate in real time. Send SMS to subject - select it If this alert definition requires to send SMS to subject about this alert. Expression - see Expression Alert Definition Actions - which action to do with this alert. see Expression Alert Language Flask Alert Language was designed to provide the ability for users to create rules to find the errors, missing data, or critical values in the subject's data. This language is based on the CRF items variables. When the CRF was created each item of this CRF gets a unique variable that looks like \"ITEM_AT_NAME_2WOMR\". In the future, each answer of the subject will be marked with this variable and stored in the DB. To find the errors, missing data, or critical values in the subject's data you need to create the expression close to the JavaScript programming language. If this expression will return true - you will get the alert. In current implementation you can use the simple expressions like $SOME_VARIABLE == '0' , or expressions with functions like count($SOME_VARIABLE) == '0' or filter($SOME_VARIABLE) == '0' . Also, you can combine these expressions using logical operators like && (AND) or || (OR). Examples $SOME_VARIABLE == '0' && count($ELSE_ONE_VARIABLE) > '0' $SOME_VARIABLE != 'some string value' || $ELSE_ONE_VARIABLE >= '0' filter($SOME_VARIABLE) <= '4' && count($ELSE_ONE_VARIABLE) != '5' Logical operator !(NOT) also supporting in the current implementation Examples !($SOME_VARIABLE == '5') && count($ELSE_ONE_VARIABLE) > '0' !($SOME_VARIABLE == 'some string value') Functions Count count(variable, period) - this is the general syntax of count function. The count function will return the number of records in the DB marked with this variable. The count function receives the two arguments: variable - the unique variable of the CRF item. period(not required) - the time period for filtering the subject's data by date of creating the record. The value of the period parameter must be the string that looks like 24 hours !!info You can use the following time units: * milliseconds * seconds * minutes * hours * days * weeks * months * years Usage examples: count($ELSE_ONE_VARIABLE) - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time count($ELSE_ONE_VARIABLE, '24 hours') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours count($ELSE_ONE_VARIABLE, '7 days') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last week So, if you need to check did some subject fill some CRF during of 24 hours you can use the following expression: count ( $ELSE_ONE_VARIABLE , '24 hours' ) == '0' ; In this case, if some subject didn't fill the CRF that contains an item with the current variable during 24 hours the function count($ELSE_ONE_VARIABLE, '24 hours') will return 0. The entire expression count($ELSE_ONE_VARIABLE, '24 hours') == '0' will return true and you will get the alert. Filter filter(variable, period, value, take) - this is the general syntax of the filter function. The filter function will return the number of records in the DB marked with this variable. The count function receives the following arguments: variable - the unique variable of the CRF item. period(not required) - the time period for filtering the subject's data by the date of creating the record. value(not required) - the expression that will be used for filtering by the value that a record contains take(not required) - the expression that will be used to get the part of the records array The period parameter works similarly to the period parameter in the count function. The value of the value parameter must be the string that looks like >2 , yes , ==5 Info You can use the following operators: == != >= <= > < Example ==2 some string value >=5 the expression ==2 and 2 or ==yes and yes are equals! The value of the take parameter must be the string that looks like '-1' , '1' , '5' The take parameter provides the ability to get the part of records from the records array. Examples '1' - The first event '2' - The first 2 events '-1' - The last event '-4' - The last 4 events the records that receive from the DB ordered by date created. The order of the filters appling is following filtering by variable filtering by period filtering by 'take' filtering by 'value' if you don't need to use some parameter you can set null instead. Usage examples filter($ELSE_ONE_VARIABLE) - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time filter($ELSE_ONE_VARIABLE, '24 hours') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours filter($ELSE_ONE_VARIABLE, '24 hours', '>=5') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours that contains the value more or equal '5' filter($ELSE_ONE_VARIABLE, null, '>=5') - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time that contains the value more or equal '5' filter($ELSE_ONE_VARIABLE, null, '>=5', '2') - at first, will find all records with variable $ELSE_ONE_VARIABLE for the all-time. The next step - will receive the first 2 members of this array. Finally - will return the number of the records from the array that received in step two that contains the value more or equal to '5' So, if you need to check did some subject has some critical value in his data during of 24 hours you can use the following expression: filter ( $ELSE_ONE_VARIABLE , '24 hours' , '>10' ) > '0' ; In this case, if some subject entered this critical value in the CRF that contains an item with the current variable during 24 hours the function filter ( $ELSE_ONE_VARIABLE , '24 hours' , '>10' ) will return some value that will be more than 0. The entire expression filter($ELSE_ONE_VARIABLE, '24 hours', '>10') > '0' will return true, and you will get the alert. Simple expressions In current implementation you can use the simple expressions like $SOME_VARIABLE == '0' . In this case this expression will be replaced to filter($SOME_VARIABLE, null, '== 0') != 0 Example Input Output $SOME_VARIABLE == '0' filter($SOME_VARIABLE, null, '== 0') != 0 $SOME_VARIABLE filter($SOME_VARIABLE, null, null) != 0 $SOME_VARIABLE == '3'&& $ELSE_ONE_VARIABLE > '2' filter($SOME_VARIABLE, null, '== 3') != 0 && filter($ELSE_ONE_VARIABLE, null, '>2') != 0 Alert Action You can define a few actions to alert definition by ADD ACTION green button. These actions are additional settings that allow adding additional recipients to send email or SMS. In the current time supported SMS and email actions. Each action has a few properties: Action Type - Send Email/SMS if there is alert. Expired Period - If alert will be expired after a period of its generation. Expired Period Units - seconds/ minutes/ days etc. Action recipient - email or phone number that will get an email/SMS about this alert. Study Alerts If there are alerts of your study you can see a red bell in Forms near the hamburger. To see alerts list - click on Study Alerts in hamburger menu. You can filter the alerts list. Tip You can change status/ delete each alert in the list.","title":"Alerts Definitions"},{"location":"manage_alerts_definitions/#alert-definitions","text":"In Flask Forms you can create alert definitions for your study. Alert Definition entity was designed for use in the data analysis process. Alert Definition allows determining the expression that will be used for data checking and the actions that will be executed if the expression returns true. In the Actions dropdown, you can find the Delete and Edit Alert Definition buttons.","title":"Alert Definitions"},{"location":"manage_alerts_definitions/#add-alerts-definition","text":"In order to add alert definition click on ADD ALERT DEFINITION green button. There are few properties of alert definition: Message - the message of the alert, this message will appear in this alert email. Expiration Date - optional field, if this alert definition has end date. Send email to subject - select it If this alert definition requires to send email to subject about this alert. SMS Message - this message will appear in this alert SMS (if Send SMS to subject is marked) Trigger Time - optional field, time of alert generation. If this field is empty - alert will generate in real time. Send SMS to subject - select it If this alert definition requires to send SMS to subject about this alert. Expression - see Expression Alert Definition Actions - which action to do with this alert. see Expression","title":"Add Alerts Definition"},{"location":"manage_alerts_definitions/#alert-language","text":"Flask Alert Language was designed to provide the ability for users to create rules to find the errors, missing data, or critical values in the subject's data. This language is based on the CRF items variables. When the CRF was created each item of this CRF gets a unique variable that looks like \"ITEM_AT_NAME_2WOMR\". In the future, each answer of the subject will be marked with this variable and stored in the DB. To find the errors, missing data, or critical values in the subject's data you need to create the expression close to the JavaScript programming language. If this expression will return true - you will get the alert. In current implementation you can use the simple expressions like $SOME_VARIABLE == '0' , or expressions with functions like count($SOME_VARIABLE) == '0' or filter($SOME_VARIABLE) == '0' . Also, you can combine these expressions using logical operators like && (AND) or || (OR). Examples $SOME_VARIABLE == '0' && count($ELSE_ONE_VARIABLE) > '0' $SOME_VARIABLE != 'some string value' || $ELSE_ONE_VARIABLE >= '0' filter($SOME_VARIABLE) <= '4' && count($ELSE_ONE_VARIABLE) != '5' Logical operator !(NOT) also supporting in the current implementation Examples !($SOME_VARIABLE == '5') && count($ELSE_ONE_VARIABLE) > '0' !($SOME_VARIABLE == 'some string value')","title":"Alert Language"},{"location":"manage_alerts_definitions/#functions","text":"","title":"Functions"},{"location":"manage_alerts_definitions/#count","text":"count(variable, period) - this is the general syntax of count function. The count function will return the number of records in the DB marked with this variable. The count function receives the two arguments: variable - the unique variable of the CRF item. period(not required) - the time period for filtering the subject's data by date of creating the record. The value of the period parameter must be the string that looks like 24 hours !!info You can use the following time units: * milliseconds * seconds * minutes * hours * days * weeks * months * years Usage examples: count($ELSE_ONE_VARIABLE) - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time count($ELSE_ONE_VARIABLE, '24 hours') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours count($ELSE_ONE_VARIABLE, '7 days') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last week So, if you need to check did some subject fill some CRF during of 24 hours you can use the following expression: count ( $ELSE_ONE_VARIABLE , '24 hours' ) == '0' ; In this case, if some subject didn't fill the CRF that contains an item with the current variable during 24 hours the function count($ELSE_ONE_VARIABLE, '24 hours') will return 0. The entire expression count($ELSE_ONE_VARIABLE, '24 hours') == '0' will return true and you will get the alert.","title":"Count"},{"location":"manage_alerts_definitions/#filter","text":"filter(variable, period, value, take) - this is the general syntax of the filter function. The filter function will return the number of records in the DB marked with this variable. The count function receives the following arguments: variable - the unique variable of the CRF item. period(not required) - the time period for filtering the subject's data by the date of creating the record. value(not required) - the expression that will be used for filtering by the value that a record contains take(not required) - the expression that will be used to get the part of the records array The period parameter works similarly to the period parameter in the count function. The value of the value parameter must be the string that looks like >2 , yes , ==5 Info You can use the following operators: == != >= <= > < Example ==2 some string value >=5 the expression ==2 and 2 or ==yes and yes are equals! The value of the take parameter must be the string that looks like '-1' , '1' , '5' The take parameter provides the ability to get the part of records from the records array. Examples '1' - The first event '2' - The first 2 events '-1' - The last event '-4' - The last 4 events the records that receive from the DB ordered by date created. The order of the filters appling is following filtering by variable filtering by period filtering by 'take' filtering by 'value' if you don't need to use some parameter you can set null instead. Usage examples filter($ELSE_ONE_VARIABLE) - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time filter($ELSE_ONE_VARIABLE, '24 hours') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours filter($ELSE_ONE_VARIABLE, '24 hours', '>=5') - will return the number of records with variable $ELSE_ONE_VARIABLE for the last 24 hours that contains the value more or equal '5' filter($ELSE_ONE_VARIABLE, null, '>=5') - will return the number of records with variable $ELSE_ONE_VARIABLE for the all-time that contains the value more or equal '5' filter($ELSE_ONE_VARIABLE, null, '>=5', '2') - at first, will find all records with variable $ELSE_ONE_VARIABLE for the all-time. The next step - will receive the first 2 members of this array. Finally - will return the number of the records from the array that received in step two that contains the value more or equal to '5' So, if you need to check did some subject has some critical value in his data during of 24 hours you can use the following expression: filter ( $ELSE_ONE_VARIABLE , '24 hours' , '>10' ) > '0' ; In this case, if some subject entered this critical value in the CRF that contains an item with the current variable during 24 hours the function filter ( $ELSE_ONE_VARIABLE , '24 hours' , '>10' ) will return some value that will be more than 0. The entire expression filter($ELSE_ONE_VARIABLE, '24 hours', '>10') > '0' will return true, and you will get the alert.","title":"Filter"},{"location":"manage_alerts_definitions/#simple-expressions","text":"In current implementation you can use the simple expressions like $SOME_VARIABLE == '0' . In this case this expression will be replaced to filter($SOME_VARIABLE, null, '== 0') != 0 Example Input Output $SOME_VARIABLE == '0' filter($SOME_VARIABLE, null, '== 0') != 0 $SOME_VARIABLE filter($SOME_VARIABLE, null, null) != 0 $SOME_VARIABLE == '3'&& $ELSE_ONE_VARIABLE > '2' filter($SOME_VARIABLE, null, '== 3') != 0 && filter($ELSE_ONE_VARIABLE, null, '>2') != 0","title":"Simple expressions"},{"location":"manage_alerts_definitions/#alert-action","text":"You can define a few actions to alert definition by ADD ACTION green button. These actions are additional settings that allow adding additional recipients to send email or SMS. In the current time supported SMS and email actions. Each action has a few properties: Action Type - Send Email/SMS if there is alert. Expired Period - If alert will be expired after a period of its generation. Expired Period Units - seconds/ minutes/ days etc. Action recipient - email or phone number that will get an email/SMS about this alert.","title":"Alert Action"},{"location":"manage_alerts_definitions/#study-alerts","text":"If there are alerts of your study you can see a red bell in Forms near the hamburger. To see alerts list - click on Study Alerts in hamburger menu. You can filter the alerts list. Tip You can change status/ delete each alert in the list.","title":"Study Alerts"},{"location":"manage_data/","text":"Manage Data Learning Objectives Understand data entry controls Enter, save, edit data Mark CRF complete View Audit history Add subject Site CRC and PI roles can add subjects. Study role- Administrator can not add new subjects For additional information how to add subject . Scheduling events Events can be scheduled before data entry Scheduling an event simply means entering the (planned) start date of that event for that subject. You can schedule a number of events at once, or just schedule them when you wish to start data entry for the eCRFs. Create event by CRF In s ubject Flask Events page there is a green button CREATE EVENT BY CRF This button open Create event group card with events list. Check the relevant event. The event will be added to subject's events list. Enter Data Site role user can enter data in each CRF in the event. The CRF opened, user enter the data. In the end of CRF there are a few options: Mark as close - If you mark CRF as 'Closed', you will be not able to change the data next time (unless customer admin user reopen the CRF). Save and back - Save this CRF and go back to the prev CRF in this event. Save and next - Save this CRF and go to the next CRF in this event. After site role user (like CRC) entered data, the last edited and status values are updated. Edit Data After user entered data he/she can edit data (if CRF is not closed). The Enter data button shifts to Edit Data button. Add CRF/ Delete Event In the end on the event's CRFs list there are 2 buttons: ADD CRF to add CRF in this event. DELETE EVENT to delete this event. Info If subject has PRO all first period PRO events are generated when the subject created.","title":"Manage Data"},{"location":"manage_data/#manage-data","text":"","title":"Manage Data"},{"location":"manage_data/#learning-objectives","text":"Understand data entry controls Enter, save, edit data Mark CRF complete View Audit history","title":"Learning Objectives"},{"location":"manage_data/#add-subject","text":"Site CRC and PI roles can add subjects. Study role- Administrator can not add new subjects For additional information how to add subject .","title":"Add subject"},{"location":"manage_data/#scheduling-events","text":"Events can be scheduled before data entry Scheduling an event simply means entering the (planned) start date of that event for that subject. You can schedule a number of events at once, or just schedule them when you wish to start data entry for the eCRFs.","title":"Scheduling events"},{"location":"manage_data/#create-event-by-crf","text":"In s ubject Flask Events page there is a green button CREATE EVENT BY CRF This button open Create event group card with events list. Check the relevant event. The event will be added to subject's events list.","title":"Create event by CRF"},{"location":"manage_data/#enter-data","text":"Site role user can enter data in each CRF in the event. The CRF opened, user enter the data. In the end of CRF there are a few options: Mark as close - If you mark CRF as 'Closed', you will be not able to change the data next time (unless customer admin user reopen the CRF). Save and back - Save this CRF and go back to the prev CRF in this event. Save and next - Save this CRF and go to the next CRF in this event. After site role user (like CRC) entered data, the last edited and status values are updated.","title":"Enter Data"},{"location":"manage_data/#edit-data","text":"After user entered data he/she can edit data (if CRF is not closed). The Enter data button shifts to Edit Data button.","title":"Edit Data"},{"location":"manage_data/#add-crf-delete-event","text":"In the end on the event's CRFs list there are 2 buttons: ADD CRF to add CRF in this event. DELETE EVENT to delete this event. Info If subject has PRO all first period PRO events are generated when the subject created.","title":"Add CRF/ Delete Event"},{"location":"manage_features/","text":"Features In order to manage customer features, click on Features in the left bar. There are a few available features. Forms To add/remove Forms from the left bar - add/delete it from your customer features. If this feature is turn on, Form designer field will be added to user edit If you mark Form designer option, this user can enter to Flask Forms and modify CRFs, Events etc. By default only Customer admin users can enter to Flask Forms. Create user in EDC This feature related to study with EDC DB. It creates user in EDC when you create user in Flask. Enrollment target popup notification Each study has Enrollment Target value. This feature popup a warning message when user add subject, If the number of patients is greater than enrollment target number. Monthly billing report for Customer Administrator This feature sends billing report in each month (In the end of the month) to customer admin user by his/her email. Monthly billing report for PI This feature sends billing report in each month (In the end of the month) to PI user by his/her email. One click add subject Add subject with one click on ADD SUBJECT button This feature creates a subject without real email and phone. If study has PRO this feature is not supported. If CRC user assign to 2 sites and more this feature is not supported (the user should check the relevant site). This feature relates to Subject Label Calculation feature. Subject Label Calculation This feature adds subject with an automatic label number. Subject Prefix * Prefix Subject label can be defined to start with study unique protocol id or site unique identifier * Prefix mask number of numbers after the Prefix Example Prefix = Site unique identifier, Prefix mask = NNN, subjects label seems like site01-001, site1-002 etc. Important If you have existing study, Go to study edit to define the subject prefix calculation node. Info You can change the subject numerator to specific site / study . If you define your study subject prefix to \"site unique identifier\", You can go to site edit or site add and change the Starting subject ID to the desired number. The next patient label will be with this number (SHEBA-024). Subject Personal Information This feature adds more fields to add subject function. First name Last name ID Number/Passport Subject signed the ICF IDP configuration This feature allows you to add GOOGLE Account to user, For customers without their own IDPs like SAML or OpenId. In add user and edit user you can define additional GOOGLE accounts to user. This feature allows the user to log in to Flask with multiple GOOGLE accounts. If you want to enable this feature to subject also, you should define it in your study","title":"Features"},{"location":"manage_features/#features","text":"In order to manage customer features, click on Features in the left bar. There are a few available features.","title":"Features"},{"location":"manage_features/#forms","text":"To add/remove Forms from the left bar - add/delete it from your customer features. If this feature is turn on, Form designer field will be added to user edit If you mark Form designer option, this user can enter to Flask Forms and modify CRFs, Events etc. By default only Customer admin users can enter to Flask Forms.","title":"Forms"},{"location":"manage_features/#create-user-in-edc","text":"This feature related to study with EDC DB. It creates user in EDC when you create user in Flask.","title":"Create user in EDC"},{"location":"manage_features/#enrollment-target-popup-notification","text":"Each study has Enrollment Target value. This feature popup a warning message when user add subject, If the number of patients is greater than enrollment target number.","title":"Enrollment target popup notification"},{"location":"manage_features/#monthly-billing-report-for-customer-administrator","text":"This feature sends billing report in each month (In the end of the month) to customer admin user by his/her email.","title":"Monthly billing report for Customer Administrator"},{"location":"manage_features/#monthly-billing-report-for-pi","text":"This feature sends billing report in each month (In the end of the month) to PI user by his/her email.","title":"Monthly billing report for PI"},{"location":"manage_features/#one-click-add-subject","text":"Add subject with one click on ADD SUBJECT button This feature creates a subject without real email and phone. If study has PRO this feature is not supported. If CRC user assign to 2 sites and more this feature is not supported (the user should check the relevant site). This feature relates to Subject Label Calculation feature.","title":"One click add subject"},{"location":"manage_features/#subject-label-calculation","text":"This feature adds subject with an automatic label number. Subject Prefix * Prefix Subject label can be defined to start with study unique protocol id or site unique identifier * Prefix mask number of numbers after the Prefix Example Prefix = Site unique identifier, Prefix mask = NNN, subjects label seems like site01-001, site1-002 etc. Important If you have existing study, Go to study edit to define the subject prefix calculation node. Info You can change the subject numerator to specific site / study . If you define your study subject prefix to \"site unique identifier\", You can go to site edit or site add and change the Starting subject ID to the desired number. The next patient label will be with this number (SHEBA-024).","title":"Subject Label Calculation"},{"location":"manage_features/#subject-personal-information","text":"This feature adds more fields to add subject function. First name Last name ID Number/Passport Subject signed the ICF","title":"Subject Personal Information"},{"location":"manage_features/#idp-configuration","text":"This feature allows you to add GOOGLE Account to user, For customers without their own IDPs like SAML or OpenId. In add user and edit user you can define additional GOOGLE accounts to user. This feature allows the user to log in to Flask with multiple GOOGLE accounts. If you want to enable this feature to subject also, you should define it in your study","title":"IDP configuration"},{"location":"manage_forms/","text":"Manage Forms In the left menu bar click on FORMS. What is Flask Forms? Flask Forms is an online eSource app Forms features unlimited subjects, forms and data. You can create the eCRFs yourself using a super friendly interface. Includes a library of ready-to-go eCRF templates. Runs on desktops, notebooks, tablets and phones. Build your eSource app In Forms page you can define the study's CRFs, Events , Pro and Alert rules. CRFS In order to create a new CRF click on ADD CRF green button CRF Properties In CRF card you need to define the CRF properties (You can also edit it after the saving). * Queries status - Turn on/off CRF queries option (See manage queries ). When CRF queries is Turn on - each item in this CRF has queries dialog - add query by click on the question mark. Layout - Layout of CRF, There are several layouts: Default (question after question vertically) Grid Cards on grid Columns - If the layout is grid or Cards on grid choose the number of fields in each row. Name - CRF name Description - CRF Description Click YES to create this CRF Layout examples: Default layout Grid layout Cards on grid layout CRF Sections In Section card define CRF's section, You can also edit it after the saving. (One CRF can include more than one section) Name Description You can add sections to CRF by click on ADD SECTION button CRF Items You can define items in each CRF. By click on component the component is added to the CRF (in the end of the list) After adding item you should define the new item properties by click on EDIT option Edit CRF Item By click on EDIT button of item an Edit card is opened. Labels In the first tab LABELS you should define item's name, description etc. Value Second tab is VALUE you can set a default value to this item Validations The third tab is Validation , each component has another validation options. For example - number component has the following validation tab: Required, Disabled and Confirm parameters exist in each component. Required - Check it if this item is a mandatory. Disabled - Check it if this item is disabled - the user cannot change/edit it Confirm - This item popup a confirm dialog card. Branching Logic The fourth tab is the Branching Logic , In this tab you can write a simple logic for this item. Quote Branching logic expression for this item To use the autocomplete service, type \"$\" and select the variable of interest for you. Use variables to make expression for hide current form control. The terminal supports any JavaScript expressions for the value of the available form variables. For example: $ITEM_IMPORTANT_VAR == 'string_var_value' For example - Show/Hide method. Item that depends on another item. A radio button item has 2 options - Man or Female (required question) If user check female -> Another item 'Number of children' is opened. For do it - you need to create the basic item (man/female) first, Then save it by click on SAVE button in the top of the page. By save option the system generates variables to the CRF items, and you can use them for the branching logic. After you saved items CRF you can add branching logic to 'Number of children' item, Go to Hide/Show item branching logic and write your logic. CRF Actions There are a few available actions for each CRF. In CRFS tab there is an ACTIONS blue button with the following options: PREVIEW - By a click on PREVIEW option - a new window is opened with this CRF layout Edit CRF - Edit CRF Properties Edit ITEMS - Edit CRF Items DUPLICATE CRF - By click on this option a new CRF is created same as this CRF (with the same properties, sections and items) Notice: The CRF OID and items' variable are different. DELETE - Delete this CRF Export CSV There is EXPORT CSV green button. By click on this button you download a zip folder with all CRF data. One CSV file for each CRF. Event Definitions In order to manage study events, click on EVENT DEFINITIONS tab. Create event by click on ADD EVENT DEFINITION green button There are a few properties of event: Name - the display name of this event Attached CRF list - CRFs in this event. ADD CRF green button to add CRF in this event one more time add option in this event's CRF to add additional this CRF in this event Render 'Finish' on last form only Finish button will be appeared in the last CRF of this event (instead of appear in each CRF - by default) Attached Rules list, You can create rules and add them to this event. Event rule generates an error when CRC save the event with error. When user try to save the last CRF inside the event this rule will be checked and user will get an error if this expression returns false. Click SAVE blue button to save your changes OR BACK TO LIST / CLEAR CHANGES to unsave your changes. Event Definition Actions There are a few available actions for each Event. Edit event definition - to edit this event (add CRF, delete CRF etc.) Delete - Delete this event. Study Schedules This tab is related to study PRO. If your study has PRO for patients To define PRO/s for study you need to create study schedule There are a few definitions of study schedule: Name - Name of this Study Schedule Periods - Study periods, Add periods by click on ADD PERIOD blue button Period Length - Period length in days Name - the name of this period Description - description of this period Allow expanding this period - continue this period until another period begin to the subject OR until study has been completed (study completion date value). For randomized subjects - Begin this period for randomized subject (CRC should define it to each subject) Event Definitions - Define the event to this period PRO Click on Event Definitions, Event Definitions list will be opened, choose one event. Click on ADD EVENT DEFINITIONS green button (You can add a few events). The selected event will be added to the list with Scheduled time and Scheduled days. Scheduled time You can choose the time of available this event to PRO of subject Scheduled days You can choose the days of this PRO event. By default, Scheduled time is 10:00 and Scheduled days are all the days of week. Save you Study Schedule by click on SAVE button Alert Definitions See Alert Definitions Languages You can switch between languages by click on Languages tab and select the desired language. Studies In the last option in the top bar you can switch between your studies and manage forms to each one of them. (In case you have several studies). Hamburger The last item in the top bar is the \"Hamburger\" By standing with the mouse on the hamburger a list of options opens. Signed in as - The login user (It's you ) Study Alerts - Open study alerts list Database Audit Log - Open the data audit log (create/update/delete CRF/Events/Data etc.) Restore Study CRFs - Put backup of study CRFs and restore it here (in the current study) Restore study CRFs restores json file. Create a dump of study CRFs Create a backup of this study's CRFs. NOTE - You can create a dump includes/excludes events definitions, You can dump a few CRFs you choose. This option downloads CRFsDump.zip folder includes json file. Extract the file to restore it. Logout - Logout from FlaskData Return to FlaskData App to return to flask application click on FlaskData logo","title":"Manage Forms"},{"location":"manage_forms/#manage-forms","text":"In the left menu bar click on FORMS.","title":"Manage Forms"},{"location":"manage_forms/#what-is-flask-forms","text":"Flask Forms is an online eSource app Forms features unlimited subjects, forms and data. You can create the eCRFs yourself using a super friendly interface. Includes a library of ready-to-go eCRF templates. Runs on desktops, notebooks, tablets and phones.","title":"What is Flask Forms?"},{"location":"manage_forms/#build-your-esource-app","text":"In Forms page you can define the study's CRFs, Events , Pro and Alert rules.","title":"Build your eSource app"},{"location":"manage_forms/#crfs","text":"In order to create a new CRF click on ADD CRF green button","title":"CRFS"},{"location":"manage_forms/#crf-properties","text":"In CRF card you need to define the CRF properties (You can also edit it after the saving). * Queries status - Turn on/off CRF queries option (See manage queries ). When CRF queries is Turn on - each item in this CRF has queries dialog - add query by click on the question mark. Layout - Layout of CRF, There are several layouts: Default (question after question vertically) Grid Cards on grid Columns - If the layout is grid or Cards on grid choose the number of fields in each row. Name - CRF name Description - CRF Description Click YES to create this CRF","title":"CRF Properties"},{"location":"manage_forms/#layout-examples","text":"Default layout Grid layout Cards on grid layout","title":"Layout examples:"},{"location":"manage_forms/#crf-sections","text":"In Section card define CRF's section, You can also edit it after the saving. (One CRF can include more than one section) Name Description You can add sections to CRF by click on ADD SECTION button","title":"CRF Sections"},{"location":"manage_forms/#crf-items","text":"You can define items in each CRF. By click on component the component is added to the CRF (in the end of the list) After adding item you should define the new item properties by click on EDIT option","title":"CRF Items"},{"location":"manage_forms/#edit-crf-item","text":"By click on EDIT button of item an Edit card is opened.","title":"Edit CRF Item"},{"location":"manage_forms/#labels","text":"In the first tab LABELS you should define item's name, description etc.","title":"Labels"},{"location":"manage_forms/#value","text":"Second tab is VALUE you can set a default value to this item","title":"Value"},{"location":"manage_forms/#validations","text":"The third tab is Validation , each component has another validation options. For example - number component has the following validation tab: Required, Disabled and Confirm parameters exist in each component. Required - Check it if this item is a mandatory. Disabled - Check it if this item is disabled - the user cannot change/edit it Confirm - This item popup a confirm dialog card.","title":"Validations"},{"location":"manage_forms/#branching-logic","text":"The fourth tab is the Branching Logic , In this tab you can write a simple logic for this item. Quote Branching logic expression for this item To use the autocomplete service, type \"$\" and select the variable of interest for you. Use variables to make expression for hide current form control. The terminal supports any JavaScript expressions for the value of the available form variables. For example: $ITEM_IMPORTANT_VAR == 'string_var_value' For example - Show/Hide method. Item that depends on another item. A radio button item has 2 options - Man or Female (required question) If user check female -> Another item 'Number of children' is opened. For do it - you need to create the basic item (man/female) first, Then save it by click on SAVE button in the top of the page. By save option the system generates variables to the CRF items, and you can use them for the branching logic. After you saved items CRF you can add branching logic to 'Number of children' item, Go to Hide/Show item branching logic and write your logic.","title":"Branching Logic"},{"location":"manage_forms/#crf-actions","text":"There are a few available actions for each CRF. In CRFS tab there is an ACTIONS blue button with the following options: PREVIEW - By a click on PREVIEW option - a new window is opened with this CRF layout Edit CRF - Edit CRF Properties Edit ITEMS - Edit CRF Items DUPLICATE CRF - By click on this option a new CRF is created same as this CRF (with the same properties, sections and items) Notice: The CRF OID and items' variable are different. DELETE - Delete this CRF","title":"CRF Actions"},{"location":"manage_forms/#export-csv","text":"There is EXPORT CSV green button. By click on this button you download a zip folder with all CRF data. One CSV file for each CRF.","title":"Export CSV"},{"location":"manage_forms/#event-definitions","text":"In order to manage study events, click on EVENT DEFINITIONS tab. Create event by click on ADD EVENT DEFINITION green button There are a few properties of event: Name - the display name of this event Attached CRF list - CRFs in this event. ADD CRF green button to add CRF in this event one more time add option in this event's CRF to add additional this CRF in this event Render 'Finish' on last form only Finish button will be appeared in the last CRF of this event (instead of appear in each CRF - by default) Attached Rules list, You can create rules and add them to this event. Event rule generates an error when CRC save the event with error. When user try to save the last CRF inside the event this rule will be checked and user will get an error if this expression returns false. Click SAVE blue button to save your changes OR BACK TO LIST / CLEAR CHANGES to unsave your changes.","title":"Event Definitions"},{"location":"manage_forms/#event-definition-actions","text":"There are a few available actions for each Event. Edit event definition - to edit this event (add CRF, delete CRF etc.) Delete - Delete this event.","title":"Event Definition Actions"},{"location":"manage_forms/#study-schedules","text":"This tab is related to study PRO. If your study has PRO for patients To define PRO/s for study you need to create study schedule There are a few definitions of study schedule: Name - Name of this Study Schedule Periods - Study periods, Add periods by click on ADD PERIOD blue button Period Length - Period length in days Name - the name of this period Description - description of this period Allow expanding this period - continue this period until another period begin to the subject OR until study has been completed (study completion date value). For randomized subjects - Begin this period for randomized subject (CRC should define it to each subject) Event Definitions - Define the event to this period PRO Click on Event Definitions, Event Definitions list will be opened, choose one event. Click on ADD EVENT DEFINITIONS green button (You can add a few events). The selected event will be added to the list with Scheduled time and Scheduled days. Scheduled time You can choose the time of available this event to PRO of subject Scheduled days You can choose the days of this PRO event. By default, Scheduled time is 10:00 and Scheduled days are all the days of week. Save you Study Schedule by click on SAVE button","title":"Study Schedules"},{"location":"manage_forms/#alert-definitions","text":"See Alert Definitions","title":"Alert Definitions"},{"location":"manage_forms/#languages","text":"You can switch between languages by click on Languages tab and select the desired language.","title":"Languages"},{"location":"manage_forms/#studies","text":"In the last option in the top bar you can switch between your studies and manage forms to each one of them. (In case you have several studies).","title":"Studies"},{"location":"manage_forms/#hamburger","text":"The last item in the top bar is the \"Hamburger\" By standing with the mouse on the hamburger a list of options opens. Signed in as - The login user (It's you ) Study Alerts - Open study alerts list Database Audit Log - Open the data audit log (create/update/delete CRF/Events/Data etc.) Restore Study CRFs - Put backup of study CRFs and restore it here (in the current study) Restore study CRFs restores json file. Create a dump of study CRFs Create a backup of this study's CRFs. NOTE - You can create a dump includes/excludes events definitions, You can dump a few CRFs you choose. This option downloads CRFsDump.zip folder includes json file. Extract the file to restore it. Logout - Logout from FlaskData Return to FlaskData App to return to flask application click on FlaskData logo","title":"Hamburger"},{"location":"manage_queries/","text":"Manage Queries In the left menu bar click on Queries. In this page - Queries index you can see all queries data of this study. c You can filter Queries by sites, subject and status and then click APPLY You can click on each query row to see query properties, add your comment, close the query or delete it. Query Details Query Details page includes Summary and Messages cards, Edit and Delete buttons. Query Edit By click on EDIT blue button a discussion card opens. You can close the query or add your message. You can click on each query row to see query properties, add your comment, close the query or delete it.","title":"Manage Queries"},{"location":"manage_queries/#manage-queries","text":"In the left menu bar click on Queries. In this page - Queries index you can see all queries data of this study. c You can filter Queries by sites, subject and status and then click APPLY You can click on each query row to see query properties, add your comment, close the query or delete it.","title":"Manage Queries"},{"location":"manage_queries/#query-details","text":"Query Details page includes Summary and Messages cards, Edit and Delete buttons.","title":"Query Details"},{"location":"manage_queries/#query-edit","text":"By click on EDIT blue button a discussion card opens. You can close the query or add your message. You can click on each query row to see query properties, add your comment, close the query or delete it.","title":"Query Edit"},{"location":"manage_sites/","text":"Manage Sites In order to manage research sites, click on Sites in the left bar. Default site By default, you have one site assigned to your study, called Default-Site-XXX Edit the default site by ACTIONS -> EDIT Edit Site In the Edit option you can edit your site properties. Click SAVE green button to save your site properties. Site Profile In Site Profile you can see your site's definition, add comments, and mange this site's Users by click on ACTIONS -> Manage Users Mange Users In Site Manage Users you can remove/add existing User to this site (if you don't have the User, go to create it ) You can add a User by typing any part of his name - the application will show you a list of matching User names. Click on invite green button Now you have a site with Users (like - CRC, PI) in your study. Add a new site In the Sites index page you can add new sites to your study. To add site click on ADD SITE button Enter the site properties and save it by click on SAVE green button.","title":"Manage Sites"},{"location":"manage_sites/#manage-sites","text":"In order to manage research sites, click on Sites in the left bar.","title":"Manage Sites"},{"location":"manage_sites/#default-site","text":"By default, you have one site assigned to your study, called Default-Site-XXX Edit the default site by ACTIONS -> EDIT","title":"Default site"},{"location":"manage_sites/#edit-site","text":"In the Edit option you can edit your site properties. Click SAVE green button to save your site properties.","title":"Edit Site"},{"location":"manage_sites/#site-profile","text":"In Site Profile you can see your site's definition, add comments, and mange this site's Users by click on ACTIONS -> Manage Users","title":"Site Profile"},{"location":"manage_sites/#mange-users","text":"In Site Manage Users you can remove/add existing User to this site (if you don't have the User, go to create it ) You can add a User by typing any part of his name - the application will show you a list of matching User names. Click on invite green button Now you have a site with Users (like - CRC, PI) in your study.","title":"Mange Users"},{"location":"manage_sites/#add-a-new-site","text":"In the Sites index page you can add new sites to your study. To add site click on ADD SITE button Enter the site properties and save it by click on SAVE green button.","title":"Add a new site"},{"location":"manage_studies/","text":"Studies You can run a few studies in parallel. You can add/edit your studies properties, Users, sites etc. Add study To add studies go to studies index page by clicking on studies in the left bar. Click on ADD STUDY green button. Fill your study properties and click SAVE mange Users page will be opened. Study values Database and EDC URL fields are related to EDC db, if you have EDC (clin capture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB). Study manage Users In manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcome emails will be sent to Users' emails. The Manage Sites page will be opened. Study manage sites In manage sites page you can add/remove site from this study. To add a new site to your study - click on Create Site first. Type any part of the site name in the Select sites box and pick the site you want to add to your study. Click NEXT STEP Study Edit In the Studies index page you can edit your study. To edit your study - check it and then click on the green ACTIONS button and choose the Edit option. In the Edit Study page you can define your study profile, definitions etc. Note Study subject prefix : Prefix for automatically creating a subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the Study Profile will be opened. Archived studies To mark study as Archived you need to change its status to Close . Danger Archived studies cannot be modified!! Studies with Closed status, you can see their data but cannot change data, add subject etc. There are inactive studies. If you mark study status as closed, the study marked as Archived , and you cannot see it in studies list. But don't worry go to studies index page and filter studies with Archived only Now you can see the study but cannot change it. Study Profile In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments. There is a Comments card that you can write all free text comments about your study. There is an ACTIONS green button with Manage Users and Manage Sites options. Study Metadata In study profile there is a Study Metadata card. In this table you can add/edit/delete free text meta-data strings describing your study. For example, you can use Study MetaData to store the URL of a mobile app. Extract study_metadata by API You can get this table data from the generic API . Body request should be something like: { \"tableName\" : \"study_metadata\" , \"fromDate\" : \"2018-03-29T11:44:12.511Z\" , \"toDate\" : \"2020-12-29T11:44:12.511Z\" }","title":"Manage Studies"},{"location":"manage_studies/#studies","text":"You can run a few studies in parallel. You can add/edit your studies properties, Users, sites etc.","title":"Studies"},{"location":"manage_studies/#add-study","text":"To add studies go to studies index page by clicking on studies in the left bar. Click on ADD STUDY green button. Fill your study properties and click SAVE mange Users page will be opened. Study values Database and EDC URL fields are related to EDC db, if you have EDC (clin capture) db you should fill them. Enable patient reported outcome module? Check this checkbox if your study has a PRO for patients. PRO URL : If study has another PRO then FlaskData fill the PRO URL field with your study's PRO URL. Package : There are 3 available packages, Start, Submit and Validate. Start - study uses IRB and Forms Submit - Flask+Forms+Tools+EDC. Unlimited sites. Validate - Flask+Forms+Tools+EDC. Limited to 3 sites. Alert data source : Data for alert definitions (If study uses clinCapture you should choose PostgreSQL otherwise choose MongoDB).","title":"Add study"},{"location":"manage_studies/#study-manage-users","text":"In manage Users page you can add/remove User from this study. To add a new User to the study - you need to create the User first. Type any part of the User's name in the Select Users box and choose the relevant User. Click NEXT STEP , Welcome emails will be sent to Users' emails. The Manage Sites page will be opened.","title":"Study manage Users"},{"location":"manage_studies/#study-manage-sites","text":"In manage sites page you can add/remove site from this study. To add a new site to your study - click on Create Site first. Type any part of the site name in the Select sites box and pick the site you want to add to your study. Click NEXT STEP","title":"Study manage sites"},{"location":"manage_studies/#study-edit","text":"In the Studies index page you can edit your study. To edit your study - check it and then click on the green ACTIONS button and choose the Edit option. In the Edit Study page you can define your study profile, definitions etc. Note Study subject prefix : Prefix for automatically creating a subject label, like study1-001. Subject\u2019s IDPs settings : IDP settings for subjects-patients. When you click SAVE the Study Profile will be opened.","title":"Study Edit"},{"location":"manage_studies/#archived-studies","text":"To mark study as Archived you need to change its status to Close . Danger Archived studies cannot be modified!! Studies with Closed status, you can see their data but cannot change data, add subject etc. There are inactive studies. If you mark study status as closed, the study marked as Archived , and you cannot see it in studies list. But don't worry go to studies index page and filter studies with Archived only Now you can see the study but cannot change it.","title":"Archived studies"},{"location":"manage_studies/#study-profile","text":"In the Study Profile page you can see your study's definitions, alert rules, analytic rules, Users, sites and comments. There is a Comments card that you can write all free text comments about your study. There is an ACTIONS green button with Manage Users and Manage Sites options.","title":"Study Profile"},{"location":"manage_studies/#study-metadata","text":"In study profile there is a Study Metadata card. In this table you can add/edit/delete free text meta-data strings describing your study. For example, you can use Study MetaData to store the URL of a mobile app. Extract study_metadata by API You can get this table data from the generic API . Body request should be something like: { \"tableName\" : \"study_metadata\" , \"fromDate\" : \"2018-03-29T11:44:12.511Z\" , \"toDate\" : \"2020-12-29T11:44:12.511Z\" }","title":"Study Metadata"},{"location":"manage_subjects/","text":"Manage Subjects In the left menu bar click on Subjects. In this page - Subjects index you can see study subjects and their CRFs data. You can filter Subjects by site, or what you want by the Search filter and then click APPLY You can click on each subject and go to Flask Events Flask Events In flask events page you see al subject's events, crfs and data. Note You can just view the data (cannot edit and add CRFs). Just site role users can edit Subject's data. You can see all subject's events list. By click on event - list of this event CRFs opens. You can view the data by click on View option. Customer admin user has permissions to re-open the closed CRFs. Add Subject Site role user can add subject on his/her site. Click on ADD SUBJECT green button adds a new subject If study has ePRO, CRC should define subject's email and phone number In Subjects index page there is Actions blue button with Edit and Profile options. By check a subject and click Edit/Profile you open Profile page. Subject Profile In Subject Profile page site role user can edit subject's data by click on the pen. Email - The email of this subject Mobile phone - Phone number Status - The status of this subject There are Studies, Sites and comments cards of this subject. Actions In subject profile page there is an ACTIONS green button with a few options: Welcome back - This option appears if study has PRO. Reset password - send email with reset password require. Subject Events By click on subject in Subjects Index page, the Flask Events page opens. In this page site role user can create events, add CRFs, Enter data, Deactivate CRF etc. Send Message In subject's Flask Events page there is SEND MESSAGE green button. Click on this button open a page with option to send Email/SMS to subject. Randomize If study has PRO with Randomized option An additional button will appear - RANDOMIZED In Generate events by treatment plan period you should define the start period and choose the period for this subject.","title":"Manage Subjects"},{"location":"manage_subjects/#manage-subjects","text":"In the left menu bar click on Subjects. In this page - Subjects index you can see study subjects and their CRFs data. You can filter Subjects by site, or what you want by the Search filter and then click APPLY You can click on each subject and go to Flask Events","title":"Manage Subjects"},{"location":"manage_subjects/#flask-events","text":"In flask events page you see al subject's events, crfs and data. Note You can just view the data (cannot edit and add CRFs). Just site role users can edit Subject's data. You can see all subject's events list. By click on event - list of this event CRFs opens. You can view the data by click on View option. Customer admin user has permissions to re-open the closed CRFs.","title":"Flask Events"},{"location":"manage_subjects/#add-subject","text":"Site role user can add subject on his/her site. Click on ADD SUBJECT green button adds a new subject If study has ePRO, CRC should define subject's email and phone number In Subjects index page there is Actions blue button with Edit and Profile options. By check a subject and click Edit/Profile you open Profile page.","title":"Add Subject"},{"location":"manage_subjects/#subject-profile","text":"In Subject Profile page site role user can edit subject's data by click on the pen. Email - The email of this subject Mobile phone - Phone number Status - The status of this subject There are Studies, Sites and comments cards of this subject.","title":"Subject Profile"},{"location":"manage_subjects/#actions","text":"In subject profile page there is an ACTIONS green button with a few options: Welcome back - This option appears if study has PRO. Reset password - send email with reset password require.","title":"Actions"},{"location":"manage_subjects/#subject-events","text":"By click on subject in Subjects Index page, the Flask Events page opens. In this page site role user can create events, add CRFs, Enter data, Deactivate CRF etc.","title":"Subject Events"},{"location":"manage_subjects/#send-message","text":"In subject's Flask Events page there is SEND MESSAGE green button. Click on this button open a page with option to send Email/SMS to subject.","title":"Send Message"},{"location":"manage_subjects/#randomize","text":"If study has PRO with Randomized option An additional button will appear - RANDOMIZED In Generate events by treatment plan period you should define the start period and choose the period for this subject.","title":"Randomize"},{"location":"manage_users/","text":"Manage Users In the left menu bar click on Users. In this page - Users index you can add Users to your study, edit Users, assign User to site etc. You can filter Users by study, site or what you want by the Search filter and then click APPLY Default Users By default, you have 4 Users assigned to your study: 1.Customer admin User - This is your User! 2.CRC Default - CRC User 3.PI Default - PI User 4.CRA Default - CRA User Each default User has another permissions. Edit User Edit the default Users to your right Users one by one, by ACTIONS -> EDIT option Profile In the User profile page there is a pencil icon in the right corner of Profile card , click on it in order to edit the User properties. After you create a new User or modify their email, you can send them an email to create password by clicking on Send create password You don't have to do it - your Users can log in with their Google account. User properties In edit User Profile action you can change a few User's parameters Role There are 3 roles Customer Admin - User has all customer permissions - add/edit studis, Users, sites, alerts etc. Study Role - User has study permissions - to see all study data (of all the sites) Site Role - User has site level permissions - to see his site data, add subject to his site, create events and crfs to subject. Form designer : define if User has Forms permissions - add/edit/delete Events and CRFs from the system (by default only customer admin Users can do it). Subscribe to Alerts : define if ths User will get alerts from this study (according to alert rules). Studies In Studies card you can see the User's studies Sites In Sites card you can see the User's sites (if the User is study role or customer admin he can see al study's sites) Comments In Comments card you can add comments about this User. Write your comments and click on ADD COMMENT button Mange User sites In User profile page you have an option to manage User sites. Note You have this option just if the User is a site role User, otherwise the User has permissions to all study's sites In manage User sites page you can add/remove sites from User privileges. User actions In User profile page you have ACTIONS green button. In these actions button you have a few actions options: Send create password - By clicking on this option you email the User with create a new password request. Login as this User - By clicking on this option you login to the system like you are this User. Modify password - By clicking on this option you can modify the User password. Add User To add User click on ADD USER green button in Users index page The User will be added to the selected study that appears in the title. User properties Email should be unique for each User. Role There are 3 optional roles: 2.1 Customer Admin - Administrator of the customer - who has all permissions of this account, like - create User, create site, build CRFs etc. 2.2 Study role - who has all study permissions - see, extract etc. all study data. 2.3 Site role - who has specific site/s permissions - add subject to his site, fill CRFs, see site's data etc. EDC Role - more specific role from Role (number 2), it's more relevant for customers that have EDC db. Click on SAVE green button. The User will get a Welcome message in their email.","title":"Manage Users"},{"location":"manage_users/#manage-users","text":"In the left menu bar click on Users. In this page - Users index you can add Users to your study, edit Users, assign User to site etc. You can filter Users by study, site or what you want by the Search filter and then click APPLY","title":"Manage Users"},{"location":"manage_users/#default-users","text":"By default, you have 4 Users assigned to your study: 1.Customer admin User - This is your User! 2.CRC Default - CRC User 3.PI Default - PI User 4.CRA Default - CRA User Each default User has another permissions.","title":"Default Users"},{"location":"manage_users/#edit-user","text":"Edit the default Users to your right Users one by one, by ACTIONS -> EDIT option","title":"Edit User"},{"location":"manage_users/#profile","text":"In the User profile page there is a pencil icon in the right corner of Profile card , click on it in order to edit the User properties. After you create a new User or modify their email, you can send them an email to create password by clicking on Send create password You don't have to do it - your Users can log in with their Google account. User properties In edit User Profile action you can change a few User's parameters Role There are 3 roles Customer Admin - User has all customer permissions - add/edit studis, Users, sites, alerts etc. Study Role - User has study permissions - to see all study data (of all the sites) Site Role - User has site level permissions - to see his site data, add subject to his site, create events and crfs to subject. Form designer : define if User has Forms permissions - add/edit/delete Events and CRFs from the system (by default only customer admin Users can do it). Subscribe to Alerts : define if ths User will get alerts from this study (according to alert rules).","title":"Profile"},{"location":"manage_users/#studies","text":"In Studies card you can see the User's studies","title":"Studies"},{"location":"manage_users/#sites","text":"In Sites card you can see the User's sites (if the User is study role or customer admin he can see al study's sites)","title":"Sites"},{"location":"manage_users/#comments","text":"In Comments card you can add comments about this User. Write your comments and click on ADD COMMENT button","title":"Comments"},{"location":"manage_users/#mange-user-sites","text":"In User profile page you have an option to manage User sites. Note You have this option just if the User is a site role User, otherwise the User has permissions to all study's sites In manage User sites page you can add/remove sites from User privileges.","title":"Mange User sites"},{"location":"manage_users/#user-actions","text":"In User profile page you have ACTIONS green button. In these actions button you have a few actions options: Send create password - By clicking on this option you email the User with create a new password request. Login as this User - By clicking on this option you login to the system like you are this User. Modify password - By clicking on this option you can modify the User password.","title":"User actions"},{"location":"manage_users/#add-user","text":"To add User click on ADD USER green button in Users index page The User will be added to the selected study that appears in the title. User properties Email should be unique for each User. Role There are 3 optional roles: 2.1 Customer Admin - Administrator of the customer - who has all permissions of this account, like - create User, create site, build CRFs etc. 2.2 Study role - who has all study permissions - see, extract etc. all study data. 2.3 Site role - who has specific site/s permissions - add subject to his site, fill CRFs, see site's data etc. EDC Role - more specific role from Role (number 2), it's more relevant for customers that have EDC db. Click on SAVE green button. The User will get a Welcome message in their email.","title":"Add User"},{"location":"registration/","text":"Registration Welcome to FlaskData FlaskData is a cloud API platform for clinical data collection and automated monitoring. Flaskdata is used in clinical trials to shorten R&D timelines and in patient care in order to acquire real-world evidence for safety and efficacy of therapeutics. FlaskData is exposed as an open cloud API and is based on a foundation of IAM (identity access management) with strong security & privacy to protect clinical data assets. FlaskData complies with regulatory requirements for 21 CFR Part 11, GDPR, HIPAA and Israeli Privacy Rule. Flaskdata provides 3 kinds of application services: Collect, Detect and Act. FlaskData Collect provides a RESTful API, desktop and mobile apps to manage research studies and to interact with patients, investigators and devices in clinical trials. FlaskData Detect enables you to define patterns of protocol deviations and FlaskData Act automates alert notifications to patients and clinical teams on exceptions and missing data. Audience Clinical trial management and operations teams - anyone who is involved with creating and running pre and post-market clinical R&D. Create a new account How to create a new account? It's so simple... Go to Registration Fill your properties and click CREATE AN ACCOUNT Welcome email will be sent to you. You're welcome to define your first study","title":"Registration"},{"location":"registration/#registration","text":"Welcome to FlaskData FlaskData is a cloud API platform for clinical data collection and automated monitoring. Flaskdata is used in clinical trials to shorten R&D timelines and in patient care in order to acquire real-world evidence for safety and efficacy of therapeutics. FlaskData is exposed as an open cloud API and is based on a foundation of IAM (identity access management) with strong security & privacy to protect clinical data assets. FlaskData complies with regulatory requirements for 21 CFR Part 11, GDPR, HIPAA and Israeli Privacy Rule. Flaskdata provides 3 kinds of application services: Collect, Detect and Act. FlaskData Collect provides a RESTful API, desktop and mobile apps to manage research studies and to interact with patients, investigators and devices in clinical trials. FlaskData Detect enables you to define patterns of protocol deviations and FlaskData Act automates alert notifications to patients and clinical teams on exceptions and missing data.","title":"Registration"},{"location":"registration/#audience","text":"Clinical trial management and operations teams - anyone who is involved with creating and running pre and post-market clinical R&D.","title":"Audience"},{"location":"registration/#create-a-new-account","text":"How to create a new account? It's so simple... Go to Registration Fill your properties and click CREATE AN ACCOUNT Welcome email will be sent to you. You're welcome to define your first study","title":"Create a new account"},{"location":"riskgraph_api/","text":"RiskGraph API Introduction Risk Graph is an API service that takes clinical data and evaluates if the data is anomalous. Audience Developers who want to use the RiskGraph API. Concepts and terms A developer will need credentials to a User account with a RiskGraph role. This User can be created by customer admin role. The RiskGraph User has access to call RiskGraph APIs. RiskGraph environment: riskgraph-api.flaskdata.io Select HTTPS in the Swagger Schemes dropdown before trying it out. For more information about Swagger and Authorization go to API Introduction . V0.1 Single dimensional case. Algorithm for anomaly detection: Distance based. Single variable Description Client calls API function with an array of {ts: Timestamp, key:value} where value is a positive integer { \u201cdevice\u201d: type, \u201ctolerance\u201d: t, \u201clowerBound\u201d: lower, \u201cupperBound\u201d: upper data: {ts: Timestamp, key:value } , { ts: Timestamp, key:value } , { ts: Timestamp, key:value } , { ts: Timestamp, key:value } , { ts: Timestamp, key:value } , . . . } } Function Loop on array where k is element k in the data array. Call Detectors; return levelOneAnomalyDetector() when: value is null return isAnomaly: \u2018t\u2019, reason: \u2018Missing value\u2019 when: Timestamp (k) < Timestamp (k-1) return isAnomaly: \u2018t\u2019, reason: \u2018Out of sequence\u2019 when: Timestamp (k) invalid timestamp return isAnomaly: \u2018t\u2019, reason: \u2018Invalid timestamp\u2019 when: value > upper || value < lower return isAnomaly: \u2018t\u2019, reason: \u2018Out of range\u2019 levelTwoAnomalyDetector() Element #1 is the baseline value. Compute maxDistance where Distance (k) = abs (value(k) - value(1) Compute cutoff = maxDistance/t when: Distance(k) > cutoff return isAnomaly: \u2018t\u2019, reason: \u2018Way out man\u2019 Return Data: { {key:value, isAnomaly:t|f, reason:text } , { key:value, isAnomaly:t|f, reason:text } , . . . } Comments Can we reverse-engineer a model for EDC queries? Who is the subject? Example Look Riskgraph MVP - simulations Google sheet doc. UI RiskGraph UI is available to RiskGraph user. Login to FlaskData Click on RiskGraph option in the left bar.","title":"RiskGraph"},{"location":"riskgraph_api/#riskgraph-api","text":"","title":"RiskGraph API"},{"location":"riskgraph_api/#introduction","text":"Risk Graph is an API service that takes clinical data and evaluates if the data is anomalous.","title":"Introduction"},{"location":"riskgraph_api/#audience","text":"Developers who want to use the RiskGraph API.","title":"Audience"},{"location":"riskgraph_api/#concepts-and-terms","text":"A developer will need credentials to a User account with a RiskGraph role. This User can be created by customer admin role. The RiskGraph User has access to call RiskGraph APIs. RiskGraph environment: riskgraph-api.flaskdata.io Select HTTPS in the Swagger Schemes dropdown before trying it out. For more information about Swagger and Authorization go to API Introduction .","title":"Concepts and terms"},{"location":"riskgraph_api/#v01","text":"Single dimensional case. Algorithm for anomaly detection: Distance based. Single variable","title":"V0.1"},{"location":"riskgraph_api/#description","text":"Client calls API function with an array of {ts: Timestamp, key:value} where value is a positive integer { \u201cdevice\u201d: type, \u201ctolerance\u201d: t, \u201clowerBound\u201d: lower, \u201cupperBound\u201d: upper data: {ts: Timestamp, key:value } , { ts: Timestamp, key:value } , { ts: Timestamp, key:value } , { ts: Timestamp, key:value } , { ts: Timestamp, key:value } , . . . } }","title":"Description"},{"location":"riskgraph_api/#function","text":"Loop on array where k is element k in the data array. Call Detectors; return","title":"Function"},{"location":"riskgraph_api/#leveloneanomalydetector","text":"when: value is null return isAnomaly: \u2018t\u2019, reason: \u2018Missing value\u2019 when: Timestamp (k) < Timestamp (k-1) return isAnomaly: \u2018t\u2019, reason: \u2018Out of sequence\u2019 when: Timestamp (k) invalid timestamp return isAnomaly: \u2018t\u2019, reason: \u2018Invalid timestamp\u2019 when: value > upper || value < lower return isAnomaly: \u2018t\u2019, reason: \u2018Out of range\u2019","title":"levelOneAnomalyDetector()"},{"location":"riskgraph_api/#leveltwoanomalydetector","text":"Element #1 is the baseline value. Compute maxDistance where Distance (k) = abs (value(k) - value(1) Compute cutoff = maxDistance/t when: Distance(k) > cutoff return isAnomaly: \u2018t\u2019, reason: \u2018Way out man\u2019 Return Data: { {key:value, isAnomaly:t|f, reason:text } , { key:value, isAnomaly:t|f, reason:text } , . . . }","title":"levelTwoAnomalyDetector()"},{"location":"riskgraph_api/#comments","text":"Can we reverse-engineer a model for EDC queries? Who is the subject?","title":"Comments"},{"location":"riskgraph_api/#example","text":"Look Riskgraph MVP - simulations Google sheet doc.","title":"Example"},{"location":"riskgraph_api/#ui","text":"RiskGraph UI is available to RiskGraph user. Login to FlaskData Click on RiskGraph option in the left bar.","title":"UI"},{"location":"study_dashboard/","text":"Study Dashboard Study Dashboard show your study monitoring. In studies index page, click on your study, now you see your study dashboard. Important By press on study the study name appear in title bar and all the actions will be related to this study (like add user, add site etc.) To see your data monitoring in the dashboard you should define it first in monitoring option. Monitoring In the monitoring section there is a slick with analytics of your study data. The graphs can be as bar, pie, table etc. With different colors (red, green or blue) Alerts In alerts card there is a table withe the last 10 active alerts. If there are active alerts to this study a bell appears in title bar with the number of alerts. You can click on each alert to see more properties, add comments or change its status. To see all alerts of this study click on All alerts blue link All Alerts In study All Alerts page you can see all alerts of this study. You can filter the alerts, export them to CSV file and update alert status by press on alert. Filters In study dashboard page there is a filter option. Period - alert date <= this select date Sites Subjects This filter filters graphs and alerts accordingly. EDC If this study has EDC DB EDC blue button appears. Click it opens a new window with study ClinCapture app. Additional Tools There is option to add tools to your study. The optional tools exist in Tools . If you want other users (study role and site role users) to see tools you need to add them to specific study. Click on ADDITIONAL TOOLS blue button, Study tools page opens. You can add/remove tool from this study by click on ADD A TOOL green button. Manage tools page opens: Study tools page available to all research users. By pressing tool you enter that tool and see the data (Of course site role users can only see their site data).","title":"Study Dashboard"},{"location":"study_dashboard/#study-dashboard","text":"Study Dashboard show your study monitoring. In studies index page, click on your study, now you see your study dashboard. Important By press on study the study name appear in title bar and all the actions will be related to this study (like add user, add site etc.) To see your data monitoring in the dashboard you should define it first in monitoring option.","title":"Study Dashboard"},{"location":"study_dashboard/#monitoring","text":"In the monitoring section there is a slick with analytics of your study data. The graphs can be as bar, pie, table etc. With different colors (red, green or blue)","title":"Monitoring"},{"location":"study_dashboard/#alerts","text":"In alerts card there is a table withe the last 10 active alerts. If there are active alerts to this study a bell appears in title bar with the number of alerts. You can click on each alert to see more properties, add comments or change its status. To see all alerts of this study click on All alerts blue link","title":"Alerts"},{"location":"study_dashboard/#all-alerts","text":"In study All Alerts page you can see all alerts of this study. You can filter the alerts, export them to CSV file and update alert status by press on alert.","title":"All Alerts"},{"location":"study_dashboard/#filters","text":"In study dashboard page there is a filter option. Period - alert date <= this select date Sites Subjects This filter filters graphs and alerts accordingly.","title":"Filters"},{"location":"study_dashboard/#edc","text":"If this study has EDC DB EDC blue button appears. Click it opens a new window with study ClinCapture app.","title":"EDC"},{"location":"study_dashboard/#additional-tools","text":"There is option to add tools to your study. The optional tools exist in Tools . If you want other users (study role and site role users) to see tools you need to add them to specific study. Click on ADDITIONAL TOOLS blue button, Study tools page opens. You can add/remove tool from this study by click on ADD A TOOL green button. Manage tools page opens: Study tools page available to all research users. By pressing tool you enter that tool and see the data (Of course site role users can only see their site data).","title":"Additional Tools"},{"location":"tools/","text":"Tools In left menu bar there is a Tools option. There is a list of default tools, each customer has. If you need special tool open a support request . Audit Report In the Audit Report tool, there are a few filter options: Audit logs: database_audit_log - who changed data and when policy_changes_audit_log - changes to database audit policy, who changed and when login_audit_table - Successful and failed login attempts object_access_audit - Object access operations (select) at level of ObjectController profile views account_management_log - of activities by the super admin and customer admin (create user, add study, remove from study etc..at level of UserController From date - logs date >= this date To date - logs <= this date You can extract this report (CSV, Excel, PDF) and free search in the logs. Billing Report If your account has billing report feature , you can see all your reports in this table. Download Study Data CSVs This tool download FormsStudyData.zip folder with all your study's data. There is a CSV file for each CRF. Studies Report This table includes all your studies and a few parameters of them IRB Number - study unique protocol id Protocol Title - study official title PI Name - PI user name Auth Name - idp_user_id Enrollment target - study enrollment target Active - Number of active subjects Not-active - Number of closed subjects Start date - study start date End date - study completion date Status - study status","title":"Tools"},{"location":"tools/#tools","text":"In left menu bar there is a Tools option. There is a list of default tools, each customer has. If you need special tool open a support request .","title":"Tools"},{"location":"tools/#audit-report","text":"In the Audit Report tool, there are a few filter options: Audit logs: database_audit_log - who changed data and when policy_changes_audit_log - changes to database audit policy, who changed and when login_audit_table - Successful and failed login attempts object_access_audit - Object access operations (select) at level of ObjectController profile views account_management_log - of activities by the super admin and customer admin (create user, add study, remove from study etc..at level of UserController From date - logs date >= this date To date - logs <= this date You can extract this report (CSV, Excel, PDF) and free search in the logs.","title":"Audit Report"},{"location":"tools/#billing-report","text":"If your account has billing report feature , you can see all your reports in this table.","title":"Billing Report"},{"location":"tools/#download-study-data-csvs","text":"This tool download FormsStudyData.zip folder with all your study's data. There is a CSV file for each CRF.","title":"Download Study Data CSVs"},{"location":"tools/#studies-report","text":"This table includes all your studies and a few parameters of them IRB Number - study unique protocol id Protocol Title - study official title PI Name - PI user name Auth Name - idp_user_id Enrollment target - study enrollment target Active - Number of active subjects Not-active - Number of closed subjects Start date - study start date End date - study completion date Status - study status","title":"Studies Report"}]}